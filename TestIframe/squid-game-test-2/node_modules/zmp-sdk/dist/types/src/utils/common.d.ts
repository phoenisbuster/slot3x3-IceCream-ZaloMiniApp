import { PlatformType } from '../types/enum';
import { ACTION } from '../constants';
/**
 * Checks if a url is valid
 * @param {string} string URL
 * @returns {boolean} Result of checking
 *
 */
export declare const isValidUrl: (string: string) => boolean;
export declare const loadNewApp: (src: string) => Promise<unknown>;
export declare const convertStringToByte: (str: string) => number;
/**
 * Return size of storage by prefix in KB
 * @param storage localStorage
 * @param prefix key format: prefix_<key>
 */
export declare const calcLocalStorageSize: (storage: Storage, prefix?: string | undefined) => number;
export declare const assert: (condition: any, message?: string | undefined) => void;
export declare const getUserAgent: () => any;
export declare const checkPlatform: () => {
    isWP: boolean;
    isAndroid: boolean;
    isIOS: boolean;
    isMobile: boolean;
    isZalo: boolean;
};
/**
 * get content from meta
 * @param {string} string meta name
 * @returns {string} content of meta name
 *
 */
export declare const getMetaValue: (key: string) => string | null;
/**
 * get Zalo Version
 * @returns {string} zalo current version
 *
 */
export declare const getZaloVersion: () => any;
/**
 * get platform
 * @returns {string} platform
 *
 */
export declare const getPlatform: () => PlatformType;
export declare const isType: (argument: any, type: string) => boolean;
export declare const isEmpty: (value: any) => any;
export declare const getToken: (name: string) => string | null;
/**
 * Generate a unique string from a input string by:
 * 1. Remove accents from input string
 * 2. Remove all spaces
 * 3. Lower case
 * 4. Concat with a random string
 * @param {string} str
 * @returns unique string
 */
export declare const generateUniqueString: (str?: string) => string;
export declare const parseJSON: (str: any) => any;
export declare const serialize: (data: any) => any;
export declare const getAppUrl: (appId: string) => string;
export declare const isSupportNativeStorage: () => boolean;
export declare const stringifyData: (data: any) => string;
export declare const stringToData: (data: string | null) => any;
export declare const checkIOSSupportAction: (action: typeof ACTION[keyof typeof ACTION]) => boolean;
export declare const getZMPShareInfo: (appID: string, accessToken: string, shareTitle: string, shareDescription: string, shareThumbnail: string, sharePath?: string | undefined) => Promise<{
    zinstantApi: string;
    shareId: string;
    shareableLink: string;
    ztemplateId: string;
}>;
export declare const checkData: (types: string | Array<string>, option?: {
    min?: number | undefined;
    max?: number | undefined;
    maxLength?: number | undefined;
    values?: any[] | undefined;
    default?: any;
    regex?: RegExp | undefined;
} | undefined) => (data: any) => {
    error: boolean;
    errorMessage: string | string[];
} | {
    error: boolean;
    errorMessage?: undefined;
};
export declare const getAppInfo: (appId: string, versionStatus: number, currentVersion?: string | undefined) => Promise<{
    description: string;
    version: string;
    name: string;
    appUrl: string;
    qrCodeUrl: string;
    logoUrl?: string;
}>;
