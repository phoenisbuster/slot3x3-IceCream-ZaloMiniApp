import * as InputDataType from '../types/inputData';
import { Basics } from './basic';
import { NavigationBar } from './navigationBar';
import { Background } from './background';
import { Device } from './device';
import { DataCaching } from './dataCaching';
import { OpenApi } from './openApi';
import { Window } from './window';
import { Location } from './location';
import { Media } from './media';
import { Zalo } from './zalo';
import { Routing } from './routing';
import ZJSBridge from '../zaloJsBridge';
import { SDKServiceInterface } from '../types/interface';
import { ZMPEEmitter } from '../event-emitter';
import { contextInfo } from '../types/entity';
import { GetAuthCodeSuccessCallback } from '../types/callbackData';
export default class ZaloMiniProgramSDKService implements SDKServiceInterface {
    #private;
    events: ZMPEEmitter;
    isShowNavBar: boolean;
    isIOS: boolean;
    private static instance;
    static getInstance(): ZaloMiniProgramSDKService;
    constructor();
    getActionBarConfig: () => InputDataType.ActionBarConfig;
    setActionBarConfig: (setState: (state: InputDataType.ActionBarConfig) => InputDataType.ActionBarConfig) => void;
    getLoginStatus(): boolean;
    getAppId(): string;
    getZAppId(): string;
    getDeviceId(): Promise<string>;
    getDeviceIdSync(): string;
    getContext(): Promise<contextInfo | null>;
    getContextSync(): contextInfo | null;
    getAuthCode: () => Promise<GetAuthCodeSuccessCallback>;
    getJSBridge(): ZJSBridge;
    login(object?: InputDataType.CallbackType): Promise<string>;
    loginZaloV3(): Promise<string | null>;
    loginZaloV4(): Promise<string | null>;
    getAccessToken(object?: InputDataType.CallbackType): Promise<string | null>;
    setAccessToken: (accessToken: string) => void;
    getVersion: typeof Basics.getVersion;
    getSystemInfo: typeof Basics.getSystemInfo;
    setNavigationBarTitle: typeof NavigationBar.setNavigationBarTitle;
    setNavigationBarColor: typeof NavigationBar.setNavigationBarColor;
    setNavigationBarLeftButton: typeof NavigationBar.setNavigationBarLeftButton;
    setBackgroundColor: typeof Background.setBackgroundColor;
    setDeviceOrientation: typeof Device.setDeviceOrientation;
    setStorage: typeof DataCaching.setStorage;
    getStorage: typeof DataCaching.getStorage;
    getStorageInfo: typeof DataCaching.getStorageInfo;
    removeStorage: typeof DataCaching.removeStorage;
    clearStorage: typeof DataCaching.clearStorage;
    getUserInfo: typeof OpenApi.getUserInfo;
    getNetworkType: typeof Device.getNetworkType;
    onNetworkStatusChange: typeof Device.onNetworkStatusChange;
    startBeaconDiscovery: typeof Device.startBeaconDiscovery;
    stopBeaconDiscovery: typeof Device.stopBeaconDiscovery;
    getBeacons: typeof Device.getBeacons;
    closeApp: typeof Window.closeApp;
    getLocation: typeof Location.getLocation;
    stopBluetoothDevicesDiscovery: typeof Device.stopBluetoothDevicesDiscovery;
    startBluetoothDevicesDiscovery: typeof Device.stopBluetoothDevicesDiscovery;
    openBluetoothAdapter: typeof Device.openBluetoothAdapter;
    onBluetoothDeviceFound: typeof Device.onBluetoothDeviceFound;
    onBluetoothAdapterStateChange: typeof Device.onBluetoothAdapterStateChange;
    getConnectedBluetoothDevices: typeof Device.getConnectedBluetoothDevices;
    getBluetoothDevices: typeof Device.getBluetoothDevices;
    getBluetoothAdapterState: typeof Device.getBluetoothAdapterState;
    closeBluetoothAdapter: typeof Device.closeBluetoothAdapter;
    scanQRCode: typeof Device.scanQRCode;
    openProfile: typeof Zalo.openProfile;
    openChat: typeof Zalo.openChat;
    openPostFeed: typeof Zalo.openPostFeed;
    followOA: typeof Zalo.followOA;
    unFollowOA: typeof Zalo.unfollowOA;
    openShareSheet: typeof Zalo.openShareSheet;
    requestCameraPermission: typeof Media.requestCameraPermission;
    createShortcut: typeof Zalo.createShortcut;
    openBioAuthentication: typeof Device.openBioAuthentication;
    checkStateBioAuthentication: typeof Device.checkStateBioAuthentication;
    sendLocation: typeof Location.sendLocation;
    showToast: typeof Device.showToast;
    hideKeyboard: typeof Device.hideKeyboard;
    openPhone: typeof Device.openPhone;
    openSMS: typeof Device.openSMS;
    viewOAQr: typeof Zalo.viewOAQr;
    keepScreen: typeof Device.keepScreen;
    saveImageToPhotosAlbum: typeof Media.saveImageToPhotosAlbum;
    openMiniApp: typeof Window.openMiniApp;
    vibrate: typeof Device.vibrate;
    openWebview: typeof Window.openWebview;
    getRouteParams: typeof Routing.getRouteParams;
    getAppInfo: typeof Basics.getAppInfo;
    sendDataToPreviousMiniApp: typeof Routing.sendDataToPreviousMiniApp;
    onCallbackData: typeof Routing.onCallbackData;
    getPhoneNumber: typeof OpenApi.getPhoneNumber;
    openProfilePicker: typeof Zalo.openProfilePicker;
    connectWifi: typeof Device.connectWifi;
    openMediaPicker: typeof Zalo.openMediaPicker;
    openOutApp: typeof Zalo.openOutApp;
    closeLoading: typeof Window.closeLoading;
    openAppStore: typeof Device.openAppStore;
}
