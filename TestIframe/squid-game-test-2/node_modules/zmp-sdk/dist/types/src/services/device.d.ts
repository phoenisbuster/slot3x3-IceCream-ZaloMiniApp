import * as InputDataType from '../types/inputData';
import * as CallbackDataType from '../types/callbackData';
import ZaloMiniProgramSDK from './zalo-mp-service';
export declare class Device {
    /**
     * Sets the device orientation.
     *
     * @async
     * @function setDeviceOrientation
     * @category Device
     *
     */
    static setDeviceOrientation(this: ZaloMiniProgramSDK, object: InputDataType.DeviceOrientationType): Promise<void>;
    /**
     * Gets the network type.
     *
     * @async
     * @function getNetworkType
     * @category Device
     *
     * @example
     * zmpApis.getNetworkType().then((res) => {
     *  console.log(res.networkType);
     * }).catch((error) => {
     *  console.log("Fail");
     * });
     *
     * @returns {Promise<NetworkType>} Promise object
     *
     */
    static getNetworkType(this: ZaloMiniProgramSDK, object?: InputDataType.CallbackType): Promise<CallbackDataType.NetworkTypeSuccessCallback>;
    /**
     * Listens on the network status change event.
     *
     * @function onNetworkStatusChange
     * @category Device
     *
     * @example
     * zmpApis.onNetworkStatusChange(function (res) {
     *  console.log(res.isConnected);
     *  console.log(res.networkType);
     * })
     *
     * @param {Function} callback - The callback function for the network status change event.
     */
    static onNetworkStatusChange(this: ZaloMiniProgramSDK, callback: (res: InputDataType.OnNetworkStatusChangeCallback) => void): Promise<void>;
    /**
     * Starts searching for nearby iBeacon devices.
     *
     * @function startBeaconDiscovery
     * @category Device
     *
     * @example
     * zmpApis.startBeaconDiscovery().then((res) => {})
     *
     * @param {Object} object
     * @param {string} [object.uuids] - The list of iBeacon device broadcast UUIDs
     */
    static startBeaconDiscovery(this: ZaloMiniProgramSDK, object: InputDataType.StartBeaconDiscoveryDataType): Promise<boolean>;
    /**
     * Stops searching for nearby iBeacon devices.
     *
     * @function stopBeaconDiscovery
     * @category Device
     *
     * @example
     * zmpApis.stopBeaconDiscovery().then((res) => {})
     *
     */
    static stopBeaconDiscovery(this: ZaloMiniProgramSDK, object?: InputDataType.CallbackType): Promise<boolean>;
    /**
     * Obtains all discovered iBeacon devices.
     *
     * @function getBeacons
     * @category Device
     *
     * @example
     * zmpApis.getBeacons().then((res) => {
     *  console.log(res.beacons);
     * })
     *
     */
    static getBeacons(this: ZaloMiniProgramSDK, object?: InputDataType.CallbackType): Promise<CallbackDataType.IBeaconSuccessCallback>;
    /**
     * Dừng tìm kiếm các thiết bị Bluetooth xung quanh. Nếu bạn đã tìm thấy thiết bị mình cần và không cần tiếp tục tìm kiếm, chúng tôi khuyên bạn nên gọi API này để ngừng tìm kiếm.
     *
     * @async
     * @function stopBluetoothDevicesDiscovery
     * @Category Device
     *
     *  @example
     * zmpApis.stopBluetoothDevicesDiscovery()
     * .then((res) => {
     *  console.log("Success");
     * }).catch((error) => {
     *  console.log("Fail");
     * });
     *
     * @returns  {Promise}
     */
    static stopBluetoothDevicesDiscovery(this: ZaloMiniProgramSDK): Promise<any>;
    /**
     * Bắt đầu tìm kiếm các thiết bị Bluetooth xung quanh
     *
     * @async
     * @function startBluetoothDevicesDiscovery
     * @Category Device
     *
     * @example
     * zmpApis.startBluetoothDevicesDiscovery({
     *  allowDuplicatesKey : 0,
     *  interval: 0
     * }).then((res) => {
     *  console.log("Success");
     * }).catch((error) => {
     *  console.log("Fail");
     * });
     *
     * @param {InputDataType.StartBluetoothDevicesDiscovery} object
     * @returns  {Promise}
     */
    static startBluetoothDevicesDiscovery(this: ZaloMiniProgramSDK, object: InputDataType.StartBluetoothDevicesDiscovery): Promise<any>;
    /**
     * Khởi tạo bluetooth module
     *
     * @async
     * @function openBluetoothAdapter
     * @Category Device
     *
     * @example
     * zmpApis.openBluetoothAdapter()
     * .then((res) => {
     *  console.log("Success");
     * }).catch((error) => {
     *  console.log("Fail");
     * });
     *
     * @returns  {Promise}
     */
    static openBluetoothAdapter(this: ZaloMiniProgramSDK): Promise<any>;
    /**
     * Nghe sự kiện device mới được thấy.
     *
     * @async
     * @function onBluetoothDeviceFound
     * @category Device
     *
     * @example
     * zmpApis.onBluetoothDeviceFound()
     * .then(res=> console.log(res))
     * .catch(err=> console.log(err))
     * @returns  {Promise}
     */
    static onBluetoothDeviceFound(this: ZaloMiniProgramSDK): Promise<any>;
    /**
     * Nghe sự kiện thay đổi trạng thái Bluetooth.
     *
     * @async
     * @function onBluetoothAdapterStateChange
     * @Category Device
     *
     * @example
     * zmpApis.onBluetoothAdapterStateChange()
     * .then(res => {
     * console.log(res)
     * })
     * .catch(err => {
     * console.log(err)
     * })
     * @returns  {Promise}
     */
    static onBluetoothAdapterStateChange(this: ZaloMiniProgramSDK): Promise<any>;
    /**
     * Lấy danh sách các thiết bị đã kết nối
     *
     * @async
     * @function getConnectedBluetoothDevices
     * @Category Device
     *
     * @example
     * zmpApis.getConnectedBluetoothDevices({
     *
     * })
     * .then(res => console.log(res))
     * .catch(err => console.log(err))
     * @param {InputDataType.GetConnectedBluetoothDevices} The list of primary service UUIDs
     * @returns  {Promise}
     */
    static getConnectedBluetoothDevices(this: ZaloMiniProgramSDK, object: InputDataType.GetConnectedBluetoothDevices): Promise<any>;
    /**
     * Lấy danh sách các thiết bị bluetooth bao gồm cả các devices đã kết nối
     *
     * @async
     * @function getBluetoothDevices
     * @Category Device
     *
     * @example
     * zmpApis.getBluetoothDevices()
     * .then(res => console.log(res))
     * .catch(err => console.log(err))
     *
     * @returns  {Promise}
     */
    static getBluetoothDevices(this: ZaloMiniProgramSDK): Promise<any>;
    /**
     * Lấy trạng thái của Bluetooth adapter
     *
     * @async
     * @function getBluetoothAdapterState
     * @Category Device
     *
     * @example
     * zmpApis.getBluetoothAdapterState()
     * .then(res => console.log(res))
     * .catch(err => console.log(err))
     *
     * @returns  {Promise}
     */
    static getBluetoothAdapterState(this: ZaloMiniProgramSDK): Promise<any>;
    /**
     * Đóng bluetooth adapter
     *
     * @async
     * @function closeBluetoothAdapter
     * @Category Device
     *
     * @example
     * zmpApis.closeBluetoothAdapter()
     * .then(res => console.log(res))
     * .catch(err => console.log(err))
     *
     * @returns  {Promise}
     */
    static closeBluetoothAdapter(this: ZaloMiniProgramSDK): Promise<any>;
    /**
     * Cho phép ứng dụng mở tính năng quét QR Code của Zalo App và trả về kết quả sau khi người dùng quét thành công.
     * @async
     * @function scanQRCode
     * @category Device
     *
     */
    static scanQRCode(this: ZaloMiniProgramSDK, object?: InputDataType.CallbackType<CallbackDataType.OpenQRSuccessCallback>): Promise<CallbackDataType.OpenQRSuccessCallback>;
    /**
     * Show toast
     * @async
     * @function showToast
     * @category Device
     *
     */
    static showToast(this: ZaloMiniProgramSDK, object: InputDataType.ShowToast): Promise<void>;
    /**
     * Ẩn keyboard
     * @async
     * @function hideKeyboard
     * @category Device
     *
     */
    static hideKeyboard(this: ZaloMiniProgramSDK, object: InputDataType.CallbackType): Promise<void>;
    /**
     * Open phone
     * @async
     * @function openPhone
     * @category Device
     *
     */
    static openPhone(this: ZaloMiniProgramSDK, object: InputDataType.OpenPhone): Promise<void>;
    /**
     * Open SMS
     * @async
     * @function openSMS
     * @category Device
     *
     */
    static openSMS(this: ZaloMiniProgramSDK, object: InputDataType.OpenSMS): Promise<void>;
    /**
     * Keep screen.
     * @async
     * @function keepScreen
     * @category Device
     *
     */
    static keepScreen(this: ZaloMiniProgramSDK, object: InputDataType.KeepScreen): Promise<void>;
    /**
     * Xác thực bằng sinh trắc học
     * @async
     * @function openBioAuthentication
     * @category Authentication
     *
     */
    static openBioAuthentication(this: ZaloMiniProgramSDK, object: InputDataType.OpenBioAuthentication<CallbackDataType.RequestBioAuthenticationSuccessCallback>): Promise<CallbackDataType.RequestBioAuthenticationSuccessCallback>;
    /**
     * Một phần của flow H5-Bio-Authentication. Dùng cho H5 kiểm tra xem bio-factor có bị thay đổi gì so với trước đây ko (thêm vân tay, reset...)
     * @async
     * @function checkStateBioAuthentication
     * @category Authentication
     *
     * @example
     * api.checkStateAuthen({
     * 	success: (res) => {},
     * 	fail: (err) => {}
     * })
     * @param {InputDataType.CallbackType} object
     */
    static checkStateBioAuthentication(this: ZaloMiniProgramSDK, object: InputDataType.CallbackType): Promise<CallbackDataType.CheckStateBioAuthenticationSuccessCallback>;
    /**
     * Vibrate.
     * @async
     * @function vibrate
     * @category Device
     *
     */
    static vibrate(this: ZaloMiniProgramSDK, object: InputDataType.VibrateInput): Promise<void>;
    /**
     * Connect Wifi.
     * @async
     * @function connectWifi
     * @category Device
     *
     */
    static connectWifi(this: ZaloMiniProgramSDK, object: InputDataType.ConnectWifi): Promise<void>;
    /**
     * Open App Store.
     * @async
     * @function openAppStore
     * @category Device
     *
     */
    static openAppStore(this: ZaloMiniProgramSDK, object: InputDataType.AppStoreInfo): Promise<void>;
}
