import { NetworkType, ProfileType, ChatType, PostFeedType, ShareSheetType, OrientationType, VibrateType, MediaPickerType } from './enum';
export declare type CallbackType<SuccessCallBackRes = any> = {
    success?: (res: SuccessCallBackRes) => void;
    fail?: (res: any) => void;
};
/**
 * Type of right menu config
 */
export declare type RightMenu = {
    data: Object[];
    supportToolBar: number;
    reset: number;
};
/**
 * Type of app config
 */
export declare type AppConfig = {
    /**
     * Title app.
     */
    title?: string;
    /**
     * 0: Default | 1: Sensor | 2: Force portrait | 3: Force landscape
     */
    orientation?: 'auto' | 'portrait' | 'landscape';
    /**
     * Color.
     */
    headerColor?: null | string;
    /**
     * Text Color.
     */
    textColor?: null | string;
    /**
     * Status bar Color.
     */
    statusBarColor?: null | string;
    /**
     * Left button.
     */
    leftButton?: 'none' | 'back' | 'home' | 'both';
};
/**
 * Type of mini app config
 */
export declare type SDKConfig = {
    app: AppConfig;
    debug: boolean;
};
declare type MenuItem = {
    /**
     * Title of a menu item
     */
    title: string;
    /**
     * Native action
     */
    action: string;
    /**
     * If ```showAsAction``` is 1 and ```iconUrl``` can load, this item will be shown outside and next to more-button. Maximum 2 item will be shown
     */
    showAsAction: 0 | 1;
    /**
     * Specifies icon of a menu item
     */
    iconUrl: string;
    /**
     * Data depends on ```action```
     */
    data: Object;
};
/**
 * Possible types navigation bar left menu
 */
export declare type NavBarLeftMenuType = {
    type: 'none' | 'back' | 'home' | 'both';
};
/**
 * Possible types navigation bar right menu
 */
export declare type NavBarRightMenuType = CallbackType & {
    /**
     * Toolbar on header of right menu
     *  - 0: Hide
     *  - 1: If right menu is show, header of right menu will have toolbar
     */
    supportToolBar: 0 | 1;
    /**
     * Reset right menu:
     *  - 0: If menuListItems is empty, right menu will hide
     *  - 1: Reset to default right menu, skip other config
     */
    reset: 0 | 1;
    menuListItems: Array<MenuItem>;
};
/**
 * Possible type navigation bar title
 */
export declare type NavBarTitleType = CallbackType & {
    title: string;
};
/**
 * Possible type navigation bar color
 */
export declare type NavBarColorType = CallbackType & {
    color: string;
    textColor?: 'white' | 'black';
    statusBarColor?: string;
};
/**
 * Possible type background color
 */
export declare type BackgroundColorType = CallbackType & {
    backgroundColor: string;
    textColor?: 'white' | 'black';
};
/**
 * Possible value orientation
 */
export declare type DeviceOrientationType = CallbackType & {
    rotate: keyof typeof OrientationType;
};
/**
 * Set Storage data type
 */
export declare type SetStorageDataType = CallbackType & {
    data: {
        [key: string]: any;
    };
};
/**
 * Get Storage data type
 */
export declare type GetStorageDataType = CallbackType & {
    keys: Array<string>;
};
/**
 * Remove Storage data type
 */
export declare type RemoveStorageDataType = CallbackType & {
    keys: Array<string>;
};
/**
 * Clear Storage data type
 */
export declare type ClearStorageDataType = CallbackType & {
    prefix?: string;
};
/**
 * Get Storage data type
 */
export declare type StorageInfoDataType = {
    currentSize: number;
    limitSize: number;
};
/**
 * Start Beacon Discovery data type
 */
export declare type StartBeaconDiscoveryDataType = CallbackType & {
    /**
     * Scanning Type:
     * 0: Scanning with list uuids default
     * 1: Scanning with list uuids that user entered
     */
    scanningType: 0 | 1;
    expire: Number;
    monitorInterval: Number;
    domain: string;
    /**
     * Scanning Config
     */
    scanConfig: {
        scanTime: Number;
        timeBetweenScan: Number;
        beaconTimeout: Number;
        delayCheckConnectedTimeout: Number;
        beaconConnectedTimeout: Number;
    };
    /** The list of iBeacon device broadcast UUIDs. Only when ```scanningType: 1``` */
    items: Array<{
        id: string;
        distance: Number;
        monitor: {
            enable: boolean;
            movingRange: Number;
        };
    }>;
    scanFromSource: string;
};
/**
 * On network status change callback
 * @typedef OnNetworkStatusChangeCallback
 */
export declare type OnNetworkStatusChangeCallback = {
    /** Indicates whether it is connected to the network */
    isConnected: boolean;
    /** Network Type */
    networkType: NetworkType;
};
/**
 * Possible types on back button click
 */
export declare type OnBackButtonClickType = {
    handler: () => void;
};
/**
 * Start Bluetooth Devices Discovery Data Type
 */
export declare type StartBluetoothDevicesDiscovery = {
    /** The list of primary service UUIDs of Bluetooth devices to be discovered */
    services: Array<string>;
    /** Allow a device can be report multiple times */
    allowDuplicatesKey: boolean;
    /** The device reporting interval. Default 0 */
    interval: number;
};
/**
 * Get connected bluetooth devices data type
 */
export declare type GetConnectedBluetoothDevices = {
    /** The list of primary service UUIDs*/
    services: Array<string>;
};
/**
 * Open Profile data type
 */
export declare type OpenProfileData = CallbackType & {
    /** id */
    id: string;
    /** type */
    type: keyof typeof ProfileType;
    sourceId?: any;
    sourceIndex?: any;
};
/**
 * Open Chat data type
 */
export declare type OpenChatData = CallbackType & {
    /** uId */
    id: string;
    /** type */
    type: keyof typeof ChatType;
    sourceId?: any;
    sourceIndex?: any;
    message?: string;
};
/**
 * Open Post feed input data
 */
export declare type OpenPostFeedData<T> = CallbackType<T> & {
    type: keyof typeof PostFeedType;
    data: {
        imageUrl?: string;
        link?: string;
        title?: string;
        thumb?: string;
        description?: string;
        avatar?: string;
        id?: string;
        displayName?: string;
    };
};
/**
 * OA input data
 */
export declare type OAInput = CallbackType & {
    /** encode PageId */
    id: string;
};
/**
 * Open Post feed input data
 */
export declare type OpenShareSheet<T> = CallbackType<T> & {
    type: keyof typeof ShareSheetType;
    data: {
        imageUrl?: string;
        imageUrls?: string[];
        caption?: string;
        gifUrl?: string;
        width?: number;
        height?: number;
        videoThumb?: string;
        videoUrl?: string;
        link?: string;
        chatOnly?: boolean;
        id?: string;
        title?: string;
        description?: string;
        thumbnail?: string;
        path?: string;
    };
};
/**
 * Create Shortcut Input data
 */
export declare type CreateShortcut = CallbackType & {
    params?: {
        [key: string]: string;
    };
};
/**
 * OpenBioAuthentication input type
 */
export declare type OpenBioAuthentication<T> = CallbackType<T> & {
    secretData: string;
    ui: {
        title: string;
        subTitle: string;
        negativeButtonText: string;
    };
    requireFingerprint: boolean;
};
/**
 * queryLocationHide Input type
 */
export declare type QueryLocationHide = CallbackType & {
    title: string;
    toUserId: string;
};
/**
 * Show toast input type
 */
export declare type ShowToast = CallbackType & {
    /** message to show */
    message: string;
};
/**
 * Open phone input type
 */
export declare type OpenPhone = CallbackType & {
    /** phone number */
    phoneNumber: string;
};
/**
 * Open SMS input type
 */
export declare type OpenSMS = CallbackType & {
    /** SMS content */
    content: string;
    /** Phone number */
    phoneNumber: string;
};
/**
 * View QR input type
 */
export declare type ViewOAQr = CallbackType & {
    id: string;
    displayName: string;
};
/**
 * Keep Screen Input type
 */
export declare type KeepScreen = CallbackType & {
    /**
     *  - 1 Gọi khi play video in web. Client sẽ keep screen on
     *  - 0 Gọi khi stop video in web. Client sẽ không keep screen on nữa.
     *  - Khi ra khỏi web client sẽ trả về "keep_screen_on": 0. Tránh TH màn hình sẽ sáng hoài.
     */
    keepScreenOn: boolean;
};
/**
 * Save image to gallery
 */
export declare type SaveImageToPhotosAlbumType = CallbackType & {
    imageBase64Data?: string;
    imageUrl?: string;
};
/**
 * Open Mini App
 */
export declare type OpenMiniApp = CallbackType & {
    appId: string;
    params?: {
        [key: string]: string;
    };
};
/**
 * Vibrate type
 */
export declare type VibrateInput = CallbackType & {
    type: keyof typeof VibrateType;
    milliseconds: number;
};
/**
 * Open Webview
 */
export declare type OpenWebview = CallbackType & {
    url: string;
};
/**
 * Redirect callback data
 */
export declare type RedirectCallbackData = CallbackType & {
    data: any;
};
/**
 * On callback data from other webview or mini app
 */
export declare type OnCallbackData = {
    data: any;
};
/**
 * Get user info data type
 */
export declare type GetUserInfoDataType<T> = CallbackType<T> & {
    avatarType?: 'small' | 'normal' | 'large';
};
export declare type OpenProfilePicker<T> = CallbackType<T> & {
    maxProfile: number;
};
export declare type ConnectWifi = CallbackType & {
    SSID: string;
    password?: string;
    hiddenSSID?: boolean;
};
export declare type OpenMediaPicker<T> = CallbackType<T> & {
    type: keyof typeof MediaPickerType;
    serverUploadUrl: string;
    maxItemSize?: number;
    editView?: {
        enable?: boolean;
        aspectRatio?: string;
    };
    silentRequest?: boolean;
    maxSelectItem?: number;
};
export declare type ActionBarConfig = {
    actionbarType: number;
    buttonType: number;
    dataConfig: {
        backgroundColor: string;
        textColor: string;
        viewInLeftType: number;
        confirmToExit: number;
    };
    homeConfig: {
        enable: number;
        url: string;
    };
};
/**
 * get zmp shareable link
 */
export declare type GetShareableLink<T> = CallbackType<T> & {
    title: string;
    description: string;
    thumbnail: string;
    path: string;
};
export declare type AppStoreInfo = {
    android: {
        url: string;
    };
    ios: {
        url: string;
        scheme_url?: string;
        itunes_id?: number | string;
    };
    wp_data?: {
        url: string;
    };
};
export declare type RequestUpdateZalo<T> = CallbackType<T> & {
    iosOpenEmbeddedStore?: boolean;
};
/**
 * CreateOrder type
 */
export declare type CreateOrder = CallbackType & {
    amount: string | number;
    item: Array<{
        [key: string]: string;
    }>;
    desc: string;
    extradata?: any;
    method?: 'ZALOPAY' | 'MOMO' | 'ZALOPAY_SANDBOX' | 'MOMO_SANDBOX' | 'ATM' | 'ATM_SANDBOX' | 'CC' | 'CC_SANDBOX';
};
export declare type CheckTransaction = CallbackType & {
    data: string | {
        [key: string]: string;
    };
};
export declare type ConfigCloseButtonRequest<T> = CallbackType<T> & {
    confirmToExit?: boolean;
    onExit?: () => void;
};
export declare type OpenOutApp = CallbackType & {
    url: string;
};
export {};
