import React, {
    CSSProperties,
    InputHTMLAttributes,
    TextareaHTMLAttributes,
    KeyboardEventHandler,
    MouseEventHandler,
    ReactElement,
    ReactNode,
} from "react";
import { InputStatus, ValidateStatus } from "../../utils/statusUtils";

export const enum InputType {
    text = "text",
    password = "password",
}

export const enum InputSize {
    large = "large",
    medium = "medium",
    small = "small",
}
export interface InputFocusOptions extends FocusOptions {
    cursor?: "start" | "end" | "all";
}

export interface CommonInputProps {
    prefix?: ReactNode;
    suffix?: ReactNode;
    addonBefore?: ReactNode;
    addonAfter?: ReactNode;
    affixWrapperClassName?: string;
    groupClassName?: string;
    wrapperClassName?: string;
    inputClassName?: string;
    allowClear?: boolean | { clearIcon?: ReactNode };
}

export interface BaseInputProps extends CommonInputProps {
    value?: InputHTMLAttributes<HTMLInputElement>["value"];
    inputElement: ReactElement;
    prefixCls?: string;
    className?: string;
    style?: CSSProperties;
    disabled?: boolean;
    focused?: boolean;
    triggerFocus?: () => void;
    readOnly?: boolean;
    handleReset?: MouseEventHandler;
    hidden?: boolean;
}

export interface ShowCountProps {
    formatter: (args: {
        value: string;
        count: number;
        maxLength?: number;
    }) => ReactNode;
}

export interface ClearableLabeledBaseInputProps extends BaseInputProps {
    label?: string;
    helperText?: string;
    errorText?: string;
    status?: ValidateStatus;
    clearable?: boolean | { mode?: "focus" | "always" };
    maxLength?: number;
    showCount?: boolean | ShowCountProps;
}

export interface InputProps
    extends Omit<ClearableLabeledBaseInputProps, "status" | "inputElement">,
        Omit<
            InputHTMLAttributes<HTMLInputElement>,
            "size" | "prefix" | "type"
        > {
    type?: keyof typeof InputType;
    status?: InputStatus;
    onPressEnter?: KeyboardEventHandler<HTMLInputElement>;
    size?: keyof typeof InputSize;
}

export interface InputRef {
    focus: (options?: InputFocusOptions) => void;
    blur: () => void;
    setSelectionRange: (
        start: number,
        end: number,
        direction?: "forward" | "backward" | "none"
    ) => void;
    select: () => void;
    input: HTMLInputElement | null;
}

export interface IconProps {
    className?: string;
    style?: React.CSSProperties;
}

export interface PasswordProps extends InputProps {
    visibilityToggle?: boolean;
    iconRender?: (visible: boolean) => React.ReactNode;
}

export interface SearchProps extends InputProps {
    onSearch?: (
        value: string,
        event?:
            | React.ChangeEvent<HTMLInputElement>
            | React.MouseEvent<HTMLElement>
            | React.KeyboardEvent<HTMLInputElement>
    ) => void;
    loading?: boolean;
}

export interface AutoSizeType {
    minRows?: number;
    maxRows?: number;
}

export interface TextAreaRef {
    focus: (options?: InputFocusOptions) => void;
    blur: () => void;
    setSelectionRange: (
        start: number,
        end: number,
        direction?: "forward" | "backward" | "none"
    ) => void;
    select: () => void;
    textarea: HTMLTextAreaElement | null;
}

export interface TextAreaProps
    extends Omit<ClearableLabeledBaseInputProps, "status">,
        Omit<
            TextareaHTMLAttributes<HTMLTextAreaElement>,
            "size" | "prefix" | "type"
        > {
    status?: InputStatus;
    onPressEnter?: KeyboardEventHandler<HTMLTextAreaElement>;
    size?: keyof typeof InputSize;
    autoSize?: boolean | AutoSizeType;
    showCount?: boolean | ShowCountProps;
    onResize?: (size: { width: number; height: number }) => void;
}

export interface OTPRef {
    focus: () => void;
    blur: () => void;
}

export interface OTPProps
    extends Pick<
        InputHTMLAttributes<HTMLInputElement>,
        | "disabled"
        | "readOnly"
        | "onChange"
        | "name"
        | "id"
        | "className"
        | "style"
    > {
    value: string;
    defaultValue: string;
    otpLength?: number;
    show?: boolean;
}
export interface CompoundedComponent
    extends React.ForwardRefExoticComponent<
        InputProps & React.RefAttributes<InputRef>
    > {
    Password: React.ForwardRefExoticComponent<
        PasswordProps & React.RefAttributes<InputRef>
    >;
    Search: React.ForwardRefExoticComponent<
        SearchProps & React.RefAttributes<InputRef>
    >;
    TextArea: React.ForwardRefExoticComponent<
        TextAreaProps & React.RefAttributes<TextAreaRef>
    >;
    OTP: React.ForwardRefExoticComponent<
        OTPProps & React.RefAttributes<OTPRef>
    >;
}

declare const Input: CompoundedComponent;

export default Input;


