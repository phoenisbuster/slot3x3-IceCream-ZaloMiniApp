import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import React, { useEffect, useState } from "react";
import classNames from "clsx";
import Input from "../input";
import PickerTrigger from "./PickerTrigger";
import PickerPanel from "./PickerPanel";
import { getPrefixCls } from "../../utils/class";

var Picker = function Picker(props) {
  var label = props.label,
      helperText = props.helperText,
      status = props.status,
      errorText = props.errorText,
      data = props.data,
      value = props.value,
      defaultValue = props.defaultValue,
      onChange = props.onChange,
      action = props.action,
      placeholder = props.placeholder,
      title = props.title,
      defaultOpen = props.defaultOpen,
      disabled = props.disabled,
      formatPickedValueDisplay = props.formatPickedValueDisplay,
      _props$mask = props.mask,
      mask = _props$mask === void 0 ? true : _props$mask,
      _props$maskClosable = props.maskClosable,
      maskClosable = _props$maskClosable === void 0 ? true : _props$maskClosable,
      inputClass = props.inputClass,
      datePicker = props.datePicker,
      initData = props.initData,
      suffix = props.suffix,
      prefix = props.prefix;

  var getInitValue = function getInitValue(val, defaultVal, options) {
    var getOption = function getOption(opts) {
      var result = {};
      Object.keys(opts).forEach(function (optName) {
        var group = options.find(function (dataGroup) {
          return dataGroup.name === optName;
        });

        if (group) {
          var opt = group.options.find(function (o) {
            return o.value === opts[optName];
          });

          if (opt) {
            result[optName] = opt;
          }
        }
      });
      return result;
    };

    if (val) return getOption(val);
    if (defaultVal) return getOption(defaultVal);
    return {};
  };

  var _useState = useState(!!defaultOpen && !disabled),
      visible = _useState[0],
      setVisible = _useState[1];

  var _useState2 = useState(getInitValue(value, defaultValue, data || [])),
      pickerValue = _useState2[0],
      setPickerValue = _useState2[1];

  useEffect(function () {
    if (value) {
      setPickerValue(getInitValue(value, undefined, data || []));
    }
  }, [value]);

  var closePicker = function closePicker() {
    setVisible(false);
  };

  var handleChangePickerValue = function handleChangePickerValue(otp, name) {
    var _pickerValue$name;

    if (((_pickerValue$name = pickerValue[name]) == null ? void 0 : _pickerValue$name.value) !== otp.value) {
      var _objectSpread2;

      onChange == null ? void 0 : onChange(_objectSpread(_objectSpread({}, pickerValue), {}, (_objectSpread2 = {}, _objectSpread2[name] = otp, _objectSpread2)));
      setPickerValue(function (prevState) {
        var _objectSpread3;

        return _objectSpread(_objectSpread({}, prevState), {}, (_objectSpread3 = {}, _objectSpread3[name] = otp, _objectSpread3));
      });
    }
  };

  var prefixCls = getPrefixCls("picker");
  var inputCls = classNames(prefixCls + "-input", inputClass);

  var getPopupElement = function getPopupElement() {
    return /*#__PURE__*/React.createElement(PickerPanel, {
      prefixCls: prefixCls,
      className: prefixCls,
      data: data,
      value: pickerValue,
      onChange: handleChangePickerValue,
      title: title,
      closePanel: closePicker,
      action: action,
      datePicker: datePicker,
      initData: initData
    });
  };

  var getInputDisplay = function getInputDisplay(picked) {
    if (formatPickedValueDisplay) {
      return formatPickedValueDisplay(picked);
    }

    return Object.keys(picked).map(function (k) {
      return pickerValue[k].displayName;
    }).filter(function (item) {
      return item !== null;
    }).join(", ");
  };

  var inputDisplay = getInputDisplay(pickerValue);
  return /*#__PURE__*/React.createElement(PickerTrigger, {
    popupElement: getPopupElement(),
    visible: visible,
    defaultOpen: defaultOpen,
    onVisibilityChange: function onVisibilityChange(v) {
      setVisible(v);
    },
    mask: mask,
    maskClosable: maskClosable
  }, /*#__PURE__*/React.createElement(Input, {
    label: label,
    className: inputCls,
    helperText: helperText,
    status: status,
    errorText: errorText,
    placeholder: placeholder,
    value: inputDisplay,
    readOnly: true,
    disabled: disabled,
    prefix: prefix,
    suffix: suffix
  }));
};

Picker.defaultProps = {
  datePicker: false,
  initData: undefined
};
export default Picker;