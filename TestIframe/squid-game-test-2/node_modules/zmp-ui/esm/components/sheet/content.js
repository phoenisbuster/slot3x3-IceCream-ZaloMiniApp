import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import React, { forwardRef, useImperativeHandle, useLayoutEffect, useRef, useState } from "react";
import { useDrag } from "@use-gesture/react";
import classNames from "clsx";
import { animated, config, to, useSpring } from "@react-spring/web";
import { getPrefixCls } from "../../utils/class";
import { ANIMATION_DURATION, DRAG_THRESHOLD } from "./utils/constants";
import useElementSize from "./hooks/useElementSize";
var Content = /*#__PURE__*/forwardRef(function (props, ref) {
  var _classNames;

  var title = props.title,
      visible = props.visible,
      onVisibleChanged = props.onVisibleChanged,
      _props$handler = props.handler,
      handler = _props$handler === void 0 ? true : _props$handler,
      children = props.children,
      _props$autoHeight = props.autoHeight,
      autoHeight = _props$autoHeight === void 0 ? false : _props$autoHeight,
      contentRef = props.contentRef,
      onClose = props.onClose,
      swipeToClose = props.swipeToClose,
      style = props.style,
      height = props.height,
      snapPoints = props.snapPoints,
      _props$defaultSnapPoi = props.defaultSnapPoint,
      defaultSnapPoint = _props$defaultSnapPoi === void 0 ? 0 : _props$defaultSnapPoi,
      onSnap = props.onSnap;
  var handlerRef = useRef();

  var _useState = useState(defaultSnapPoint),
      currentSnapPoint = _useState[0],
      setCurrentSnapPoint = _useState[1];

  var sheetRef = useRef();
  var sheetHeight = useElementSize({
    ref: sheetRef
  });

  var _useState2 = useState({
    movement: [0, 0],
    down: false,
    first: false,
    vy: 0
  }),
      state = _useState2[0],
      set = _useState2[1];

  var getSnapPoints = function getSnapPoints() {
    if (!snapPoints) return undefined;
    if (!sheetHeight) return undefined;

    if (typeof snapPoints === "function") {
      return snapPoints({
        sheetModalHeight: sheetHeight
      });
    }

    return snapPoints.map(function (item) {
      return item * sheetHeight;
    });
  };

  var sheetSnapPoints = getSnapPoints();
  var prevVisible = useRef(false);
  var prefixCls = getPrefixCls("sheet-content");

  var snapTo = function snapTo(point) {
    setCurrentSnapPoint(point);
  };

  useImperativeHandle(ref, function () {
    return {
      sheet: sheetRef.current,
      snapTo: snapTo
    };
  });
  useImperativeHandle(contentRef, function () {
    return sheetRef.current;
  });
  useLayoutEffect(function () {
    if (prevVisible.current) {
      setTimeout(function () {
        onVisibleChanged == null ? void 0 : onVisibleChanged(!!visible);
      }, ANIMATION_DURATION);
    }

    if (!visible && sheetSnapPoints && sheetSnapPoints.length && currentSnapPoint !== defaultSnapPoint) {
      setCurrentSnapPoint(defaultSnapPoint);
    }

    prevVisible.current = !!visible; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [visible, onVisibleChanged]);

  var handlerDrag = function handlerDrag(_ref) {
    var down = _ref.down,
        first = _ref.first,
        _ref$velocity = _ref.velocity,
        vy = _ref$velocity[1],
        movement = _ref.movement,
        event = _ref.event,
        memo = _ref.memo;
    set({
      down: down,
      movement: movement,
      first: first,
      vy: vy
    });
    if (down) return movement[1];
    var my = movement[1];

    if (memo && memo < 0 && !my) {
      my = memo;
    }

    if (my < 0 && my < -DRAG_THRESHOLD && sheetSnapPoints) {
      if (currentSnapPoint < sheetSnapPoints.length - 1) {
        onSnap == null ? void 0 : onSnap(currentSnapPoint + 1);
        setCurrentSnapPoint(currentSnapPoint + 1);
      }

      return my;
    }

    if (my > 0 && my > DRAG_THRESHOLD) {
      if (currentSnapPoint > 0) {
        onSnap == null ? void 0 : onSnap(currentSnapPoint - 1);
        setCurrentSnapPoint(currentSnapPoint - 1);
      } else {
        onClose == null ? void 0 : onClose(event);
      }
    }

    return my;
  };

  var bind = useDrag(handlerDrag, {
    filterTaps: true
  });
  var cls = classNames(prefixCls, (_classNames = {}, _classNames[prefixCls + "-hug-content"] = autoHeight, _classNames));
  var down = state.down,
      movement = state.movement,
      vy = state.vy;

  var animationConfig = _objectSpread(_objectSpread({}, config.stiff), {}, {
    duration: !visible || !sheetSnapPoints || currentSnapPoint === sheetSnapPoints.length - 1 ? ANIMATION_DURATION : undefined,
    velocity: vy
  });

  var getCurrentTransform = function getCurrentTransform(points, curPoint, isVisible) {
    if (!isVisible) return sheetHeight || window.innerHeight;

    if (!points || !points.length) {
      return 0;
    }

    return points[curPoint] || 0;
  };

  var _useSpring = useSpring({
    transformAmount: getCurrentTransform(sheetSnapPoints, currentSnapPoint, !!visible),
    slideAmount: down ? movement[1] : 0,
    config: _objectSpread({}, animationConfig)
  }),
      transformAmount = _useSpring.transformAmount,
      slideAmount = _useSpring.slideAmount;

  var transform = to([transformAmount, slideAmount], function (amount, slide) {
    return "translateY(calc(" + amount + "px + " + slide + "px))";
  });
  var header = /*#__PURE__*/React.createElement("div", {
    className: prefixCls + "-header"
  }, /*#__PURE__*/React.createElement("div", {
    className: prefixCls + "-title"
  }, title));
  var handlerEl = /*#__PURE__*/React.createElement("div", _extends({
    ref: handlerRef,
    className: prefixCls + "-handler-wrapper"
  }, bind()), /*#__PURE__*/React.createElement("span", {
    className: prefixCls + "-handler"
  }));

  var modalStyle = _objectSpread({}, style || {});

  if (height) {
    modalStyle.height = height;
  }

  return /*#__PURE__*/React.createElement(animated.div, _extends({
    style: {
      transform: transform
    }
  }, !handler && (swipeToClose || sheetSnapPoints) ? bind() : {}, {
    className: cls,
    ref: sheetRef
  }), handler && handlerEl, title && header, children);
});
export default Content;