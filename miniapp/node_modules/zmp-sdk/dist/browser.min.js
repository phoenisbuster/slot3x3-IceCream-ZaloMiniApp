(function () {
    'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }

    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m") throw new TypeError("Private method is not writable");
        if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    /** Used for built-in method references. */
    var objectProto$9 = Object.prototype;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$9;

      return value === proto;
    }

    var _isPrototype = isPrototype;

    /**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }

    var _overArg = overArg;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeKeys = _overArg(Object.keys, Object);

    var _nativeKeys = nativeKeys;

    /** Used for built-in method references. */
    var objectProto$8 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$7 = objectProto$8.hasOwnProperty;

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!_isPrototype(object)) {
        return _nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty$7.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    var _baseKeys = baseKeys;

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    /** Detect free variable `global` from Node.js. */
    var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    var _freeGlobal = freeGlobal;

    /** Detect free variable `self`. */
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root = _freeGlobal || freeSelf || Function('return this')();

    var _root = root;

    /** Built-in value references. */
    var Symbol$1 = _root.Symbol;

    var _Symbol = Symbol$1;

    /** Used for built-in method references. */
    var objectProto$7 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$6 = objectProto$7.hasOwnProperty;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString$1 = objectProto$7.toString;

    /** Built-in value references. */
    var symToStringTag$1 = _Symbol ? _Symbol.toStringTag : undefined;

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty$6.call(value, symToStringTag$1),
          tag = value[symToStringTag$1];

      try {
        value[symToStringTag$1] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString$1.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag$1] = tag;
        } else {
          delete value[symToStringTag$1];
        }
      }
      return result;
    }

    var _getRawTag = getRawTag;

    /** Used for built-in method references. */
    var objectProto$6 = Object.prototype;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto$6.toString;

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    var _objectToString = objectToString;

    /** `Object#toString` result references. */
    var nullTag = '[object Null]',
        undefinedTag = '[object Undefined]';

    /** Built-in value references. */
    var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? _getRawTag(value)
        : _objectToString(value);
    }

    var _baseGetTag = baseGetTag;

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    var isObject_1 = isObject;

    /** `Object#toString` result references. */
    var asyncTag = '[object AsyncFunction]',
        funcTag$1 = '[object Function]',
        genTag = '[object GeneratorFunction]',
        proxyTag = '[object Proxy]';

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject_1(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = _baseGetTag(value);
      return tag == funcTag$1 || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    var isFunction_1 = isFunction;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = _root['__core-js_shared__'];

    var _coreJsData = coreJsData;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    var _isMasked = isMasked;

    /** Used for built-in method references. */
    var funcProto$1 = Function.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString$1 = funcProto$1.toString;

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString$1.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    var _toSource = toSource;

    /**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
     */
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

    /** Used to detect host constructors (Safari). */
    var reIsHostCtor = /^\[object .+?Constructor\]$/;

    /** Used for built-in method references. */
    var funcProto = Function.prototype,
        objectProto$5 = Object.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty$5 = objectProto$5.hasOwnProperty;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty$5).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject_1(value) || _isMasked(value)) {
        return false;
      }
      var pattern = isFunction_1(value) ? reIsNative : reIsHostCtor;
      return pattern.test(_toSource(value));
    }

    var _baseIsNative = baseIsNative;

    /**
     * Gets the value at `key` of `object`.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function getValue(object, key) {
      return object == null ? undefined : object[key];
    }

    var _getValue = getValue;

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = _getValue(object, key);
      return _baseIsNative(value) ? value : undefined;
    }

    var _getNative = getNative;

    /* Built-in method references that are verified to be native. */
    var DataView = _getNative(_root, 'DataView');

    var _DataView = DataView;

    /* Built-in method references that are verified to be native. */
    var Map$1 = _getNative(_root, 'Map');

    var _Map = Map$1;

    /* Built-in method references that are verified to be native. */
    var Promise$1 = _getNative(_root, 'Promise');

    var _Promise = Promise$1;

    /* Built-in method references that are verified to be native. */
    var Set$1 = _getNative(_root, 'Set');

    var _Set = Set$1;

    /* Built-in method references that are verified to be native. */
    var WeakMap$1 = _getNative(_root, 'WeakMap');

    var _WeakMap = WeakMap$1;

    /** `Object#toString` result references. */
    var mapTag$2 = '[object Map]',
        objectTag$1 = '[object Object]',
        promiseTag = '[object Promise]',
        setTag$2 = '[object Set]',
        weakMapTag$1 = '[object WeakMap]';

    var dataViewTag$1 = '[object DataView]';

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = _toSource(_DataView),
        mapCtorString = _toSource(_Map),
        promiseCtorString = _toSource(_Promise),
        setCtorString = _toSource(_Set),
        weakMapCtorString = _toSource(_WeakMap);

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = _baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((_DataView && getTag(new _DataView(new ArrayBuffer(1))) != dataViewTag$1) ||
        (_Map && getTag(new _Map) != mapTag$2) ||
        (_Promise && getTag(_Promise.resolve()) != promiseTag) ||
        (_Set && getTag(new _Set) != setTag$2) ||
        (_WeakMap && getTag(new _WeakMap) != weakMapTag$1)) {
      getTag = function(value) {
        var result = _baseGetTag(value),
            Ctor = result == objectTag$1 ? value.constructor : undefined,
            ctorString = Ctor ? _toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag$1;
            case mapCtorString: return mapTag$2;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag$2;
            case weakMapCtorString: return weakMapTag$1;
          }
        }
        return result;
      };
    }

    var _getTag = getTag;

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    var isObjectLike_1 = isObjectLike;

    /** `Object#toString` result references. */
    var argsTag$1 = '[object Arguments]';

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike_1(value) && _baseGetTag(value) == argsTag$1;
    }

    var _baseIsArguments = baseIsArguments;

    /** Used for built-in method references. */
    var objectProto$4 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$4 = objectProto$4.hasOwnProperty;

    /** Built-in value references. */
    var propertyIsEnumerable = objectProto$4.propertyIsEnumerable;

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = _baseIsArguments(function() { return arguments; }()) ? _baseIsArguments : function(value) {
      return isObjectLike_1(value) && hasOwnProperty$4.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    var isArguments_1 = isArguments;

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray$1 = Array.isArray;

    var isArray_1 = isArray$1;

    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER$1 = 9007199254740991;

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
    }

    var isLength_1 = isLength;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength_1(value.length) && !isFunction_1(value);
    }

    var isArrayLike_1 = isArrayLike;

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    var stubFalse_1 = stubFalse;

    var isBuffer_1 = createCommonjsModule(function (module, exports) {
    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Built-in value references. */
    var Buffer = moduleExports ? _root.Buffer : undefined;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse_1;

    module.exports = isBuffer;
    });

    /** `Object#toString` result references. */
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        mapTag$1 = '[object Map]',
        numberTag$1 = '[object Number]',
        objectTag = '[object Object]',
        regexpTag$1 = '[object RegExp]',
        setTag$1 = '[object Set]',
        stringTag$1 = '[object String]',
        weakMapTag = '[object WeakMap]';

    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';

    /** Used to identify `toStringTag` values of typed arrays. */
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
    typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
    typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
    typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
    typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
    typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
    typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
    typedArrayTags[errorTag] = typedArrayTags[funcTag] =
    typedArrayTags[mapTag$1] = typedArrayTags[numberTag$1] =
    typedArrayTags[objectTag] = typedArrayTags[regexpTag$1] =
    typedArrayTags[setTag$1] = typedArrayTags[stringTag$1] =
    typedArrayTags[weakMapTag] = false;

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike_1(value) &&
        isLength_1(value.length) && !!typedArrayTags[_baseGetTag(value)];
    }

    var _baseIsTypedArray = baseIsTypedArray;

    /**
     * The base implementation of `_.unary` without support for storing metadata.
     *
     * @private
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     */
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }

    var _baseUnary = baseUnary;

    var _nodeUtil = createCommonjsModule(function (module, exports) {
    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Detect free variable `process` from Node.js. */
    var freeProcess = moduleExports && _freeGlobal.process;

    /** Used to access faster Node.js helpers. */
    var nodeUtil = (function() {
      try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.require && freeModule.require('util').types;

        if (types) {
          return types;
        }

        // Legacy `process.binding('util')` for Node.js < 10.
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }());

    module.exports = nodeUtil;
    });

    /* Node.js helper references. */
    var nodeIsTypedArray = _nodeUtil && _nodeUtil.isTypedArray;

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;

    var isTypedArray_1 = isTypedArray;

    /** `Object#toString` result references. */
    var mapTag = '[object Map]',
        setTag = '[object Set]';

    /** Used for built-in method references. */
    var objectProto$3 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$3 = objectProto$3.hasOwnProperty;

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike_1(value) &&
          (isArray_1(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer_1(value) || isTypedArray_1(value) || isArguments_1(value))) {
        return !value.length;
      }
      var tag = _getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (_isPrototype(value)) {
        return !_baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty$3.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    var isEmpty_1 = isEmpty;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    var isUndefined_1 = isUndefined;

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    var isNull_1 = isNull;

    /** `Object#toString` result references. */
    var stringTag = '[object String]';

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray_1(value) && isObjectLike_1(value) && _baseGetTag(value) == stringTag);
    }

    var isString_1 = isString;

    /** `Object#toString` result references. */
    var numberTag = '[object Number]';

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike_1(value) && _baseGetTag(value) == numberTag);
    }

    var isNumber_1 = isNumber;

    /** `Object#toString` result references. */
    var regexpTag = '[object RegExp]';

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike_1(value) && _baseGetTag(value) == regexpTag;
    }

    var _baseIsRegExp = baseIsRegExp;

    /* Node.js helper references. */
    var nodeIsRegExp = _nodeUtil && _nodeUtil.isRegExp;

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? _baseUnary(nodeIsRegExp) : _baseIsRegExp;

    var isRegExp_1 = isRegExp;

    /** `Object#toString` result references. */
    var symbolTag = '[object Symbol]';

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike_1(value) && _baseGetTag(value) == symbolTag);
    }

    var isSymbol_1 = isSymbol;

    /** Used to match property names within property paths. */
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/;

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray_1(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol_1(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    var _isKey = isKey;

    /* Built-in method references that are verified to be native. */
    var nativeCreate = _getNative(Object, 'create');

    var _nativeCreate = nativeCreate;

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
      this.size = 0;
    }

    var _hashClear = hashClear;

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    var _hashDelete = hashDelete;

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

    /** Used for built-in method references. */
    var objectProto$2 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$2 = objectProto$2.hasOwnProperty;

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (_nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED$1 ? undefined : result;
      }
      return hasOwnProperty$2.call(data, key) ? data[key] : undefined;
    }

    var _hashGet = hashGet;

    /** Used for built-in method references. */
    var objectProto$1 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$1 = objectProto$1.hasOwnProperty;

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return _nativeCreate ? (data[key] !== undefined) : hasOwnProperty$1.call(data, key);
    }

    var _hashHas = hashHas;

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED = '__lodash_hash_undefined__';

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (_nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    var _hashSet = hashSet;

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = _hashClear;
    Hash.prototype['delete'] = _hashDelete;
    Hash.prototype.get = _hashGet;
    Hash.prototype.has = _hashHas;
    Hash.prototype.set = _hashSet;

    var _Hash = Hash;

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    var _listCacheClear = listCacheClear;

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    var eq_1 = eq;

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq_1(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    var _assocIndexOf = assocIndexOf;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype;

    /** Built-in value references. */
    var splice = arrayProto.splice;

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = _assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    var _listCacheDelete = listCacheDelete;

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = _assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    var _listCacheGet = listCacheGet;

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return _assocIndexOf(this.__data__, key) > -1;
    }

    var _listCacheHas = listCacheHas;

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = _assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    var _listCacheSet = listCacheSet;

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = _listCacheClear;
    ListCache.prototype['delete'] = _listCacheDelete;
    ListCache.prototype.get = _listCacheGet;
    ListCache.prototype.has = _listCacheHas;
    ListCache.prototype.set = _listCacheSet;

    var _ListCache = ListCache;

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new _Hash,
        'map': new (_Map || _ListCache),
        'string': new _Hash
      };
    }

    var _mapCacheClear = mapCacheClear;

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    var _isKeyable = isKeyable;

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return _isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    var _getMapData = getMapData;

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = _getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    var _mapCacheDelete = mapCacheDelete;

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return _getMapData(this, key).get(key);
    }

    var _mapCacheGet = mapCacheGet;

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return _getMapData(this, key).has(key);
    }

    var _mapCacheHas = mapCacheHas;

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = _getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    var _mapCacheSet = mapCacheSet;

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = _mapCacheClear;
    MapCache.prototype['delete'] = _mapCacheDelete;
    MapCache.prototype.get = _mapCacheGet;
    MapCache.prototype.has = _mapCacheHas;
    MapCache.prototype.set = _mapCacheSet;

    var _MapCache = MapCache;

    /** Error message constants. */
    var FUNC_ERROR_TEXT = 'Expected a function';

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || _MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = _MapCache;

    var memoize_1 = memoize;

    /** Used as the maximum memoize cache size. */
    var MAX_MEMOIZE_SIZE = 500;

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize_1(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    var _memoizeCapped = memoizeCapped;

    /** Used to match property names within property paths. */
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

    /** Used to match backslashes in property paths. */
    var reEscapeChar = /\\(\\)?/g;

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = _memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    var _stringToPath = stringToPath;

    /**
     * A specialized version of `_.map` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function arrayMap(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }

    var _arrayMap = arrayMap;

    /** Used as references for various `Number` constants. */
    var INFINITY$1 = 1 / 0;

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = _Symbol ? _Symbol.prototype : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray_1(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return _arrayMap(value, baseToString) + '';
      }
      if (isSymbol_1(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
    }

    var _baseToString = baseToString;

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : _baseToString(value);
    }

    var toString_1 = toString;

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray_1(value)) {
        return value;
      }
      return _isKey(value, object) ? [value] : _stringToPath(toString_1(value));
    }

    var _castPath = castPath;

    /** Used as references for various `Number` constants. */
    var INFINITY = 1 / 0;

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol_1(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    var _toKey = toKey;

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = _castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[_toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    var _baseGet = baseGet;

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : _baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    var get_1 = get;

    var defineProperty = (function() {
      try {
        var func = _getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    var _defineProperty = defineProperty;

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && _defineProperty) {
        _defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    var _baseAssignValue = baseAssignValue;

    /** Used for built-in method references. */
    var objectProto = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq_1(objValue, value)) ||
          (value === undefined && !(key in object))) {
        _baseAssignValue(object, key, value);
      }
    }

    var _assignValue = assignValue;

    /** Used as references for various `Number` constants. */
    var MAX_SAFE_INTEGER = 9007199254740991;

    /** Used to detect unsigned integer values. */
    var reIsUint = /^(?:0|[1-9]\d*)$/;

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    var _isIndex = isIndex;

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject_1(object)) {
        return object;
      }
      path = _castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = _toKey(path[index]),
            newValue = value;

        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          return object;
        }

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject_1(objValue)
              ? objValue
              : (_isIndex(path[index + 1]) ? [] : {});
          }
        }
        _assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    var _baseSet = baseSet;

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : _baseSet(object, path, value);
    }

    var set_1 = set;

    const isPromise = (obj) => !!obj &&
        (typeof obj === 'object' || typeof obj === 'function') &&
        typeof obj.then === 'function';
    var _ = {
        isEmpty: isEmpty_1,
        isNull: isNull_1,
        isUndefined: isUndefined_1,
        isFunction: isFunction_1,
        isObject: isObject_1,
        isString: isString_1,
        isNumber: isNumber_1,
        isArray: isArray_1,
        isRegExp: isRegExp_1,
        get: get_1,
        set: set_1,
        isPromise,
    };

    function Debug(name) {
        if (typeof window.Debug === 'function') {
            return window.Debug(name);
        }
        return function (...args) {
            if (process.env.NODE_ENV === 'development') ;
        };
    }

    /**
     * @typedef {"none" | "wifi" | "cellular" | "unknown"} NetworkType
     */
    var NetworkType;
    (function (NetworkType) {
        /** No Network */
        NetworkType["none"] = "none";
        /** Wi-Fi Network */
        NetworkType["wifi"] = "wifi";
        /** Cellular Network (2g/3g/4g) */
        NetworkType["cellular"] = "cellular";
        /** Uncommon network types for Android */
        NetworkType["unknown"] = "unknown";
    })(NetworkType || (NetworkType = {}));
    var PlatformType;
    (function (PlatformType) {
        /** Windows phone */
        PlatformType["wp"] = "wp";
        /** Android */
        PlatformType["android"] = "android";
        /** iOS */
        PlatformType["iOS"] = "iOS";
        PlatformType["unknown"] = "unknown";
    })(PlatformType || (PlatformType = {}));
    var ProfileType;
    (function (ProfileType) {
        ProfileType[ProfileType["user"] = 1] = "user";
        ProfileType[ProfileType["oa"] = 0] = "oa";
        ProfileType[ProfileType["aliasOA"] = 2] = "aliasOA";
    })(ProfileType || (ProfileType = {}));
    var ChatType;
    (function (ChatType) {
        ChatType[ChatType["user"] = 1] = "user";
        ChatType[ChatType["oa"] = 0] = "oa";
    })(ChatType || (ChatType = {}));
    var PostFeedType;
    (function (PostFeedType) {
        PostFeedType[PostFeedType["image"] = 1] = "image";
        PostFeedType[PostFeedType["link"] = 4] = "link";
        PostFeedType[PostFeedType["profile"] = 5] = "profile";
    })(PostFeedType || (PostFeedType = {}));
    var ShareSheetType;
    (function (ShareSheetType) {
        ShareSheetType[ShareSheetType["image"] = 1] = "image";
        ShareSheetType[ShareSheetType["gif"] = 11] = "gif";
        ShareSheetType[ShareSheetType["video"] = 12] = "video";
        ShareSheetType[ShareSheetType["link"] = 4] = "link";
        ShareSheetType[ShareSheetType["oa"] = 5] = "oa";
        ShareSheetType[ShareSheetType["zmp"] = 20] = "zmp";
        ShareSheetType[ShareSheetType["multi_image"] = 21] = "multi_image";
    })(ShareSheetType || (ShareSheetType = {}));
    var OrientationType;
    (function (OrientationType) {
        OrientationType[OrientationType["auto"] = 1] = "auto";
        OrientationType[OrientationType["portrait"] = 2] = "portrait";
        OrientationType[OrientationType["landscape"] = 3] = "landscape";
    })(OrientationType || (OrientationType = {}));
    var VibrateType;
    (function (VibrateType) {
        VibrateType[VibrateType["oneShot"] = 0] = "oneShot";
    })(VibrateType || (VibrateType = {}));
    var Events;
    (function (Events) {
        Events["AppPaused"] = "h5.event.paused";
        Events["AppResumed"] = "h5.event.resumed";
        Events["NetworkChanged"] = "h5.event.connection.changed";
        Events["OnDataCallback"] = "h5.event.webview.result";
        Events["OpenApp"] = "h5.event.open.mp";
        Events["AppClose"] = "h5.event.action.close";
    })(Events || (Events = {}));
    var MediaPickerType;
    (function (MediaPickerType) {
        MediaPickerType[MediaPickerType["zcamera"] = 3] = "zcamera";
        MediaPickerType[MediaPickerType["zcamera_photo"] = 1] = "zcamera_photo";
        MediaPickerType[MediaPickerType["zcamera_video"] = 2] = "zcamera_video";
        MediaPickerType[MediaPickerType["zcamera_scan"] = 7] = "zcamera_scan";
        MediaPickerType[MediaPickerType["photo"] = 4] = "photo";
        MediaPickerType[MediaPickerType["video"] = 5] = "video";
        MediaPickerType[MediaPickerType["file"] = 6] = "file";
    })(MediaPickerType || (MediaPickerType = {}));

    const readCookie = (name) => {
        const ckString = document.cookie;
        if (ckString) {
            const listCookie = ckString.split('; ');
            if (listCookie && listCookie.length > 0) {
                var nameLen = name.length + 1;
                for (var i = listCookie.length - 1; i >= 0; i--) {
                    let item = listCookie[i];
                    if (item && item.indexOf(name) === 0) {
                        item = item.substring(nameLen, item.length);
                        if (item) {
                            item = item.replace(/["']/g, '');
                            return item;
                        }
                    }
                }
            }
        }
        return null;
    };
    const getCurrHost = () => {
        const curr = window.location.host;
        return `${curr}_`;
    };
    const getCurrHostRootZaloMe = () => {
        const curr = window.location.host;
        if (curr) {
            if (curr.indexOf('zalo.me') >= 0) {
                return 'zalo.me_';
            }
            else if (curr.indexOf('baomoi.com') >= 0) {
                return 'baomoi.com_';
            }
            else if (curr.indexOf('mp3.zing.vn') >= 0) {
                return 'mp3.zing.vn_';
            }
            else if (curr.indexOf('zaloapp.com') >= 0) {
                return 'zaloapp.com_';
            }
        }
        return '';
    };
    const readCookieByDomain = (name) => {
        return readCookie(getCurrHost() + name);
    };
    const readCookieByRootDomain = (name) => {
        return readCookie(getCurrHostRootZaloMe() + name);
    };
    const readCookieFallback = (name) => {
        let ck = readCookieByDomain(name);
        if (!ck) {
            ck = readCookieByRootDomain(name);
            if (!ck) {
                return readCookie(name);
            }
        }
        return ck;
    };

    const Byte = 1;
    const KB = 1024 * Byte;
    const MB = 1024 * KB;
    const ZAPP_ID = window.zAppID;
    const APP_ID = window.APP_ID;
    const APP_CONFIG = window.APP_CONFIG || {};
    const MINI_APP_LINK = 'https://zalo.me/app/link/zapps';
    const MINI_APP_INTERNAL_LINK = 'https://h5.zdn.vn/zapps';
    const COOKIE_NAME = {
        ZOAUTH: `h5.zdn.vn_zoauth`,
        ZACC_SESSiON: `h5.zdn.vn_zacc_session`,
        JS_TOKEN: `h5.zdn.vn_zlink3rd`,
        ZOAUTH_VRF: `h5.zdn.vn_zoauth_vrf`,
        DEVICE_ID: `h5.zdn.vn_deviceID`,
        CONTEXT_ID: `h5.zdn.vn_contextID`,
        CONTEXT_TYPE: `h5.zdn.vn_contextType`,
    };
    const APIS = {
        GET_USER_INFO: 'https://graph.zalo.me/v2.0/me',
        GET_ACCESS_TOKEN: 'https://h5.zalo.me/openapi/access_token',
        GET_ACCESS_TOKEN_V3: 'https://oauth.zaloapp.com/v3/access_token',
        GET_LIST_USER_INFO: 'https://graph.zalo.me/v2.0/me/friends/list',
        CREATE_ORDER: 'https://payment-mini.zalo.me/api/order/create',
        GET_APP_INFO: 'https://h5.zalo.me/apps/get-info',
        SEND_ACTION_LOG: 'https://h5.zalo.me/log/async'
    };
    const STORAGE_LIMIT = 5 * MB;
    const NETWORK_TYPE = (isAndroid) => ({
        NONE: isAndroid ? -2 : 0,
        WIFI: isAndroid ? 0 : 1,
        '2G': isAndroid ? 2 : 2,
        '3G': isAndroid ? 15 : 2,
        '4G': isAndroid ? 13 : 2
    });
    const MEDIA_PICKER_LIMIT = 1 * MB;
    const RESPONSE_CODE = {
        SUCCESS: 0,
        UNKNOWN_ERROR: -2000,
        BAD_REQUEST: -1400,
        INTERNAL_SERVER_ERROR: -1500,
        UNAUTHORIZED: -1401,
        FORBIDDEN: -1403,
        CLIENT_NOT_SUPPORT: -1404,
        TIME_OUT: -1408,
        DECODE_FAILED: -2001,
        USER_DENIED: -2002,
        USER_CANCEL: -2003,
        // Media picker
        MEDIA_PICKER_FAIL: -2004,
        // Save image to gallery
        SAVE_IMAGE_FAIL: -2005
    };
    const MESSAGES = {
        SUCCESS: 'Success',
        UNKNOWN_ERROR: 'Unknown error. Please try again later.',
        TIME_OUT: 'Request timeout. Please try again later.',
        LOGIN_REQUIRED: 'Please login (https://miniapp.zalo.me/docs/api/login) before to call this api',
        LOGIN_FAILED: 'Login failed',
        NOT_PERMISSION: `You don't have permission to call this api`,
        CLIENT_NOT_SUPPORT: `This API is not supported in this Zalo version`,
        DECODE_FAILED: 'Can not decode id. Please check your params again.',
        INVALID_PARAM: 'Invalid parameter',
        USER_DENIED: 'User denied',
        USER_CANCEL: 'User cancel',
        // Media picker
        MEDIA_PICKER_FAIL: 'Unable to pick media',
        // Save image to gallery
        SAVE_IMAGE_FAIL: 'Unable to save image'
    };
    const RESPONSE = {
        SUCCESS: {
            code: RESPONSE_CODE.SUCCESS,
            message: MESSAGES.SUCCESS
        },
        UNKNOWN_ERROR: {
            code: RESPONSE_CODE.UNKNOWN_ERROR,
            message: MESSAGES.UNKNOWN_ERROR
        },
        UNAUTHORIZED: {
            code: RESPONSE_CODE.UNAUTHORIZED,
            message: MESSAGES.LOGIN_REQUIRED
        },
        FORBIDDEN: {
            code: RESPONSE_CODE.FORBIDDEN,
            message: MESSAGES.NOT_PERMISSION
        },
        CLIENT_NOT_SUPPORT: {
            code: RESPONSE_CODE.CLIENT_NOT_SUPPORT,
            message: MESSAGES.CLIENT_NOT_SUPPORT
        },
        DECODE_FAILED: {
            code: RESPONSE_CODE.DECODE_FAILED,
            message: MESSAGES.DECODE_FAILED
        },
        TIME_OUT: {
            code: RESPONSE_CODE.TIME_OUT,
            message: MESSAGES.TIME_OUT
        },
        USER_DENIED: {
            code: RESPONSE_CODE.USER_DENIED,
            message: MESSAGES.USER_DENIED
        },
        USER_CANCEL: {
            code: RESPONSE_CODE.USER_CANCEL,
            message: MESSAGES.USER_CANCEL
        }
    };
    const ACTION = {
        GET_DOWNLOADED_STICKER: {
            name: 'action.get.downloaded.sticker',
            have_callback: true
        },
        OPEN_SHARE_STICKER: {
            name: 'action.open.share.sticker'
        },
        OPEN_PROFILE: {
            name: 'action.open.profile'
        },
        OPEN_FEED_DETAIL: {
            name: 'action.open.feeddetail'
        },
        OPEN_FRIEND_RADA: {
            name: 'action.open.friendrada'
        },
        OPEN_INAPP: {
            name: 'action.open.inapp'
        },
        OPEN_OUTAPP: {
            name: 'action.open.outapp'
        },
        OPEN_PAGE: {
            name: 'action.open.page'
        },
        OPEN_PHOTODETAIL: {
            name: 'action.open.photodetail'
        },
        OPEN_GALARY: {
            name: 'action.open.galary'
        },
        OPEN_GAMECENTER: {
            name: 'action.open.gamecenter'
        },
        OPEN_GAMENEWS: {
            name: 'action.open.gamenews'
        },
        OPEN_TAB_CONTACT: {
            name: 'action.open.tab.contact'
        },
        OPEN_TAB_SOCIAL: {
            name: 'action.open.tab.social'
        },
        OPEN_FRIENDSUGGEST: {
            name: 'action.open.friendsuggest'
        },
        OPEN_GROUPLIST: {
            name: 'action.open.grouplist'
        },
        OPEN_NEARBY: {
            name: 'action.open.nearby'
        },
        OPEN_ROOM: {
            name: 'action.open.room'
        },
        OPEN_STICKERSTORE: {
            name: 'action.open.stickerstore'
        },
        OPEN_CREATECHAT: {
            name: 'action.open.createchat'
        },
        COPY_LINK_CATESTICKER: {
            name: 'action.copy.link.catesticker'
        },
        REQUEST_BUY_STICKER: {
            name: 'action.request.buy.sticker'
        },
        OPEN_CHAT: {
            name: 'action.open.chat'
        },
        OPEN_TAB_CHAT: {
            name: 'action.open.tab.chat'
        },
        OPEN_CHATGROUP: {
            name: 'action.open.chatgroup'
        },
        OPEN_ADDFRIEND: {
            name: 'action.open.addfriend'
        },
        OPEN_TAB_MORE: {
            name: 'action.open.tab.more'
        },
        OPEN_POSTFEED: {
            name: 'action.open.postfeed'
        },
        OPEN_LOGINDEVICES: {
            name: 'action.open.logindevices'
        },
        OPEN_SENDSTICKER: {
            name: 'action.open.sendsticker'
        },
        REPORT_ABUSE: {
            name: 'action.report.abuse',
            have_callback: true
        },
        FOLLOW_OA: {
            name: 'action.follow.oa',
            have_callback: true
        },
        UNFOLLOW_OA: {
            name: 'action.unfollow.oa',
            have_callback: true
        },
        OPEN_GAMEDETAIL: {
            name: 'action.open.gamedetail'
        },
        OPEN_SHARESHEET: {
            name: 'action.open.sharesheet',
            have_callback: true
        },
        REQUEST_PERMISSION_CAMERA: {
            name: 'action.request.permission.camera',
            error_list: {
                android: {
                    '-2': {
                        map_to: RESPONSE.USER_DENIED
                    }
                },
                iOS: {
                    '-2': {
                        map_to: RESPONSE.USER_DENIED
                    }
                }
            }
        },
        CHANGE_TITLE_HEADER: {
            name: 'action.change.title.header',
            skip_jump: true
        },
        WEBVIEW_CLEARCACHE: {
            name: 'action.webview.clearcache'
        },
        WEBVIEW_CONFIRMCACHE: {
            name: 'action.webview.confirmcache'
        },
        WEBVIEW_ISVISIBLE: {
            name: 'action.webview.isvisible'
        },
        WEBVIEW_NETWORKTYPE: {
            name: 'action.webview.networktype',
            skip_jump: true
        },
        CHANGE_BUTTON_HEADER: {
            name: 'action.change.button.header'
        },
        CREATE_OPTIONS_MENU: {
            name: 'action.create.options.menu',
            skip_jump: true,
            have_callback: true
        },
        CREATE_SHORTCUT: {
            name: 'action.create.shortcut'
        },
        CHANGE_ACTIONBAR_LEFTBUTTON_TYPE: {
            name: 'action.change.actionbar.leftbutton.type',
            skip_jump: true,
            have_callback: true
        },
        WINDOW_CLOSE: {
            name: 'action.window.close',
            skip_jump: true,
            have_callback: true
        },
        WEBVIEW_CHECKRESERROR: {
            name: 'action.webview.checkResError'
        },
        IAP_REQUESTPAYMENT: {
            name: 'action.iap.requestpayment'
        },
        ZBROWSER_GETSTATS: {
            name: 'action.zbrowser.getstats'
        },
        ZBROWSER_JSBRIDGE: {
            name: 'action.zbrowser.jsbridge',
            skip_jump: true,
            have_callback: true
        },
        PROMPT_AUTHENTICATION: {
            name: 'action.prompt.authentication'
        },
        CHANGE_ACTIONBAR_COLOR: {
            name: 'action.change.actionbar.color',
            skip_jump: true
        },
        PROMPT_AUTHENTICATION_CHECK_STATE: {
            name: 'action.prompt.authentication.check_state'
        },
        OPEN_APPSTORE: {
            name: 'action.open.appstore'
        },
        GET_LOCATION: {
            name: 'action.get.location',
            have_callback: true,
            error_list: {
                android: {
                    '-1': {
                        map_to: RESPONSE.USER_DENIED
                    }
                },
                iOS: {
                    '-1': {
                        map_to: RESPONSE.USER_DENIED
                    }
                }
            }
        },
        QUERY_LOCATION_HIDE: {
            name: 'action.query.location.hide',
            have_callback: true
        },
        SHOW_TOAST: {
            name: 'action.show.toast',
            have_callback: true
        },
        OPEN_APP: {
            name: 'action.open.app'
        },
        HIDE_KEYBOARD: {
            name: 'action.hide.keyboard'
        },
        OPEN_PHONE: {
            name: 'action.open.phone'
        },
        OPEN_QR: {
            name: 'action.open.qr'
        },
        OPEN_SMS: {
            name: 'action.open.sms'
        },
        VIEW_MYQR: {
            name: 'action.view.myqr',
            have_callback: true
        },
        KEEP_SCREEN: {
            name: 'action.keep.screen',
            have_callback: true
        },
        CHANGE_AUTOROTATE: {
            name: 'action.change.autorotate',
            skip_jump: true
        },
        CHECK_APP_INSTALLED: {
            name: 'action.check.app.installed'
        },
        QUERY_SHOW: {
            name: 'action.query.show'
        },
        QUERY_HIDE: {
            name: 'action.query.hide'
        },
        OPEN_INAPPRW: {
            name: 'action.open.inapprw'
        },
        ZALORUN_GETTRACKINGSTATUS: {
            name: 'action.zalorun.getTrackingStatus',
            have_callback: true
        },
        ZALORUN_SETTRACKINGSTATUS: {
            name: 'action.zalorun.setTrackingStatus',
            have_callback: true
        },
        ZALORUN_GETDAYSTEP: {
            name: 'action.zalorun.getDayStep',
            have_callback: true
        },
        ZALORUN_FORCESUBMITDATA: {
            name: 'action.zalorun.forceSubmitData',
            have_callback: true
        },
        ZALORUN_SETWEIGHT: {
            name: 'action.zalorun.setWeight',
            have_callback: true
        },
        OPEN_PROFILE_EXT: {
            name: 'action.open.profile.ext'
        },
        DOWNLOAD_CATE: {
            name: 'action.download.cate',
            have_callback: true
        },
        JUMP_LOGIN: {
            name: 'action.jump.login',
            skip_jump: true,
            white_list: true
        },
        OPEN_ADTIMA_ADS_INTERSTITIAL: {
            name: 'action.open.adtima.ads.interstitial'
        },
        OPEN_ADTIMA_ADS: {
            name: 'action.open.adtima.ads'
        },
        GET_ADIDCLIENT: {
            name: 'action.get.adidclient'
        },
        SCAN_IBEACON: {
            name: 'action.scan.ibeacon'
        },
        INTERACTIVE_VIBRATION: {
            name: 'action.interactive.vibration'
        },
        SAVE_IMAGE_GALLERY: {
            name: 'action.save.image.gallery',
            version_live: { iOS: 408 },
            error_list: {
                android: {
                    '-101': {
                        map_to: {
                            code: RESPONSE_CODE.SAVE_IMAGE_FAIL,
                            message: MESSAGES.SAVE_IMAGE_FAIL
                        },
                        need_more_detail: true
                    },
                    '-102': {
                        map_to: {
                            code: RESPONSE_CODE.SAVE_IMAGE_FAIL,
                            message: MESSAGES.SAVE_IMAGE_FAIL
                        },
                        need_more_detail: true
                    }
                },
                iOS: {
                    '-10': {
                        map_to: {
                            code: RESPONSE_CODE.SAVE_IMAGE_FAIL,
                            message: MESSAGES.SAVE_IMAGE_FAIL
                        },
                        need_more_detail: true
                    }
                }
            }
        },
        OPEN_MP: {
            name: 'action.open.mp',
            version_live: { iOS: 402 }
        },
        CHANGE_ACTIONBAR: {
            name: 'action.change.actionbar',
            version_live: { iOS: 402 },
            skip_jump: true
        },
        ZBROWSER_MPDS: {
            name: 'action.zbrowser.mpds',
            version_live: { iOS: 402 }
        },
        WEBVIEW_SET_RESULT: {
            name: 'action.webview.set.result',
            version_live: { iOS: 416 }
        },
        MP_GET_NUMBER: {
            name: 'action.mp.get.number',
            version_live: { iOS: 416 },
            error_list: {
                android: {
                    '-1': {
                        map_to: RESPONSE.USER_DENIED
                    },
                    '-101': {
                        map_to: RESPONSE.USER_DENIED
                    }
                },
                iOS: {
                    '-1': {
                        map_to: RESPONSE.USER_DENIED
                    },
                    '-10': {
                        map_to: RESPONSE.USER_DENIED
                    }
                }
            }
        },
        MP_OPEN_PROFILE_PICKER: {
            name: 'action.mp.open.profile.picker',
            version_live: { iOS: 432 },
            error_list: {
                android: {
                    '-101': {
                        map_to: RESPONSE.USER_CANCEL
                    }
                },
                iOS: {
                    '-101': {
                        map_to: RESPONSE.USER_CANCEL
                    }
                }
            }
        },
        GET_SUPPORTED_ACTIONS: {
            name: 'action.get.supported.actions',
            white_list: true
        },
        MP_JOIN_WIFI: {
            name: 'action.mp.join.wifi',
            version_live: { android: 0, iOS: 999 },
            have_permission: false,
            white_list: false
        },
        PICK_MEDIA: {
            name: 'action.pick.media',
            version_live: { iOS: 440 },
            error_list: {
                android: {
                    '-101': {
                        map_to: RESPONSE.USER_CANCEL
                    },
                    '999': {
                        map_to: {
                            code: RESPONSE_CODE.MEDIA_PICKER_FAIL,
                            message: MESSAGES.MEDIA_PICKER_FAIL
                        },
                        need_more_detail: true
                    }
                },
                iOS: {
                    '-10': {
                        map_to: {
                            code: RESPONSE_CODE.MEDIA_PICKER_FAIL,
                            message: MESSAGES.MEDIA_PICKER_FAIL
                        }
                    }
                }
            }
        },
        MP_CLOSE_LOADINGVIEW: {
            name: 'action.mp.close.loadingview'
        }
    };
    const COMMON_NATIVE_ERROR_CODE = {
        android: {
            '-4': RESPONSE.DECODE_FAILED,
            '-5': RESPONSE.CLIENT_NOT_SUPPORT,
            '-14': RESPONSE.TIME_OUT
        },
        iOS: {
            '-9': RESPONSE.DECODE_FAILED,
            '-5': RESPONSE.CLIENT_NOT_SUPPORT,
            '-14': RESPONSE.TIME_OUT
        }
    };
    const ZALO_SUPPORT_STORAGE_VERSION = {
        android: 12100571,
        iOS: 400,
        wp: 0,
        unknown: 0
    };
    const ZALO_SUPPORT_SHARE_MULTI_IMAGE_VERSION = {
        android: 12100615,
        iOS: 460,
        wp: 0,
        unknown: 0
    };
    // List actions supported before support action action.get.supported.actions
    const ZALO_IOS_ACTIONS_SUPPORTED_BEFORE_VER_402 = [
        ACTION.GET_DOWNLOADED_STICKER.name,
        ACTION.OPEN_SHARE_STICKER.name,
        ACTION.OPEN_PROFILE.name,
        ACTION.OPEN_FEED_DETAIL.name,
        ACTION.OPEN_FRIEND_RADA.name,
        ACTION.OPEN_INAPP.name,
        ACTION.OPEN_OUTAPP.name,
        ACTION.OPEN_PAGE.name,
        ACTION.OPEN_PHOTODETAIL.name,
        ACTION.OPEN_GALARY.name,
        ACTION.OPEN_GAMECENTER.name,
        ACTION.OPEN_GAMENEWS.name,
        ACTION.OPEN_TAB_CONTACT.name,
        ACTION.OPEN_TAB_SOCIAL.name,
        ACTION.OPEN_FRIENDSUGGEST.name,
        ACTION.OPEN_GROUPLIST.name,
        ACTION.OPEN_NEARBY.name,
        ACTION.OPEN_ROOM.name,
        ACTION.OPEN_STICKERSTORE.name,
        ACTION.OPEN_CREATECHAT.name,
        ACTION.COPY_LINK_CATESTICKER.name,
        ACTION.REQUEST_BUY_STICKER.name,
        ACTION.OPEN_CHAT.name,
        ACTION.OPEN_TAB_CHAT.name,
        ACTION.OPEN_CHATGROUP.name,
        ACTION.OPEN_ADDFRIEND.name,
        ACTION.OPEN_TAB_MORE.name,
        ACTION.OPEN_POSTFEED.name,
        ACTION.OPEN_LOGINDEVICES.name,
        ACTION.OPEN_SENDSTICKER.name,
        ACTION.REPORT_ABUSE.name,
        ACTION.FOLLOW_OA.name,
        ACTION.UNFOLLOW_OA.name,
        ACTION.OPEN_GAMEDETAIL.name,
        ACTION.OPEN_SHARESHEET.name,
        ACTION.REQUEST_PERMISSION_CAMERA.name,
        ACTION.CHANGE_TITLE_HEADER.name,
        ACTION.WEBVIEW_CLEARCACHE.name,
        ACTION.WEBVIEW_CONFIRMCACHE.name,
        ACTION.WEBVIEW_ISVISIBLE.name,
        ACTION.WEBVIEW_NETWORKTYPE.name,
        ACTION.CHANGE_BUTTON_HEADER.name,
        ACTION.CREATE_OPTIONS_MENU.name,
        ACTION.CREATE_SHORTCUT.name,
        ACTION.CHANGE_ACTIONBAR_LEFTBUTTON_TYPE.name,
        ACTION.WINDOW_CLOSE.name,
        ACTION.WEBVIEW_CHECKRESERROR.name,
        ACTION.IAP_REQUESTPAYMENT.name,
        ACTION.ZBROWSER_GETSTATS.name,
        ACTION.ZBROWSER_JSBRIDGE.name,
        ACTION.PROMPT_AUTHENTICATION.name,
        ACTION.CHANGE_ACTIONBAR_COLOR.name,
        ACTION.PROMPT_AUTHENTICATION_CHECK_STATE.name,
        ACTION.OPEN_APPSTORE.name,
        ACTION.GET_LOCATION.name,
        ACTION.QUERY_LOCATION_HIDE.name,
        ACTION.SHOW_TOAST.name,
        ACTION.OPEN_APP.name,
        ACTION.HIDE_KEYBOARD.name,
        ACTION.OPEN_PHONE.name,
        ACTION.OPEN_QR.name,
        ACTION.OPEN_SMS.name,
        ACTION.VIEW_MYQR.name,
        ACTION.KEEP_SCREEN.name,
        ACTION.CHANGE_AUTOROTATE.name,
        ACTION.CHECK_APP_INSTALLED.name,
        ACTION.QUERY_SHOW.name,
        ACTION.QUERY_HIDE.name,
        ACTION.OPEN_INAPPRW.name,
        ACTION.ZALORUN_GETTRACKINGSTATUS.name,
        ACTION.ZALORUN_SETTRACKINGSTATUS.name,
        ACTION.ZALORUN_GETDAYSTEP.name,
        ACTION.ZALORUN_FORCESUBMITDATA.name,
        ACTION.ZALORUN_SETWEIGHT.name,
        ACTION.OPEN_PROFILE_EXT.name,
        ACTION.DOWNLOAD_CATE.name,
        ACTION.JUMP_LOGIN.name,
        ACTION.OPEN_ADTIMA_ADS_INTERSTITIAL.name,
        ACTION.OPEN_ADTIMA_ADS.name,
        ACTION.GET_ADIDCLIENT.name,
        ACTION.SCAN_IBEACON.name,
        ACTION.SAVE_IMAGE_GALLERY.name,
        ACTION.OPEN_MP.name,
        ACTION.CHANGE_ACTIONBAR.name,
        ACTION.INTERACTIVE_VIBRATION.name,
        ACTION.ZBROWSER_MPDS.name
    ];
    const ACTION_LEFT_BUTTON_TYPE = {
        SHOW_BACK: 0,
        HIDE_BACK: 3,
        SHOW_HOME: 1,
        HIDE_HOME: 0
    };
    const SHOW_ACTION_BAR = 5;
    const HIDE_ACTION_BAR = 6;
    const PAYMENT_APIS = {
        CREATE_ORDER: 'https://payment-mini.zalo.me/api/order/create',
        GET_TRANSACTION: 'https://payment-mini.zalo.me/api/transaction',
        GET_ORDER_STATUS: 'https://payment-mini.zalo.me/api/transaction/get-status'
    };
    const PAYMENT_H5_URL = 'https://payment-mini.zalo.me';

    class AppError {
        constructor(code, msg, api) {
            this.code = code;
            this.message = msg;
            this.api = api;
        }
        toString() {
            return `api: ${String(this.api)}; code: ${this.code}; message: ${this.message}`;
        }
        toJSON() {
            return {
                code: this.code,
                message: this.message,
                api: this.api
            };
        }
    }
    const handleKnownExceptions = (error, api) => {
        error.api = api;
        return error.toJSON();
    };
    const handleUnknownExceptions = (error, api) => {
        if (error instanceof Error) {
            return new AppError(RESPONSE_CODE.UNKNOWN_ERROR, error.message, api).toJSON();
        }
        return new AppError(RESPONSE_CODE.UNKNOWN_ERROR, MESSAGES.UNKNOWN_ERROR, api).toJSON();
    };
    const errorHandler = (error, api) => error instanceof AppError
        ? handleKnownExceptions(error, api)
        : handleUnknownExceptions(error, api);

    const apiResponse = {
        success: (data, message) => ({
            code: RESPONSE_CODE.SUCCESS,
            message: message || MESSAGES.SUCCESS,
            data: data || {}
        }),
        error: {
            badRequest: (message) => new AppError(RESPONSE_CODE.BAD_REQUEST, message),
            loginFailed: (message) => new AppError(RESPONSE_CODE.UNAUTHORIZED, `${MESSAGES.LOGIN_FAILED}: ${message}`),
            loginRequired: () => new AppError(RESPONSE_CODE.UNAUTHORIZED, MESSAGES.LOGIN_REQUIRED),
            missingParam: (params) => new AppError(RESPONSE_CODE.BAD_REQUEST, `Missing required argument: ${params}`),
            wrongTypeParam: (arg, expected, got) => new AppError(RESPONSE_CODE.BAD_REQUEST, `Wrong type of parameter '${arg}'. Expected ${expected}, but got ${got}`),
            cannotGetShareInfo: () => new AppError(RESPONSE_CODE.INTERNAL_SERVER_ERROR, `Can not get app info to share`),
            lengthInvalid: (arg) => new AppError(RESPONSE_CODE.BAD_REQUEST, `${arg} length is invalid.`)
        }
    };

    function encode(bag) {
        var pairs = [];
        for (var key in bag) {
            if (bag.hasOwnProperty(key)) {
                var value = bag[key];
                if (typeof value === "undefined") {
                    return;
                }
                if (value === null) {
                    pairs.push(key);
                    return;
                }
                pairs.push(encodeURIComponent(key) + "=" + encodeURIComponent(value));
            }
        }
        return pairs.join("&");
    }
    function decode(str, strict) {
        var data = {};
        if (str === "") {
            return data;
        }
        var pairs = str.split("&");
        for (var i = 0; i < pairs.length; i++) {
            var pair = pairs[i].split("=", 2);
            var key = decodeURIComponent(pair[0]);
            if (strict && Object.prototype.hasOwnProperty.call(data, key)) {
                throw new URIError("Duplicate key: " + key);
            }
            data[key] = pair.length === 2 ? decodeURIComponent(pair[1]) : null;
        }
        return data;
    }
    function appendToUrl(url, params) {
        return (url +
            (url.indexOf("?") !== -1 ? "&" : "?") +
            (typeof params === "string" ? params : QueryString.encode(params)));
    }
    function getParameterByName(name, url) {
        if (!url) {
            url = window.location.href;
        }
        name = name.replace(/[\[\]]/g, "\\$&");
        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"), results = regex.exec(url);
        if (!results)
            return null;
        if (!results[2])
            return "";
        return decodeURIComponent(results[2].replace(/\+/g, " "));
    }
    function getParamsAsObject(query) {
        var params = {};
        if (!query)
            return params;
        var values = query.split("&");
        values.map(function (item) {
            var data = item.split("=");
            if (!data || data.length != 2)
                return;
            params[data[0]] = decodeURIComponent(data[1].replace(/\+/g, " "));
        });
        return params;
    }
    function toQueryString(data) {
        if (!data)
            return "";
        if ((typeof data === "undefined" ? "undefined" : typeof (data)) != "object")
            return data;
        var key = Object.keys(data);
        var params = [];
        key.map(function (k) {
            var v = data[k];
            if ((typeof v === "undefined" ? "undefined" : typeof (v)) == "object")
                v = JSON.stringify(v);
            else
                v = encodeURIComponent(v);
            var item = [k, v].join("=");
            params.push(item);
        });
        return params.join("&");
    }
    const QueryString = {
        encode: encode,
        decode: decode,
        appendToUrl: appendToUrl,
        getParameterByName: getParameterByName,
        getParamsAsObject: getParamsAsObject,
        toQueryString: toQueryString,
    };

    const REGEXP_SPECIAL_UNICODE = new RegExp('[\\u0300-\\u036f]', 'g');
    const REGEXP_ACCENT_D = new RegExp('[đ|Đ]', 'g');
    const REGEXP_SPACES = new RegExp('\\s', 'g');
    const debug = Debug('zmp:utils:common');
    /**
     * Checks if a url is valid
     * @param {string} string URL
     * @returns {boolean} Result of checking
     *
     */
    const isValidUrl = (string) => {
        try {
            new URL(string);
        }
        catch (_error) {
            return false;
        }
        return true;
    };
    /**
     * Return size of storage by prefix in KB
     * @param storage localStorage
     * @param prefix key format: prefix_<key>
     */
    const calcLocalStorageSize = (storage, prefix) => {
        let _lsTotal = 0, _xLen, _x;
        for (_x in storage) {
            const _prefix = _x.split('_')[0];
            if (!storage.hasOwnProperty(_x)) {
                continue;
            }
            if (prefix && _prefix !== prefix) {
                continue;
            }
            _xLen = (storage[_x].length + _x.length) * 2;
            _lsTotal += _xLen;
        }
        return _lsTotal;
    };
    const getUserAgent = () => navigator.userAgent || navigator.vendor || window.opera;
    const checkPlatform = () => {
        const _agent = getUserAgent().toLowerCase();
        return {
            isWP: /iemobile/.test(_agent),
            isAndroid: /android/i.test(_agent) && !/iemobile/.test(_agent),
            isIOS: /iphone|ios|ipad|ipod/.test(_agent) && !/iemobile/.test(_agent),
            isMobile: /android|iphone|ios|ipad|ipod|iemobile/.test(_agent),
            isZalo: /zalo/.test(_agent)
        };
    };
    /**
     * get content from meta
     * @param {string} string meta name
     * @returns {string} content of meta name
     *
     */
    const getMetaValue = (key) => {
        const metas = document.getElementsByTagName('meta');
        for (let i = 0; i < metas.length; i++) {
            if (metas[i].getAttribute('name') === key ||
                metas[i].getAttribute('property') === key) {
                return metas[i].getAttribute('content');
            }
        }
        return '';
    };
    /**
     * get Zalo Version
     * @returns {string} zalo current version
     *
     */
    const getZaloVersion = () => {
        const _agent = getUserAgent().toLowerCase();
        const _agents = _agent.split('zalo');
        const version = _agents[1];
        if (version) {
            const versionNumber = version.replace(' ', '').split('/')[1];
            return versionNumber || '';
        }
        return '';
    };
    /**
     * get platform
     * @returns {string} platform
     *
     */
    const getPlatform = () => {
        let platform = checkPlatform();
        if (platform.isWP)
            return PlatformType.wp;
        if (platform.isAndroid)
            return PlatformType.android;
        if (platform.isIOS)
            return PlatformType.iOS;
        return PlatformType.unknown;
    };
    const isArray = (type, argument) => Array.isArray(argument) &&
        !argument.some((i) => {
            if (type === 'url') {
                return !isValidUrl(i);
            }
            else
                return typeof i !== type;
        });
    const isType = (argument, type) => {
        const lowerCaseType = type.toLowerCase();
        const types = lowerCaseType.split(/[<>]/i);
        const isArrayType = types[0] === 'array';
        if ((lowerCaseType === 'url' && isValidUrl(argument)) ||
            (isArrayType &&
                ((lowerCaseType === 'array' && Array.isArray(argument)) ||
                    isArray(types[1], argument))) ||
            (!Array.isArray(argument) && typeof argument === type)) {
            return true;
        }
        return false;
    };
    const getToken = (name) => {
        return readCookieFallback(name);
    };
    /**
     * Generate a unique string from a input string by:
     * 1. Remove accents from input string
     * 2. Remove all spaces
     * 3. Lower case
     * 4. Concat with a random string
     * @param {string} str
     * @returns unique string
     */
    const generateUniqueString = (str = '') => {
        const RANDOM_STRING_LENGTH = 4;
        const formattedStr = str
            .normalize('NFD')
            .replace(REGEXP_SPECIAL_UNICODE, '')
            .replace(REGEXP_ACCENT_D, 'd')
            .replace(REGEXP_SPACES, '')
            .toLowerCase();
        return `${formattedStr}_${Math.random()
        .toString(36)
        .substr(2, RANDOM_STRING_LENGTH)}`;
    };
    const parseJSON = (str) => {
        if (_.isObject(JSON) && JSON.parse && _.isString(str)) {
            const formattedStr = str
                .replace(/\n/g, '\\n')
                .replace(/\r/g, '\\r')
                .replace(/\t/g, '\\t')
                .replace(/\x00/g, '');
            return JSON.parse(formattedStr, (key, value) => {
                return value;
            });
        }
        else if (_.isObject(str)) {
            return str;
        }
        else {
            return new Function('return ' + str)();
        }
    };
    const serialize = (data) => {
        if (_.isObject(JSON) && JSON.stringify) {
            return JSON.stringify(data);
        }
        if (data === undefined) {
            return 'undefined';
        }
        if (data === null) {
            return 'null';
        }
        try {
            if (typeof data === 'string' ||
                data.constructor.toString().match(/string/i) !== null) {
                return '"' + data.replace(/"/g, '\\"') + '"';
            }
        }
        catch (e) {
            console.log(e);
        }
        var a;
        if (Object.prototype.toString.call(data).match(/array/i) !== null) {
            a = new Array();
            var length = data.length;
            for (var i = 0; i < length; i++) {
                a.push(serialize(data[i]));
            }
            return '[' + a.join(',') + ']';
        }
        if (typeof data === 'object') {
            a = new Array();
            for (var f in data) {
                a.push('"' + f + '":' + serialize(data[f]));
            }
            return '{' + a.join(',') + '}';
        }
        return data.toString();
    };
    const isSupportNativeStorage = () => {
        try {
            const zaloVersion = Number(getZaloVersion());
            const platform = getPlatform();
            return zaloVersion >= ZALO_SUPPORT_STORAGE_VERSION[platform];
        }
        catch (error) {
            return true;
        }
    };
    const stringifyData = (data) => {
        return JSON.stringify(data).replace(/"/g, '\\"').replace(/'/g, '&#39;');
    };
    const stringToData = (data) => {
        try {
            if (data) {
                debug(data);
                const formattedValue = data.replace(/\\/g, '').replace(/&#39;/g, "'");
                debug('formattedValue', formattedValue, JSON.parse(formattedValue), typeof JSON.parse(formattedValue));
                return JSON.parse(formattedValue);
            }
            return null;
        }
        catch (error) {
            debug('parse json error:', error);
            return data;
        }
    };
    const checkIOSSupportAction = (action) => {
        var _a;
        const zaloIOSVersion = getZaloVersion();
        const actionVersionLive = ((_a = action === null || action === void 0 ? void 0 : action.version_live) === null || _a === void 0 ? void 0 : _a.iOS) || 0;
        if (Array.isArray(window.ignoreCheckSupport) &&
            window.ignoreCheckSupport.length > 0 &&
            window.ignoreCheckSupport.includes(action.name)) {
            return true;
        }
        return zaloIOSVersion >= actionVersionLive;
    };
    const getZMPShareInfo = (appID, accessToken, shareTitle, shareDescription, shareThumbnail, sharePath) => __awaiter(void 0, void 0, void 0, function* () {
        const currentUrl = new URL(location.href);
        const params = new URLSearchParams();
        let path = `${currentUrl.pathname}${currentUrl.search}`;
        if (sharePath) {
            path = `/zapps/${appID}${sharePath[0] === '/' ? '' : '/'}${sharePath}`;
        }
        const validUrl = new URL(`https://zalo.me/app/link${path}`);
        params.append('title', shareTitle);
        params.append('description', shareDescription || '');
        params.append('thumbnail', shareThumbnail);
        params.append('url', validUrl.href);
        params.append('accessToken', accessToken || '');
        const postConfig = {
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            }
        };
        const res = yield fetch('https://h5.zalo.me/openapi/create-sharelink', Object.assign({ method: 'POST', body: params }, postConfig));
        const resData = yield res.json();
        if (!resData || resData.err !== 0) {
            throw apiResponse.error.cannotGetShareInfo();
        }
        validUrl.search = `${validUrl.search}&zshareId=${resData.data.shareId}`;
        return Object.assign(Object.assign({}, resData.data), { shareableLink: validUrl.href });
    });
    const checkData = (types, option) => (data) => {
        const validType = Array.isArray(types)
            ? types.some((type) => isType(data, type))
            : isType(data, types);
        if (!validType) {
            return {
                error: true,
                errorMessage: types
            };
        }
        if (option) {
            if (Array.isArray(option === null || option === void 0 ? void 0 : option.values)) {
                return {
                    error: !(option === null || option === void 0 ? void 0 : option.values.includes(data)),
                    errorMessage: option === null || option === void 0 ? void 0 : option.values.toString()
                };
            }
            if (_.isNumber(option === null || option === void 0 ? void 0 : option.maxLength)) {
                return {
                    error: _.isString(data) && data.length > (option === null || option === void 0 ? void 0 : option.maxLength),
                    errorMessage: `data length must <= ${option === null || option === void 0 ? void 0 : option.maxLength}`
                };
            }
            if (_.isNumber(option === null || option === void 0 ? void 0 : option.min) && _.isNumber(option === null || option === void 0 ? void 0 : option.max)) {
                return {
                    error: data < (option === null || option === void 0 ? void 0 : option.min) || data > (option === null || option === void 0 ? void 0 : option.max),
                    errorMessage: `data must be in between ${option === null || option === void 0 ? void 0 : option.min} and ${option === null || option === void 0 ? void 0 : option.max}`
                };
            }
            if (_.isNumber(option === null || option === void 0 ? void 0 : option.min)) {
                return {
                    error: data < (option === null || option === void 0 ? void 0 : option.min),
                    errorMessage: `data must >= ${option === null || option === void 0 ? void 0 : option.min}`
                };
            }
            if (_.isNumber(option === null || option === void 0 ? void 0 : option.max)) {
                return {
                    error: data > (option === null || option === void 0 ? void 0 : option.max),
                    errorMessage: `data must <= ${option === null || option === void 0 ? void 0 : option.max}`
                };
            }
            if (_.isRegExp(option === null || option === void 0 ? void 0 : option.regex)) {
                return {
                    error: !option.regex.test(data),
                    errorMessage: `data must valid`
                };
            }
        }
        return {
            error: false
        };
    };
    const getAppInfo = (appId, versionStatus, currentVersion) => __awaiter(void 0, void 0, void 0, function* () {
        const inputData = {
            appId,
            versionStatus
        };
        if (!_.isUndefined(currentVersion)) {
            inputData.currentVersion = currentVersion;
        }
        const api = QueryString.appendToUrl(APIS.GET_APP_INFO, inputData);
        const msgApi = yield fetch(api, {
            credentials: 'include'
        });
        if (msgApi.ok) {
            const appInfo = yield msgApi.json();
            if (appInfo.err < 0 || !appInfo.data) {
                throw new Error(appInfo);
            }
            const info = {
                name: appInfo.data.name,
                version: appInfo.data.version,
                description: appInfo.data.description,
                appUrl: appInfo.data.appUrl,
                qrCodeUrl: appInfo.data.qrCodeUrl,
                logoUrl: appInfo.data.logoUrl
            };
            return info;
        }
        throw new Error("Can't get app info");
    });

    var eventemitter3 = createCommonjsModule(function (module) {

    var has = Object.prototype.hasOwnProperty
      , prefix = '~';

    /**
     * Constructor to create a storage for our `EE` objects.
     * An `Events` instance is a plain object whose properties are event names.
     *
     * @constructor
     * @private
     */
    function Events() {}

    //
    // We try to not inherit from `Object.prototype`. In some engines creating an
    // instance in this way is faster than calling `Object.create(null)` directly.
    // If `Object.create(null)` is not supported we prefix the event names with a
    // character to make sure that the built-in object properties are not
    // overridden or used as an attack vector.
    //
    if (Object.create) {
      Events.prototype = Object.create(null);

      //
      // This hack is needed because the `__proto__` property is still inherited in
      // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
      //
      if (!new Events().__proto__) prefix = false;
    }

    /**
     * Representation of a single event listener.
     *
     * @param {Function} fn The listener function.
     * @param {*} context The context to invoke the listener with.
     * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
     * @constructor
     * @private
     */
    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }

    /**
     * Add a listener for a given event.
     *
     * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} context The context to invoke the listener with.
     * @param {Boolean} once Specify if the listener is a one-time listener.
     * @returns {EventEmitter}
     * @private
     */
    function addListener(emitter, event, fn, context, once) {
      if (typeof fn !== 'function') {
        throw new TypeError('The listener must be a function');
      }

      var listener = new EE(fn, context || emitter, once)
        , evt = prefix ? prefix + event : event;

      if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
      else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
      else emitter._events[evt] = [emitter._events[evt], listener];

      return emitter;
    }

    /**
     * Clear event by name.
     *
     * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
     * @param {(String|Symbol)} evt The Event name.
     * @private
     */
    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0) emitter._events = new Events();
      else delete emitter._events[evt];
    }

    /**
     * Minimal `EventEmitter` interface that is molded against the Node.js
     * `EventEmitter` interface.
     *
     * @constructor
     * @public
     */
    function EventEmitter() {
      this._events = new Events();
      this._eventsCount = 0;
    }

    /**
     * Return an array listing the events for which the emitter has registered
     * listeners.
     *
     * @returns {Array}
     * @public
     */
    EventEmitter.prototype.eventNames = function eventNames() {
      var names = []
        , events
        , name;

      if (this._eventsCount === 0) return names;

      for (name in (events = this._events)) {
        if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
      }

      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
      }

      return names;
    };

    /**
     * Return the listeners registered for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Array} The registered listeners.
     * @public
     */
    EventEmitter.prototype.listeners = function listeners(event) {
      var evt = prefix ? prefix + event : event
        , handlers = this._events[evt];

      if (!handlers) return [];
      if (handlers.fn) return [handlers.fn];

      for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
        ee[i] = handlers[i].fn;
      }

      return ee;
    };

    /**
     * Return the number of listeners listening to a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Number} The number of listeners.
     * @public
     */
    EventEmitter.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix ? prefix + event : event
        , listeners = this._events[evt];

      if (!listeners) return 0;
      if (listeners.fn) return 1;
      return listeners.length;
    };

    /**
     * Calls each of the listeners registered for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @returns {Boolean} `true` if the event had listeners, else `false`.
     * @public
     */
    EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event : event;

      if (!this._events[evt]) return false;

      var listeners = this._events[evt]
        , len = arguments.length
        , args
        , i;

      if (listeners.fn) {
        if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

        switch (len) {
          case 1: return listeners.fn.call(listeners.context), true;
          case 2: return listeners.fn.call(listeners.context, a1), true;
          case 3: return listeners.fn.call(listeners.context, a1, a2), true;
          case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }

        for (i = 1, args = new Array(len -1); i < len; i++) {
          args[i - 1] = arguments[i];
        }

        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length
          , j;

        for (i = 0; i < length; i++) {
          if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

          switch (len) {
            case 1: listeners[i].fn.call(listeners[i].context); break;
            case 2: listeners[i].fn.call(listeners[i].context, a1); break;
            case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
            case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
            default:
              if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
                args[j - 1] = arguments[j];
              }

              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }

      return true;
    };

    /**
     * Add a listener for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} [context=this] The context to invoke the listener with.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.on = function on(event, fn, context) {
      return addListener(this, event, fn, context, false);
    };

    /**
     * Add a one-time listener for a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn The listener function.
     * @param {*} [context=this] The context to invoke the listener with.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.once = function once(event, fn, context) {
      return addListener(this, event, fn, context, true);
    };

    /**
     * Remove the listeners of a given event.
     *
     * @param {(String|Symbol)} event The event name.
     * @param {Function} fn Only remove the listeners that match this function.
     * @param {*} context Only remove the listeners that have this context.
     * @param {Boolean} once Only remove one-time listeners.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
      var evt = prefix ? prefix + event : event;

      if (!this._events[evt]) return this;
      if (!fn) {
        clearEvent(this, evt);
        return this;
      }

      var listeners = this._events[evt];

      if (listeners.fn) {
        if (
          listeners.fn === fn &&
          (!once || listeners.once) &&
          (!context || listeners.context === context)
        ) {
          clearEvent(this, evt);
        }
      } else {
        for (var i = 0, events = [], length = listeners.length; i < length; i++) {
          if (
            listeners[i].fn !== fn ||
            (once && !listeners[i].once) ||
            (context && listeners[i].context !== context)
          ) {
            events.push(listeners[i]);
          }
        }

        //
        // Reset the array, or remove it completely if we have no more listeners.
        //
        if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
        else clearEvent(this, evt);
      }

      return this;
    };

    /**
     * Remove all listeners, or those of the specified event.
     *
     * @param {(String|Symbol)} [event] The event name.
     * @returns {EventEmitter} `this`.
     * @public
     */
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;

      if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt]) clearEvent(this, evt);
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }

      return this;
    };

    //
    // Alias methods names because people roll like that.
    //
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.addListener = EventEmitter.prototype.on;

    //
    // Expose the prefix.
    //
    EventEmitter.prefixed = prefix;

    //
    // Allow `EventEmitter` to be imported as module namespace.
    //
    EventEmitter.EventEmitter = EventEmitter;

    //
    // Expose the module.
    //
    {
      module.exports = EventEmitter;
    }
    });

    class ZMPEEmitter extends eventemitter3 {
        constructor() {
            super();
            this.debug = Debug("zmp:event-emitter");
        }
        static getInstance() {
            if (!ZMPEEmitter.instance) {
                ZMPEEmitter.instance = new ZMPEEmitter();
            }
            return ZMPEEmitter.instance;
        }
        h5ConfirmHandleEvent(eventId, eventName, callbackData) {
            ZaloJavaScriptInterface.jsH5EventCallback(eventId, eventName, callbackData || '');
        }
        on(event, fn, context) {
            this.debug(`register ${event}: ${context}`);
            const handler = (eventId, eventData) => {
                this.h5ConfirmHandleEvent(eventId, event, context);
                fn(eventData);
            };
            return super.on(event, handler, context);
        }
        once(event, fn, context) {
            this.debug(`register once ${event}: ${context}`);
            const handler = (eventId, eventData) => {
                this.h5ConfirmHandleEvent(eventId, event, context);
                fn(eventData);
            };
            return super.once(event, handler, context);
        }
    }

    var version = "2.23.3";

    class Basics {
        /**
         * Lấy version hiện tại của Zalo Mini Program SDK
         *
         * @category Basics
         *
         * @returns {string} Version hiện tại của Zalo Mini Program SDK.
         */
        static getVersion() {
            return version;
        }
        /**
         * Gets system information.
         *
         * @function getSystemInfo
         * @category Basics
         *
         *
         *
         */
        static getSystemInfo() {
            const system = {
                version: getMetaValue('version-id') || '',
                apiVersion: version,
                zaloVersion: getZaloVersion(),
                platform: getPlatform(),
                language: navigator.language,
                zaloLanguage: window.zLanguage || 'vi',
                zaloTheme: window.zTheme || 'light'
            };
            return system;
        }
        /**
         * Lấy thông tin mini app
         *
         * @async
         * @function getAppInfo
         * @category Device
         *
         */
        static getAppInfo() {
            return __awaiter(this, void 0, void 0, function* () {
                const appId = this.getAppId();
                const systemInfo = this.getSystemInfo();
                return yield getAppInfo(appId, 0, systemInfo.version);
            });
        }
    }

    class NavigationBar {
        /**
         * A promise for the user's favorite color.
         *
         * @promise FavoriteColorPromise
         * @fulfill {string} The user's favorite color.
         * @reject {TypeError} The user's favorite color is an invalid type.
         * @reject {MissingColorError} The user has not specified a favorite color.
         */
        /**
         * Dynamically sets the title of the current page.
         *
         * @async
         * @function setNavigationBarTitle
         * @category Navigation Bar
         *
         * @example
         *
         * zmpApis.setNavigationBarTitle({
         *  title: "Current Page"
         * }).then((res) => {
         *  console.log("Success");
         * }).catch((error) => {
         *  console.log("Fail");
         * });
         *
         * @param {Object} object
         * @param {string} object.title - The title of the page
         *
         * @return {Promise}
         *
         */
        static setNavigationBarTitle(object) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.getJSBridge().callNative(ACTION.CHANGE_TITLE_HEADER, {
                    title: object.title
                }, {
                    haveTimeout: false
                });
            });
        }
        /**
         * Sets the color of the navigation bar in the page.
         *
         * @async
         * @function setNavigationBarColor
         * @category Navigation Bar
         *
         * @example
         * zmpApis.setNavigationBarColor({
         *  color: "#000000"
         * }).then((res) => {
         *  console.log("Success");
         * }).catch((error) => {
         *  console.log("Fail");
         * });
         *
         * @param {Object} object
         * @param {string} object.color - Color value, whose valid value is hexadecimal color
         *
         *
         */
        static setNavigationBarColor(object) {
            return __awaiter(this, void 0, void 0, function* () {
                const dataConfig = {};
                let actionBarType;
                if (!_.isEmpty(object.textColor)) {
                    dataConfig.textColor = object.textColor;
                }
                if (_.isString(object.color) && object.color.length > 0) {
                    if (!_.isEmpty(object.color)) {
                        dataConfig.backgroundColor = object.color;
                    }
                    actionBarType = SHOW_ACTION_BAR;
                }
                else {
                    if (!_.isEmpty(object.statusBarColor)) {
                        dataConfig.backgroundColor = object.statusBarColor;
                    }
                    actionBarType = HIDE_ACTION_BAR;
                }
                this.setActionBarConfig((state) => (Object.assign(Object.assign({}, state), { actionbarType: actionBarType, dataConfig: Object.assign(Object.assign({}, state.dataConfig), dataConfig) })));
                yield this.getJSBridge().callNative(ACTION.CHANGE_ACTIONBAR, Object.assign({}, this.getActionBarConfig()), {
                    haveTimeout: false
                });
            });
        }
        /**
         * Dynamically sets the left button of the current page.
         *
         * @async
         * @function setNavigationBarLeftButton
         * @category Navigation Bar
         *
         * @example
         * zmpApis.setNavigationBarLeftButton({
         *  buttonType: 'both',
         * }).then((res) => {
         *  console.log("Success");
         * }).catch((error) => {
         *  console.log("Fail");
         * });
         *
         * @param {Object} object
         * @param {Number} object.buttonType
         * Left button type:
         *  - 0: Back
         *  - 1: Close
         *  - 2: Both
         * @param {Number} object.confirmToExit
         * Behavior when click close button:
         *  - 0: Close without confirm
         *  - 1: Close with native confirm dialog
         *  - 2: User will handle event close
         * @param {string} [object.dialogMessage="Bạn có muốn thoát?"] - Specifies a message that will be shown on native dialog. Only when ```confirmToExit``` is 1
         * @param {Function} [object.handleCloseEvent] - Specifies a function that will be called when user click close button. Only when ```confirmToExit``` is 2
         */
        static setNavigationBarLeftButton(type, confirmToExit) {
            return __awaiter(this, void 0, void 0, function* () {
                let leftButtonType;
                let showHomeButton;
                if (_.isString(type)) {
                    leftButtonType =
                        type === 'none' || type === 'home'
                            ? ACTION_LEFT_BUTTON_TYPE.HIDE_BACK
                            : ACTION_LEFT_BUTTON_TYPE.SHOW_BACK;
                    showHomeButton =
                        type === 'home' || type === 'both'
                            ? ACTION_LEFT_BUTTON_TYPE.SHOW_HOME
                            : ACTION_LEFT_BUTTON_TYPE.HIDE_HOME;
                }
                this.setActionBarConfig((state) => (Object.assign(Object.assign({}, state), { buttonType: _.isNumber(leftButtonType) ? leftButtonType : state.buttonType, dataConfig: Object.assign(Object.assign({}, state.dataConfig), { confirmToExit: _.isNumber(confirmToExit) ? confirmToExit : state.dataConfig.confirmToExit, viewInLeftType: _.isNumber(leftButtonType) ? leftButtonType : state.dataConfig.viewInLeftType }), homeConfig: Object.assign(Object.assign({}, state.homeConfig), { enable: _.isNumber(showHomeButton) ? showHomeButton : state.homeConfig.enable }) })));
                yield this.getJSBridge().callNative(ACTION.CHANGE_ACTIONBAR_LEFTBUTTON_TYPE, Object.assign({}, this.getActionBarConfig()), {
                    haveTimeout: false
                });
            });
        }
        static setNavigationBar(data) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.getJSBridge().callNative(ACTION.CHANGE_ACTIONBAR, {
                    data
                }, {
                    haveTimeout: false
                });
            });
        }
    }

    class Background {
        /**
         * Dynamically sets the background color of the window.
         *
         * @async
         * @function setBackgroundColor
         * @category Background
         *
         * @example
         * zmpApis.setBackgroundColor({
         *  backgroundColor: "#ffffff"
         * }).then((res) => {
         *  console.log("Success");
         * }).catch((error) => {
         *  console.log("Fail");
         * });
         *
         * @param {Object} object
         * @param {string} object.backgroundColor - The background color of the window, which must be a hexadecimal value
         *
         *
         */
        static setBackgroundColor(object) {
            return __awaiter(this, void 0, void 0, function* () {
                if (_.isString(object.backgroundColor) &&
                    object.backgroundColor.length > 0) {
                    yield this.getJSBridge().callNative(ACTION.CHANGE_ACTIONBAR, {
                        actionbarType: this.isShowNavBar ? 5 : 6,
                        dataConfig: {
                            backgroundColor: object.backgroundColor,
                            textColor: object.textColor
                        }
                    });
                }
            });
        }
    }

    var _Logger_logLevel, _Logger_friendly, _Logger_content, _Logger_metric, _Logger_internalLog;
    class Log {
        constructor(object, severity, level, title) {
            this.title = title;
            this.severity = severity;
            const d = new Date();
            this.time = d.toLocaleTimeString();
            this.content = object;
            if (level > 0) {
                const stack = new Error().stack;
                this.stack = stack ? stack.replace('Error\n', '') : '';
            }
        }
        toString() {
            var arr;
            if (this.content.stack) {
                //good for errors
                arr = [
                    this.title,
                    this.severity.toUpperCase(),
                    this.time,
                    this.content,
                    this.content.stack.replace('Error:', '')
                ];
            }
            else {
                arr = [
                    this.title,
                    this.severity.toUpperCase(),
                    this.time,
                    JSON.stringify(this.content),
                    this.stack
                ];
            }
            return arr.join(' ');
        }
    }
    class Logger {
        constructor() {
            _Logger_logLevel.set(this, 3);
            _Logger_friendly.set(this, ['none', 'error', 'warn', 'info']);
            _Logger_content.set(this, '[zmp] > ');
            _Logger_metric.set(this, {
                error: 0,
                warn: 0,
                info: 0,
                firstError: null,
                lastError: null
            });
            _Logger_internalLog.set(this, (level, object, title) => {
                __classPrivateFieldGet(this, _Logger_metric, "f")[__classPrivateFieldGet(this, _Logger_friendly, "f")[level]]++;
                const severity = __classPrivateFieldGet(this, _Logger_friendly, "f")[level];
                __classPrivateFieldSet(this, _Logger_content, __classPrivateFieldGet(this, _Logger_content, "f") + ('string' !== typeof object ? new Log(object, severity, level, title).toString() : object), "f");
                if (level > __classPrivateFieldGet(this, _Logger_logLevel, "f"))
                    return;
                switch (level) {
                    case 1:
                        console.error(__classPrivateFieldGet(this, _Logger_content, "f"));
                        break;
                    case 2:
                        console.warn(__classPrivateFieldGet(this, _Logger_content, "f"));
                        break;
                    case 3:
                        console.info(__classPrivateFieldGet(this, _Logger_content, "f"));
                        break;
                    default:
                        throw new Error(`internal`);
                }
            });
        }
        setLogLevel(newLevel) {
            __classPrivateFieldSet(this, _Logger_logLevel, newLevel, "f");
        }
        info(object) {
            __classPrivateFieldGet(this, _Logger_internalLog, "f").call(this, 3, object);
        }
        warn(object, title) {
            __classPrivateFieldGet(this, _Logger_internalLog, "f").call(this, 2, object, title);
        }
        error(object, title) {
            __classPrivateFieldGet(this, _Logger_internalLog, "f").call(this, 1, object, title);
        }
        getMetrics() {
            return __classPrivateFieldGet(this, _Logger_metric, "f");
        }
    }
    _Logger_logLevel = new WeakMap(), _Logger_friendly = new WeakMap(), _Logger_content = new WeakMap(), _Logger_metric = new WeakMap(), _Logger_internalLog = new WeakMap();
    const logger = new Logger();

    class Device {
        /**
         * Sets the device orientation.
         *
         * @async
         * @function setDeviceOrientation
         * @category Device
         *
         */
        static setDeviceOrientation(object) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.getJSBridge().callNative(ACTION.CHANGE_AUTOROTATE, {
                    autoRotate: OrientationType[object.rotate]
                });
            });
        }
        /**
         * Gets the network type.
         *
         * @async
         * @function getNetworkType
         * @category Device
         *
         * @example
         * zmpApis.getNetworkType().then((res) => {
         *  console.log(res.networkType);
         * }).catch((error) => {
         *  console.log("Fail");
         * });
         *
         * @returns {Promise<NetworkType>} Promise object
         *
         */
        static getNetworkType(object) {
            return __awaiter(this, void 0, void 0, function* () {
                const resData = yield this.getJSBridge().callNative(ACTION.WEBVIEW_NETWORKTYPE, {
                    url: window.location.href,
                    featureId: ''
                }).then((data) => {
                    const network = data.network;
                    let networkType;
                    const isAndroid = checkPlatform().isAndroid;
                    switch (network) {
                        case NETWORK_TYPE(isAndroid).NONE:
                            networkType = NetworkType.none;
                            break;
                        case NETWORK_TYPE(isAndroid).WIFI:
                            networkType = NetworkType.wifi;
                            break;
                        case NETWORK_TYPE(isAndroid)['2G']:
                            networkType = NetworkType.cellular;
                            break;
                        case NETWORK_TYPE(isAndroid)['3G']:
                            networkType = NetworkType.cellular;
                            break;
                        case NETWORK_TYPE(isAndroid)['4G']:
                            networkType = NetworkType.cellular;
                            break;
                        default:
                            networkType = NetworkType.unknown;
                            break;
                    }
                    const res = {
                        networkType
                    };
                    return res;
                });
                return resData;
            });
        }
        /**
         * Listens on the network status change event.
         *
         * @function onNetworkStatusChange
         * @category Device
         *
         * @example
         * zmpApis.onNetworkStatusChange(function (res) {
         *  console.log(res.isConnected);
         *  console.log(res.networkType);
         * })
         *
         * @param {Function} callback - The callback function for the network status change event.
         */
        static onNetworkStatusChange(callback) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.events.on(Events.NetworkChanged, (data) => {
                    const state = data && data.state;
                    this.getNetworkType()
                        .then((resNetworkType) => {
                        const res = {
                            isConnected: 'CONNECTED' === state,
                            networkType: resNetworkType && resNetworkType.networkType
                        };
                        callback(res);
                    })
                        .catch((error) => {
                        logger.error(error, 'onNetworkStatusChange');
                    });
                });
            });
        }
        /**
         * Starts searching for nearby iBeacon devices.
         *
         * @function startBeaconDiscovery
         * @category Device
         *
         * @example
         * zmpApis.startBeaconDiscovery().then((res) => {})
         *
         * @param {Object} object
         * @param {string} [object.uuids] - The list of iBeacon device broadcast UUIDs
         */
        static startBeaconDiscovery(object) {
            var _a, _b, _c, _d, _e;
            return __awaiter(this, void 0, void 0, function* () {
                const data = {
                    subaction: 0,
                    scanning_type: _.isNumber(object === null || object === void 0 ? void 0 : object.scanningType) ? object.scanningType : 0,
                    data: {
                        scan_from_source: _.isString(object === null || object === void 0 ? void 0 : object.scanFromSource)
                            ? object.scanFromSource
                            : '',
                        expire: _.isNumber(object === null || object === void 0 ? void 0 : object.expire) ? object.expire : 3000,
                        monitor_interval: _.isNumber(object === null || object === void 0 ? void 0 : object.monitorInterval)
                            ? object.monitorInterval
                            : 60,
                        domain: _.isString(object === null || object === void 0 ? void 0 : object.domain) ? object.domain : '',
                        scan_config: {
                            scan_time: _.isNumber((_a = object === null || object === void 0 ? void 0 : object.scanConfig) === null || _a === void 0 ? void 0 : _a.scanTime)
                                ? object.scanConfig.scanTime
                                : 15000,
                            time_between_scan: _.isNumber((_b = object === null || object === void 0 ? void 0 : object.scanConfig) === null || _b === void 0 ? void 0 : _b.timeBetweenScan)
                                ? object.scanConfig.timeBetweenScan
                                : 10000,
                            beacon_timeout: _.isNumber((_c = object === null || object === void 0 ? void 0 : object.scanConfig) === null || _c === void 0 ? void 0 : _c.beaconTimeout)
                                ? object.scanConfig.beaconTimeout
                                : 30000,
                            delayCheckConnectedTimeout: _.isNumber((_d = object === null || object === void 0 ? void 0 : object.scanConfig) === null || _d === void 0 ? void 0 : _d.delayCheckConnectedTimeout)
                                ? object.scanConfig.delayCheckConnectedTimeout
                                : 5000,
                            beaconConnectedTimeout: _.isNumber((_e = object === null || object === void 0 ? void 0 : object.scanConfig) === null || _e === void 0 ? void 0 : _e.beaconConnectedTimeout)
                                ? object.scanConfig.beaconConnectedTimeout
                                : 600000
                        },
                        items: Array.isArray(object === null || object === void 0 ? void 0 : object.items) ? object === null || object === void 0 ? void 0 : object.items : []
                    }
                };
                yield this.getJSBridge().callNative(ACTION.SCAN_IBEACON, Object.assign({}, data));
                return true;
            });
        }
        /**
         * Stops searching for nearby iBeacon devices.
         *
         * @function stopBeaconDiscovery
         * @category Device
         *
         * @example
         * zmpApis.stopBeaconDiscovery().then((res) => {})
         *
         */
        static stopBeaconDiscovery(object) {
            return __awaiter(this, void 0, void 0, function* () {
                const data = {
                    subaction: 2
                };
                yield this.getJSBridge().callNative(ACTION.SCAN_IBEACON, Object.assign({}, data));
                return true;
            });
        }
        /**
         * Obtains all discovered iBeacon devices.
         *
         * @function getBeacons
         * @category Device
         *
         * @example
         * zmpApis.getBeacons().then((res) => {
         *  console.log(res.beacons);
         * })
         *
         */
        static getBeacons(object) {
            return __awaiter(this, void 0, void 0, function* () {
                const data = {
                    subaction: 1
                };
                const resData = yield this.getJSBridge().callNative(ACTION.SCAN_IBEACON, Object.assign({}, data), {
                    isMultiCallback: true
                }).then((resData) => {
                    const res = {
                        beacons: []
                    };
                    Array.isArray(resData) &&
                        resData.forEach((element) => {
                            const ibeacon = {
                                uuid: element.uuid,
                                major: element.major,
                                minor: element.minor,
                                distance: element.distance,
                                rssi: element.rssi
                            };
                            res.beacons.push(ibeacon);
                        });
                    return res;
                });
                return resData;
            });
        }
        // Bluetooth
        /**
         * Dừng tìm kiếm các thiết bị Bluetooth xung quanh. Nếu bạn đã tìm thấy thiết bị mình cần và không cần tiếp tục tìm kiếm, chúng tôi khuyên bạn nên gọi API này để ngừng tìm kiếm.
         *
         * @async
         * @function stopBluetoothDevicesDiscovery
         * @Category Device
         *
         *  @example
         * zmpApis.stopBluetoothDevicesDiscovery()
         * .then((res) => {
         *  console.log("Success");
         * }).catch((error) => {
         *  console.log("Fail");
         * });
         *
         * @returns  {Promise}
         */
        static stopBluetoothDevicesDiscovery() {
            return __awaiter(this, void 0, void 0, function* () {
                return this.getJSBridge().callNative({
                    name: ''
                }, {});
            });
        }
        /**
         * Bắt đầu tìm kiếm các thiết bị Bluetooth xung quanh
         *
         * @async
         * @function startBluetoothDevicesDiscovery
         * @Category Device
         *
         * @example
         * zmpApis.startBluetoothDevicesDiscovery({
         *  allowDuplicatesKey : 0,
         *  interval: 0
         * }).then((res) => {
         *  console.log("Success");
         * }).catch((error) => {
         *  console.log("Fail");
         * });
         *
         * @param {InputDataType.StartBluetoothDevicesDiscovery} object
         * @returns  {Promise}
         */
        static startBluetoothDevicesDiscovery(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return this.getJSBridge().callNative({
                    name: ''
                }, Object.assign({}, object));
            });
        }
        /**
         * Khởi tạo bluetooth module
         *
         * @async
         * @function openBluetoothAdapter
         * @Category Device
         *
         * @example
         * zmpApis.openBluetoothAdapter()
         * .then((res) => {
         *  console.log("Success");
         * }).catch((error) => {
         *  console.log("Fail");
         * });
         *
         * @returns  {Promise}
         */
        static openBluetoothAdapter() {
            return __awaiter(this, void 0, void 0, function* () {
                return this.getJSBridge().callNative({
                    name: ''
                }, {});
            });
        }
        /**
         * Nghe sự kiện device mới được thấy.
         *
         * @async
         * @function onBluetoothDeviceFound
         * @category Device
         *
         * @example
         * zmpApis.onBluetoothDeviceFound()
         * .then(res=> console.log(res))
         * .catch(err=> console.log(err))
         * @returns  {Promise}
         */
        static onBluetoothDeviceFound() {
            return __awaiter(this, void 0, void 0, function* () {
                return this.getJSBridge().callNative({
                    name: ''
                }, {});
            });
        }
        /**
         * Nghe sự kiện thay đổi trạng thái Bluetooth.
         *
         * @async
         * @function onBluetoothAdapterStateChange
         * @Category Device
         *
         * @example
         * zmpApis.onBluetoothAdapterStateChange()
         * .then(res => {
         * console.log(res)
         * })
         * .catch(err => {
         * console.log(err)
         * })
         * @returns  {Promise}
         */
        static onBluetoothAdapterStateChange() {
            return __awaiter(this, void 0, void 0, function* () {
                return Promise.resolve();
            });
        }
        /**
         * Lấy danh sách các thiết bị đã kết nối
         *
         * @async
         * @function getConnectedBluetoothDevices
         * @Category Device
         *
         * @example
         * zmpApis.getConnectedBluetoothDevices({
         *
         * })
         * .then(res => console.log(res))
         * .catch(err => console.log(err))
         * @param {InputDataType.GetConnectedBluetoothDevices} The list of primary service UUIDs
         * @returns  {Promise}
         */
        static getConnectedBluetoothDevices(object) {
            return __awaiter(this, void 0, void 0, function* () {
                const data = {
                    services: object.services || []
                };
                return this.getJSBridge().callNative({
                    name: ''
                }, data);
            });
        }
        /**
         * Lấy danh sách các thiết bị bluetooth bao gồm cả các devices đã kết nối
         *
         * @async
         * @function getBluetoothDevices
         * @Category Device
         *
         * @example
         * zmpApis.getBluetoothDevices()
         * .then(res => console.log(res))
         * .catch(err => console.log(err))
         *
         * @returns  {Promise}
         */
        static getBluetoothDevices() {
            return __awaiter(this, void 0, void 0, function* () {
                return this.getJSBridge().callNative({
                    name: ''
                }, {});
            });
        }
        /**
         * Lấy trạng thái của Bluetooth adapter
         *
         * @async
         * @function getBluetoothAdapterState
         * @Category Device
         *
         * @example
         * zmpApis.getBluetoothAdapterState()
         * .then(res => console.log(res))
         * .catch(err => console.log(err))
         *
         * @returns  {Promise}
         */
        static getBluetoothAdapterState() {
            return __awaiter(this, void 0, void 0, function* () {
                return this.getJSBridge().callNative({
                    name: ''
                }, {});
            });
        }
        /**
         * Đóng bluetooth adapter
         *
         * @async
         * @function closeBluetoothAdapter
         * @Category Device
         *
         * @example
         * zmpApis.closeBluetoothAdapter()
         * .then(res => console.log(res))
         * .catch(err => console.log(err))
         *
         * @returns  {Promise}
         */
        static closeBluetoothAdapter() {
            return __awaiter(this, void 0, void 0, function* () {
                return this.getJSBridge().callNative({
                    name: ''
                }, {});
            });
        }
        /**
         * Cho phép ứng dụng mở tính năng quét QR Code của Zalo App và trả về kết quả sau khi người dùng quét thành công.
         * @async
         * @function scanQRCode
         * @category Device
         *
         */
        static scanQRCode(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this.getJSBridge().callNative(ACTION.OPEN_QR, {
                    skipOpenLink: true
                });
            });
        }
        /**
         * Show toast
         * @async
         * @function showToast
         * @category Device
         *
         */
        static showToast(object) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.getJSBridge().callNative(ACTION.SHOW_TOAST, {
                    toast: object.message
                });
            });
        }
        /**
         * Ẩn keyboard
         * @async
         * @function hideKeyboard
         * @category Device
         *
         */
        static hideKeyboard(object) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.getJSBridge().callNative(ACTION.HIDE_KEYBOARD, {});
            });
        }
        /**
         * Open phone
         * @async
         * @function openPhone
         * @category Device
         *
         */
        static openPhone(object) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.getJSBridge().callNative(ACTION.OPEN_PHONE, {
                    phoneNum: object.phoneNumber,
                    phoneCode: object.phoneNumber
                });
            });
        }
        /**
         * Open SMS
         * @async
         * @function openSMS
         * @category Device
         *
         */
        static openSMS(object) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.getJSBridge().callNative(ACTION.OPEN_SMS, {
                    content: object.content,
                    phoneCode: object.phoneNumber
                });
            });
        }
        /**
         * Keep screen.
         * @async
         * @function keepScreen
         * @category Device
         *
         */
        static keepScreen(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this.getJSBridge().callNative(ACTION.KEEP_SCREEN, {
                    data: {
                        keep_screen_on: object.keepScreenOn ? 1 : 0
                    }
                });
            });
        }
        /**
         * Xác thực bằng sinh trắc học
         * @async
         * @function openBioAuthentication
         * @category Authentication
         *
         */
        static openBioAuthentication(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this.getJSBridge().callNative(ACTION.PROMPT_AUTHENTICATION, {
                    secret_data: object.secretData,
                    app_id: this.getZAppId(),
                    ui: {
                        title: object.ui.title,
                        sub_title: object.ui.subTitle,
                        negative_text: object.ui.negativeButtonText
                    },
                    require_fingerprint: object.requireFingerprint ? 1 : 0
                }).then((data) => {
                    var _a, _b, _c, _d;
                    return {
                        code: data === null || data === void 0 ? void 0 : data.error_code,
                        message: data === null || data === void 0 ? void 0 : data.error_message,
                        data: {
                            domain: (_a = data === null || data === void 0 ? void 0 : data.data) === null || _a === void 0 ? void 0 : _a.domain,
                            code: (_b = data === null || data === void 0 ? void 0 : data.data) === null || _b === void 0 ? void 0 : _b.error_code,
                            message: (_c = data === null || data === void 0 ? void 0 : data.data) === null || _c === void 0 ? void 0 : _c.error_message,
                            payToken: (_d = data === null || data === void 0 ? void 0 : data.data) === null || _d === void 0 ? void 0 : _d.pay_token
                        }
                    };
                });
            });
        }
        /**
         * Một phần của flow H5-Bio-Authentication. Dùng cho H5 kiểm tra xem bio-factor có bị thay đổi gì so với trước đây ko (thêm vân tay, reset...)
         * @async
         * @function checkStateBioAuthentication
         * @category Authentication
         *
         * @example
         * api.checkStateAuthen({
         * 	success: (res) => {},
         * 	fail: (err) => {}
         * })
         * @param {InputDataType.CallbackType} object
         */
        static checkStateBioAuthentication(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this.getJSBridge().callNative(ACTION.PROMPT_AUTHENTICATION_CHECK_STATE, {}).then((data) => {
                    return {
                        bioState: data === null || data === void 0 ? void 0 : data.bio_state
                    };
                });
            });
        }
        /**
         * Vibrate.
         * @async
         * @function vibrate
         * @category Device
         *
         */
        static vibrate(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this.getJSBridge().callNative(ACTION.INTERACTIVE_VIBRATION, {
                    type: VibrateType[object.type],
                    vibrate_time: object.milliseconds
                });
            });
        }
        /**
         * Connect Wifi.
         * @async
         * @function connectWifi
         * @category Device
         *
         */
        static connectWifi(object) {
            return __awaiter(this, void 0, void 0, function* () {
                let securityType = 'open';
                if (_.isString(object.password) && object.password.length > 0) {
                    securityType = 'wpa_wpa2';
                }
                return yield this.getJSBridge().callNative(ACTION.MP_JOIN_WIFI, {
                    ssid: object.SSID,
                    securityType: securityType,
                    password: object.password,
                    hiddenSsid: object.hiddenSSID
                });
            });
        }
        /**
         * Open App Store.
         * @async
         * @function openAppStore
         * @category Device
         *
         */
        static openAppStore(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this.getJSBridge().callNative(ACTION.OPEN_APPSTORE, object);
            });
        }
    }

    var _LocalResourceStorage_storage, _LocalResourceStorage_prefix, _LocalResourceStorage_resourceInfo;
    class LocalResourceStorage {
        constructor(prefix) {
            _LocalResourceStorage_storage.set(this, localStorage);
            _LocalResourceStorage_prefix.set(this, void 0);
            _LocalResourceStorage_resourceInfo.set(this, void 0);
            checkPlatform();
            // if (platform.isMobile && platform.isZalo) {
            //   Object.defineProperty(window, 'localStorage', {
            //     value: null,
            //     configurable: true,
            //     enumerable: true,
            //     writable: false
            //   });
            // }
            __classPrivateFieldSet(this, _LocalResourceStorage_resourceInfo, {
                keys: new Set(),
                currentSize: 0,
                limitSize: STORAGE_LIMIT
            }, "f");
            __classPrivateFieldSet(this, _LocalResourceStorage_prefix, prefix, "f");
            this.findAllCurrentDataByApp(prefix);
        }
        findAllCurrentDataByApp(prefix) {
            try {
                let _x;
                for (_x in __classPrivateFieldGet(this, _LocalResourceStorage_storage, "f")) {
                    if (prefix) {
                        const _prefix = _x.split('_')[0];
                        if (_prefix !== prefix) {
                            continue;
                        }
                    }
                    __classPrivateFieldGet(this, _LocalResourceStorage_resourceInfo, "f").keys.add(_x);
                }
            }
            catch (error) {
                logger.error(error, 'LocalResourceStorage > findAllCurrentDataByApp');
            }
        }
        get(keys) {
            let res = new Map();
            keys.forEach((key) => {
                res.set(key, this.getSync(key));
            });
            return Promise.resolve(res);
        }
        getSync(key) {
            if (__classPrivateFieldGet(this, _LocalResourceStorage_prefix, "f")) {
                key = `${__classPrivateFieldGet(this, _LocalResourceStorage_prefix, "f")}_${key}`;
            }
            if (!__classPrivateFieldGet(this, _LocalResourceStorage_resourceInfo, "f").keys.has(key))
                return null;
            return __classPrivateFieldGet(this, _LocalResourceStorage_storage, "f").getItem(key);
        }
        set(data) {
            return __awaiter(this, void 0, void 0, function* () {
                Object.entries(data).forEach(([key, value]) => {
                    this.setSync(key, value.replace(/\\"/g, '"'));
                });
                return Promise.resolve({ errorKeys: [] });
            });
        }
        setSync(key, value) {
            if (__classPrivateFieldGet(this, _LocalResourceStorage_prefix, "f")) {
                key = `${__classPrivateFieldGet(this, _LocalResourceStorage_prefix, "f")}_${key}`;
            }
            __classPrivateFieldGet(this, _LocalResourceStorage_storage, "f").setItem(key, value);
            __classPrivateFieldGet(this, _LocalResourceStorage_resourceInfo, "f").keys.add(key);
        }
        getInfo() {
            return __awaiter(this, void 0, void 0, function* () {
                return Promise.resolve(this.getInfoSync());
            });
        }
        getInfoSync() {
            const currentSize = calcLocalStorageSize(__classPrivateFieldGet(this, _LocalResourceStorage_storage, "f"), __classPrivateFieldGet(this, _LocalResourceStorage_prefix, "f"));
            return {
                currentSize: _.isNumber(currentSize)
                    ? Number((currentSize / 1024).toFixed(2))
                    : 0,
                limitSize: Number((STORAGE_LIMIT / 1024).toFixed(2))
            };
        }
        remove(keys) {
            return __awaiter(this, void 0, void 0, function* () {
                keys.forEach((key) => {
                    this.removeSync(key);
                });
                return Promise.resolve({ errorKeys: [] });
            });
        }
        removeSync(key) {
            if (__classPrivateFieldGet(this, _LocalResourceStorage_prefix, "f")) {
                key = `${__classPrivateFieldGet(this, _LocalResourceStorage_prefix, "f")}_${key}`;
            }
            if (__classPrivateFieldGet(this, _LocalResourceStorage_resourceInfo, "f").keys.has(key)) {
                __classPrivateFieldGet(this, _LocalResourceStorage_storage, "f").removeItem(key);
                __classPrivateFieldGet(this, _LocalResourceStorage_resourceInfo, "f").keys.delete(key);
            }
        }
        clear() {
            return __awaiter(this, void 0, void 0, function* () {
                return Promise.resolve(this.clearSync());
            });
        }
        clearSync() {
            __classPrivateFieldGet(this, _LocalResourceStorage_resourceInfo, "f").keys.forEach((key) => {
                if (__classPrivateFieldGet(this, _LocalResourceStorage_prefix, "f") && key.indexOf(__classPrivateFieldGet(this, _LocalResourceStorage_prefix, "f")) < 0) {
                    return;
                }
                __classPrivateFieldGet(this, _LocalResourceStorage_storage, "f").removeItem(key);
                __classPrivateFieldGet(this, _LocalResourceStorage_resourceInfo, "f").keys.delete(key);
            });
        }
    }
    _LocalResourceStorage_storage = new WeakMap(), _LocalResourceStorage_prefix = new WeakMap(), _LocalResourceStorage_resourceInfo = new WeakMap();

    var wrappers = {};
    var WrapperFn = function wrapFunction(fn, type, source) {
        var t = type || 'default';
        return function () {
            var callee = t in wrappers ? wrappers[t](fn, source) : fn;
            return callee.apply(this, arguments);
        };
    };
    WrapperFn.setWrapper = function (fn) {
        var type = arguments.length <= 1 || arguments[1] === undefined
            ? 'default'
            : arguments[1];
        wrappers[type] = fn;
    };
    var ERROR = {
        error: {
            code: 1,
            error_subcode: 1357046,
            message: 'Received Invalid JSON reply.',
            type: 'http'
        }
    };
    function safelyParseResponse(rawResponse) {
        try {
            return rawResponse === null ? ERROR : JSON.parse(rawResponse);
        }
        catch (ex) {
            return ERROR;
        }
    }
    function createCORSRequest(method, url) {
        if (!self.XMLHttpRequest) {
            return null;
        }
        var xhr = new XMLHttpRequest();
        var noop = function noop() { };
        if ('withCredentials' in xhr) {
            xhr.open(method, url, true);
            xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
        }
        else {
            return null;
        }
        var wrapper = {
            send: function send(data) {
                xhr.send(data);
            }
        };
        var onload = WrapperFn(function () {
            onload = noop;
            if ('onload' in wrapper) {
                wrapper.onload(xhr);
            }
        }, 'entry', 'XMLHttpRequest:load');
        var onerror = WrapperFn(function () {
            onerror = noop;
            if ('onerror' in wrapper) {
                wrapper.onerror(xhr);
            }
        }, 'entry', 'XMLHttpRequest:error');
        xhr.onload = function () {
            onload();
        };
        xhr.onerror = function () {
            onerror();
        };
        xhr.onreadystatechange = function () {
            if (xhr.readyState == 4) {
                if (xhr.status == 200) {
                    onload();
                }
                else {
                    onerror();
                }
            }
        };
        return wrapper;
    }
    function execute(url, method, params, cb) {
        params.suppress_http_code = 1;
        var data = QueryString.encode(params);
        if (method != 'post') {
            url = QueryString.appendToUrl(url, data);
            data = '';
        }
        var request = createCORSRequest(method, url);
        if (!request) {
            return false;
        }
        request.onload = function (xhr) {
            cb(safelyParseResponse(xhr.responseText));
        };
        request.onerror = function (xhr) {
            if (xhr.responseText) {
                cb(safelyParseResponse(xhr.responseText));
            }
            else {
                cb({
                    error: {
                        code: 1,
                        error_subcode: 1357045,
                        message: 'unknown error (empty response)',
                        status: xhr.status,
                        type: 'http'
                    }
                });
            }
        };
        request.send(data);
        return true;
    }
    var CORSRequest = {
        execute: execute
    };

    var _ZaloJSBridge_instances, _ZaloJSBridge_jumpRunning, _ZaloJSBridge_cookies, _ZaloJSBridge_actionRuntimeInfo, _ZaloJSBridge_jsCall;
    class ZaloJSBridge extends eventemitter3 {
        constructor() {
            super();
            _ZaloJSBridge_instances.add(this);
            this.debug = Debug('zmp:ZaloJSBridge');
            this.events = ZMPEEmitter.getInstance();
            this._accessTk = getToken('zacc_session') || 'DEFAULT_ACCESS_TOKEN';
            this._jsAccessTk = getToken('zlink3rd') || 'DEFAULT_JS_TOKEN';
            this.results = [];
            this._userAgent = getUserAgent();
            this._device = checkPlatform();
            this.isJumped = false;
            _ZaloJSBridge_jumpRunning.set(this, void 0);
            _ZaloJSBridge_cookies.set(this, []);
            _ZaloJSBridge_actionRuntimeInfo.set(this, void 0);
            this.getCookie = (name) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                yield this.jump();
                const cookie = (_a = __classPrivateFieldGet(this, _ZaloJSBridge_cookies, "f")) === null || _a === void 0 ? void 0 : _a.find((cookie) => cookie.name === name);
                return cookie;
            });
            this.getCookieSync = (name) => {
                var _a;
                const cookie = (_a = __classPrivateFieldGet(this, _ZaloJSBridge_cookies, "f")) === null || _a === void 0 ? void 0 : _a.find((cookie) => cookie.name === name);
                return cookie;
            };
            this._jsCallFuncCallbacks = {};
            __classPrivateFieldSet(this, _ZaloJSBridge_actionRuntimeInfo, {}, "f");
            this.events.on(Events.AppPaused, () => {
                if (this.results.length > 0) {
                    let array = this.results;
                    this.results = [];
                    try {
                        this.sendLogData(array);
                    }
                    catch (error) { }
                }
            });
            if (this.sendLogTimer) {
                clearInterval(this.sendLogTimer);
            }
            else {
                this.sendLogTimer = setInterval(() => {
                    if (this.results.length > 0) {
                        let array = this.results;
                        this.results = [];
                        try {
                            this.sendLogData(array);
                        }
                        catch (error) { }
                    }
                }, 5000);
            }
            __classPrivateFieldSet(this, _ZaloJSBridge_jumpRunning, 0, "f");
        }
        static getInstance() {
            if (!ZaloJSBridge.instance) {
                ZaloJSBridge.instance = new ZaloJSBridge();
            }
            return ZaloJSBridge.instance;
        }
        set accessTk(value) {
            this._accessTk = value;
        }
        set jsAccessTk(value) {
            this._jsAccessTk = value;
        }
        jump() {
            return __awaiter(this, void 0, void 0, function* () {
                const _this = this;
                function waiting() {
                    return __awaiter(this, void 0, void 0, function* () {
                        return yield new Promise((resolve) => {
                            const interval = setInterval(() => {
                                if (__classPrivateFieldGet(_this, _ZaloJSBridge_jumpRunning, "f") <= 1 || _this.isJumped) {
                                    resolve('done');
                                    clearInterval(interval);
                                }
                            }, 200);
                        });
                    });
                }
                __classPrivateFieldSet(this, _ZaloJSBridge_jumpRunning, +__classPrivateFieldGet(this, _ZaloJSBridge_jumpRunning, "f") + 1, "f");
                if (__classPrivateFieldGet(this, _ZaloJSBridge_jumpRunning, "f") > 1) {
                    yield waiting();
                }
                return new Promise((resolve, reject) => {
                    if (this.isJumped) {
                        resolve(__classPrivateFieldGet(this, _ZaloJSBridge_cookies, "f"));
                        __classPrivateFieldSet(this, _ZaloJSBridge_jumpRunning, +__classPrivateFieldGet(this, _ZaloJSBridge_jumpRunning, "f") - 1, "f");
                    }
                    else {
                        this.debug('******** call jump ********');
                        this.callNative(ACTION.JUMP_LOGIN, {})
                            .then((data) => {
                            const cookies = (data && data.cookiesOAuthLogins) || [];
                            const actionPermission = (data && data.actionPermission) || [];
                            Object.entries(actionPermission).forEach((item) => {
                                const key = item[0];
                                const value = item[1] || { perm: 0, decode: 0 };
                                if (!__classPrivateFieldGet(this, _ZaloJSBridge_actionRuntimeInfo, "f")[key]) {
                                    __classPrivateFieldGet(this, _ZaloJSBridge_actionRuntimeInfo, "f")[key] = {
                                        permission: false,
                                        support: false
                                    };
                                }
                                __classPrivateFieldGet(this, _ZaloJSBridge_actionRuntimeInfo, "f")[key].permission = value.perm === 1;
                            });
                            const jsToken = cookies.find((cookie) => cookie.name === COOKIE_NAME.JS_TOKEN);
                            if (jsToken) {
                                this.jsAccessTk = jsToken.value;
                                window.ZJSBridge.setJSToken &&
                                    window.ZJSBridge.setJSToken(jsToken.value);
                            }
                            __classPrivateFieldSet(this, _ZaloJSBridge_cookies, cookies, "f");
                            this.isJumped = true;
                            resolve(cookies);
                        })
                            .catch((error) => {
                            this.isJumped = false;
                            reject(error);
                        })
                            .finally(() => {
                            __classPrivateFieldSet(this, _ZaloJSBridge_jumpRunning, +__classPrivateFieldGet(this, _ZaloJSBridge_jumpRunning, "f") - 1, "f");
                        });
                    }
                });
            });
        }
        sendLogData(data) {
            try {
                const logData = data.map((item) => {
                    return {
                        action: item.action,
                        error: item.error,
                        message: item.message,
                        data: item.data
                    };
                });
                CORSRequest.execute(APIS.SEND_ACTION_LOG, 'post', {
                    appId: window.APP_ID,
                    data: JSON.stringify(logData)
                }, (response) => { });
                window.zmpSentry &&
                    window.zmpSentry.captureMessage('Result from native', {
                        extra: {
                            data: data
                        }
                    });
            }
            catch (error) { }
        }
        onJSCall(key, data) {
            try {
                this.debug('onJSCall', key, data);
                const parsedData = parseJSON(data);
                let inputData;
                if (this._jsCallFuncCallbacks[key]) {
                    inputData = this._jsCallFuncCallbacks[key].inputData;
                    const callback = this._jsCallFuncCallbacks[key].callback;
                    const timeout = this._jsCallFuncCallbacks[key].timeout;
                    if (!!callback) {
                        try {
                            callback.call(this, parsedData);
                        }
                        catch (error) {
                            console.error('Call callback error', error);
                        }
                        !!timeout && clearTimeout(timeout);
                        this._jsCallFuncCallbacks[key] = null;
                        delete this._jsCallFuncCallbacks[key];
                    }
                }
                const logData = {
                    action: parsedData.action,
                    error: parsedData.error_code,
                    message: parsedData.error_message,
                    data: {}
                };
                try {
                    if (parsedData.action === ACTION.OPEN_INAPP.name ||
                        parsedData.action === ACTION.OPEN_OUTAPP.name) {
                        const url = new URL(inputData.url);
                        const path = `${url.protocol}//${url.host}${url.pathname}`;
                        logData.data = {
                            url: path
                        };
                    }
                }
                catch (error) { }
                this.results.push(logData);
            }
            catch (e) {
                console.log('onJSCall', 'error', e);
            }
        }
        onMultiJSCall(key, data) {
            try {
                this.debug('onMultiJSCall', key, data);
                const parsedData = parseJSON(data);
                let inputData;
                if (this._jsCallFuncCallbacks[key]) {
                    inputData = this._jsCallFuncCallbacks[key].inputData;
                    const callback = this._jsCallFuncCallbacks[key].callback;
                    const timeout = this._jsCallFuncCallbacks[key].timeout;
                    if (!!callback) {
                        try {
                            callback.call(this, parsedData);
                        }
                        catch (error) {
                            console.error('Call callback error', error);
                        }
                        !!timeout && clearTimeout(timeout);
                    }
                }
                const logData = {
                    action: parsedData.action,
                    error: parsedData.error_code,
                    message: parsedData.error_message,
                    data: {}
                };
                try {
                    if (parsedData.action === ACTION.OPEN_INAPP.name ||
                        parsedData.action === ACTION.OPEN_OUTAPP.name) {
                        const url = new URL(inputData.url);
                        const path = `${url.protocol}//${url.host}${url.pathname}`;
                        logData.data = {
                            url: path
                        };
                    }
                }
                catch (error) { }
                this.results.push(logData);
            }
            catch (e) {
                console.log('onMultiJSCall', 'error', e);
            }
        }
        nativeEventHandler(eventId, eventName, eventData) {
            this.debug(`eventId: ${eventId}, eventName: ${eventName}, eventData: ${eventData}`);
            const data = stringToData(eventData);
            this.debug(data);
            const convertedData = this.handleEventData(eventName, data);
            this.events.emit(eventName, eventId, convertedData);
        }
        handleEventData(eventName, data) {
            try {
                switch (eventName) {
                    case Events.OpenApp:
                        const { url } = data;
                        const validUrl = new URL(url);
                        const path = validUrl.pathname.split(`/zapps/${APP_ID}`)[1];
                        return {
                            path: `${path ? path : '/'}${validUrl.search}`
                        };
                        break;
                    default:
                        return data;
                        break;
                }
            }
            catch (error) {
                return data;
            }
        }
        defaultCallback(data) {
            if (data !== null && data !== undefined) {
                data = parseJSON(data);
            }
        }
        callNative(action, data, option) {
            this.debug(action.name, data);
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                const handleNativeCallback = (cb) => __awaiter(this, void 0, void 0, function* () {
                    var _a, _b, _c, _d, _e, _f, _g, _h;
                    try {
                        if (_.isUndefined(cb) || _.isNull(cb)) {
                            return reject(new Error('Native callback is null'));
                        }
                        if (cb.error_code !== 0) {
                            let error = new AppError(cb.error_code, cb.error_message);
                            const platform = getPlatform();
                            if (action === ACTION.JUMP_LOGIN) {
                                error = new AppError(RESPONSE_CODE.UNKNOWN_ERROR, `Can not get auth code: ${cb.error_message}`);
                            }
                            else if (!this.isJumped && !action.skip_jump) {
                                error = new AppError(RESPONSE.UNAUTHORIZED.code, RESPONSE.UNAUTHORIZED.message);
                            }
                            else if (String(error.message).toLowerCase() === 'permission required!' ||
                                String(error.message).toLowerCase() === 'no permission!') {
                                error = new AppError(RESPONSE.FORBIDDEN.code, RESPONSE.FORBIDDEN.message);
                            }
                            else if (COMMON_NATIVE_ERROR_CODE[platform][cb.error_code]) {
                                error = new AppError(COMMON_NATIVE_ERROR_CODE[platform][cb.error_code].code, COMMON_NATIVE_ERROR_CODE[platform][cb.error_code].message);
                            }
                            else if ((_b = (_a = action.error_list) === null || _a === void 0 ? void 0 : _a[platform]) === null || _b === void 0 ? void 0 : _b[String(cb.error_code)]) {
                                let error_message = action.error_list[platform][String(cb.error_code)].map_to
                                    .message;
                                if ((_e = (_d = (_c = action.error_list) === null || _c === void 0 ? void 0 : _c[platform]) === null || _d === void 0 ? void 0 : _d[String(cb.error_code)]) === null || _e === void 0 ? void 0 : _e.need_more_detail) {
                                    error_message = `${(_h = (_g = (_f = action.error_list) === null || _f === void 0 ? void 0 : _f[platform]) === null || _g === void 0 ? void 0 : _g[String(cb.error_code)]) === null || _h === void 0 ? void 0 : _h.map_to.message}: ${cb.error_message}`;
                                }
                                error = new AppError(action.error_list[platform][String(cb.error_code)].map_to.code, error_message);
                            }
                            return reject(error);
                        }
                        if (option === null || option === void 0 ? void 0 : option.successCallback) {
                            const res = yield option.successCallback(cb.data);
                            return resolve(res);
                        }
                        else {
                            resolve(cb.data || {});
                        }
                    }
                    catch (error) {
                        return reject(error);
                    }
                });
                /**
                 * Check jump status and auto call jump
                 */
                if (!action.skip_jump) {
                    yield this.jump();
                }
                const isIOS = checkPlatform().isIOS;
                const isSupportAction = checkIOSSupportAction(action);
                if (isIOS && !isSupportAction) {
                    const error = new AppError(-5, `Client isn't support this action`);
                    return reject(error);
                }
                else if (option === null || option === void 0 ? void 0 : option.delay) {
                    setTimeout(() => {
                        __classPrivateFieldGet(this, _ZaloJSBridge_instances, "m", _ZaloJSBridge_jsCall).call(this, action, data, handleNativeCallback, option === null || option === void 0 ? void 0 : option.isMultiCallback, option === null || option === void 0 ? void 0 : option.nRetry, option === null || option === void 0 ? void 0 : option.haveTimeout);
                    }, option.delay);
                }
                else {
                    __classPrivateFieldGet(this, _ZaloJSBridge_instances, "m", _ZaloJSBridge_jsCall).call(this, action, data, handleNativeCallback, option === null || option === void 0 ? void 0 : option.isMultiCallback, option === null || option === void 0 ? void 0 : option.nRetry, option === null || option === void 0 ? void 0 : option.haveTimeout);
                }
            }));
        }
    }
    _ZaloJSBridge_jumpRunning = new WeakMap(), _ZaloJSBridge_cookies = new WeakMap(), _ZaloJSBridge_actionRuntimeInfo = new WeakMap(), _ZaloJSBridge_instances = new WeakSet(), _ZaloJSBridge_jsCall = function _ZaloJSBridge_jsCall(action, options, callback, isMultiCallback = false, nRetry = 3, haveTimeout = true) {
        try {
            const actionName = action.name;
            const key = generateUniqueString(actionName);
            if (!this._device.isMobile || _.isEmpty(actionName)) {
                this.onJSCall(key, {
                    error_code: -13,
                    error_message: 'params invalid!',
                    data: {
                        device: this._device.isMobile,
                        jsToken: this._jsAccessTk,
                        access_token: this._accessTk
                    },
                    action: actionName
                });
                return false;
            }
            if (options === undefined || options === null) {
                options = {};
            }
            if (!callback) {
                callback = this.defaultCallback;
            }
            const timeoutCallback = {
                error_code: -14,
                error_message: 'Request Timeout!',
                data: {},
                action: actionName
            };
            this._jsCallFuncCallbacks[key] = {
                inputData: options,
                timeout: haveTimeout &&
                    action.have_callback &&
                    setTimeout(() => {
                        this.onJSCall(key, timeoutCallback);
                    }, 8000),
                callback: callback
            };
            try {
                options = serialize(options);
                if (isMultiCallback) {
                    if (this._device.isIOS) {
                        return ZaloJavaScriptInterface.jsCall(this._jsAccessTk, actionName, this._accessTk, options, window.onMultiJSCall(key));
                    }
                    return ZaloJavaScriptInterface.jsCall(this._jsAccessTk, actionName, this._accessTk, options, `window.onMultiJSCall('${key}')`);
                }
                if (this._device.isIOS) {
                    return ZaloJavaScriptInterface.jsCall(this._jsAccessTk, actionName, this._accessTk, options, window.onJSCall(key));
                }
                return ZaloJavaScriptInterface.jsCall(this._jsAccessTk, actionName, this._accessTk, options, `window.onJSCall('${key}')`);
            }
            catch (error) {
                if (nRetry-- > 0) {
                    setTimeout(() => {
                        __classPrivateFieldGet(this, _ZaloJSBridge_instances, "m", _ZaloJSBridge_jsCall).call(this, action, options, callback, isMultiCallback, nRetry);
                    }, 500);
                }
                else {
                    const errorCallback = {
                        error_code: -5,
                        error_message: 'Not ready!',
                        data: {
                            userAgent: this._userAgent,
                            options: options,
                            jsToken: this._jsAccessTk,
                            access_token: this._accessTk
                        },
                        action: actionName,
                        js_error: error
                    };
                    this.onJSCall(key, errorCallback);
                    return false;
                }
            }
        }
        catch (error) {
            console.log('jsCall', 'error', error);
        }
        return false;
    };

    var _NativeResourceStorage_appId, _NativeResourceStorage_resourceInfo, _NativeResourceStorage_bridge;
    class NativeResourceStorage {
        constructor(appId) {
            _NativeResourceStorage_appId.set(this, void 0);
            _NativeResourceStorage_resourceInfo.set(this, void 0);
            _NativeResourceStorage_bridge.set(this, void 0);
            __classPrivateFieldSet(this, _NativeResourceStorage_resourceInfo, {
                keys: new Set(),
                currentSize: 0,
                limitSize: STORAGE_LIMIT
            }, "f");
            __classPrivateFieldSet(this, _NativeResourceStorage_appId, appId, "f");
            __classPrivateFieldSet(this, _NativeResourceStorage_bridge, ZaloJSBridge.getInstance(), "f");
        }
        get(keys) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _NativeResourceStorage_bridge, "f")
                    .callNative(ACTION.ZBROWSER_MPDS, {
                    mpds_action: 'mpds.get',
                    mpds_data: {
                        keys
                    },
                    appId: __classPrivateFieldGet(this, _NativeResourceStorage_appId, "f")
                }, {
                    isMultiCallback: false
                })
                    .then((data) => {
                    let res = new Map();
                    if (data && data.mpds_data && data.mpds_data.map) {
                        res = new Map(Object.entries(data.mpds_data.map));
                    }
                    return res;
                });
            });
        }
        set(data) {
            return __awaiter(this, void 0, void 0, function* () {
                const errorKeys = yield __classPrivateFieldGet(this, _NativeResourceStorage_bridge, "f")
                    .callNative(ACTION.ZBROWSER_MPDS, {
                    mpds_action: 'mpds.set',
                    mpds_data: {
                        map: data
                    },
                    appId: __classPrivateFieldGet(this, _NativeResourceStorage_appId, "f")
                }, {
                    isMultiCallback: false
                })
                    .then((data) => {
                    let res = [];
                    if (data && data.mpds_data && data.mpds_data.error_keys) {
                        res = data.mpds_data.error_keys;
                    }
                    return res;
                });
                return { errorKeys: errorKeys };
            });
        }
        getInfo() {
            return __awaiter(this, void 0, void 0, function* () {
                const currentSize = yield __classPrivateFieldGet(this, _NativeResourceStorage_bridge, "f")
                    .callNative(ACTION.ZBROWSER_MPDS, {
                    mpds_action: 'mpds.get.size',
                    mpds_data: {},
                    appId: __classPrivateFieldGet(this, _NativeResourceStorage_appId, "f")
                }, {
                    isMultiCallback: false
                })
                    .then((data) => {
                    let res = 0;
                    if (data && data.mpds_data && data.mpds_data.size) {
                        res = data.mpds_data.size;
                    }
                    return res;
                });
                return {
                    currentSize: _.isNumber(currentSize) ? Number(currentSize / 1024) : 0,
                    limitSize: Number(STORAGE_LIMIT / 1024)
                };
            });
        }
        remove(keys) {
            return __awaiter(this, void 0, void 0, function* () {
                const errorKeys = yield __classPrivateFieldGet(this, _NativeResourceStorage_bridge, "f")
                    .callNative(ACTION.ZBROWSER_MPDS, {
                    mpds_action: 'mpds.remove.key',
                    mpds_data: {
                        keys: keys
                    },
                    appId: __classPrivateFieldGet(this, _NativeResourceStorage_appId, "f")
                }, {
                    isMultiCallback: false
                })
                    .then((data) => {
                    let res = [];
                    if (data && data.mpds_data && data.mpds_data.error_keys) {
                        res = data.mpds_data.error_keys;
                    }
                    return res;
                });
                return { errorKeys: errorKeys };
            });
        }
        clear() {
            return __awaiter(this, void 0, void 0, function* () {
                yield __classPrivateFieldGet(this, _NativeResourceStorage_bridge, "f").callNative(ACTION.ZBROWSER_MPDS, {
                    mpds_action: 'mpds.clear.appData',
                    mpds_data: {},
                    appId: __classPrivateFieldGet(this, _NativeResourceStorage_appId, "f")
                });
            });
        }
    }
    _NativeResourceStorage_appId = new WeakMap(), _NativeResourceStorage_resourceInfo = new WeakMap(), _NativeResourceStorage_bridge = new WeakMap();

    var _LocalStorageCreator_appId, _NativeStorageCreator_appId;
    class StorageCreator {
        getDataFromStorage(keys) {
            return __awaiter(this, void 0, void 0, function* () {
                const storage = this.getInstance();
                const data = yield storage.get(keys);
                const res = {};
                data.forEach((value, key) => {
                    res[key] = stringToData(value);
                });
                return res;
            });
        }
        putDataToStorage(data) {
            return __awaiter(this, void 0, void 0, function* () {
                const storage = this.getInstance();
                const inputData = {};
                Object.entries(data).forEach(([key, value]) => {
                    if (!_.isUndefined(value) && !_.isNull(value)) {
                        // inputData[key] = _.isString(value)
                        //   ? value.replace(/"/g, '\\"').replace(/'/g, "&#39;")
                        //   : JSON.stringify(value).replace(/"/g, '\\"').replace(/'/g, "&#39;");
                        inputData[key] = stringifyData(value);
                    }
                });
                return yield storage.set(inputData);
            });
        }
        removeDataFromStorage(keys) {
            return __awaiter(this, void 0, void 0, function* () {
                const storage = this.getInstance();
                return yield storage.remove(keys);
            });
        }
        clearStorage() {
            return __awaiter(this, void 0, void 0, function* () {
                const storage = this.getInstance();
                yield storage.clear();
            });
        }
        getStorageInfo() {
            return __awaiter(this, void 0, void 0, function* () {
                const storage = this.getInstance();
                return yield storage.getInfo();
            });
        }
    }
    class LocalStorageCreator extends StorageCreator {
        constructor(appId) {
            super();
            _LocalStorageCreator_appId.set(this, void 0);
            __classPrivateFieldSet(this, _LocalStorageCreator_appId, appId, "f");
        }
        getInstance() {
            return new LocalResourceStorage(__classPrivateFieldGet(this, _LocalStorageCreator_appId, "f"));
        }
    }
    _LocalStorageCreator_appId = new WeakMap();
    class NativeStorageCreator extends StorageCreator {
        constructor(appId) {
            super();
            _NativeStorageCreator_appId.set(this, void 0);
            __classPrivateFieldSet(this, _NativeStorageCreator_appId, appId, "f");
        }
        getInstance() {
            return new NativeResourceStorage(__classPrivateFieldGet(this, _NativeStorageCreator_appId, "f"));
        }
    }
    _NativeStorageCreator_appId = new WeakMap();

    class DataCaching {
        /**
         * Stores data in the specified key in the local cache.
         * This operation will overwrite the original content of the key.
         *
         * @async
         * @function setStorage
         * @category Data Caching
         *
         * @param {Object} object
         * @param {string} object.key - The specified key in the local cache
         * @param {any} object.data - Contents to be stored can only be native types, dates, and objects that can be serialized via ```JSON.stringify```.
         *
         */
        static setStorage(object) {
            return __awaiter(this, void 0, void 0, function* () {
                let storage = new LocalStorageCreator(this.getAppId());
                if (isSupportNativeStorage()) {
                    storage = new NativeStorageCreator(this.getAppId());
                }
                return yield storage.putDataToStorage(object.data);
            });
        }
        /**
         * Asynchronously gets the content of the specified key from the local cache.
         *
         * @async
         * @function getStorage
         * @category Data Caching
         *
         * @param {Object} object
         * @param {string} object.key - The specified key in the local cache
         *
         */
        static getStorage(object) {
            return __awaiter(this, void 0, void 0, function* () {
                let storage = new LocalStorageCreator(this.getAppId());
                if (isSupportNativeStorage()) {
                    storage = new NativeStorageCreator(this.getAppId());
                }
                const data = yield storage.getDataFromStorage(object.keys);
                return data;
            });
        }
        /**
         * Asynchronously gets the information related to the current storage.
         *
         * @async
         * @function getStorageInfo
         * @category Data Caching
         *
         * @example
         * zmpApis.getStorageInfo().then((res) => {
         *  console.log("Success");
         * }).catch((error) => {
         *  console.log("Fail");
         * });
         *
         * @param {Object} object
         */
        static getStorageInfo(object) {
            return __awaiter(this, void 0, void 0, function* () {
                let storage = new LocalStorageCreator(this.getAppId());
                if (isSupportNativeStorage()) {
                    storage = new NativeStorageCreator(this.getAppId());
                }
                return yield storage.getStorageInfo();
            });
        }
        /**
         * Removes the specified key from the local cache.
         *
         * @async
         * @function removeStorage
         * @category Data Caching
         *
         * @example
         * zmpApis.removeStorage({
         *  key: 'key'
         * }).then((res) => {
         *  console.log("Success");
         * }).catch((error) => {
         *  console.log("Fail");
         * });
         *
         * @param {Object} object
         * @param {string} object.key - The specified key in the local cache
         */
        static removeStorage(object) {
            return __awaiter(this, void 0, void 0, function* () {
                let storage = new LocalStorageCreator(this.getAppId());
                if (isSupportNativeStorage()) {
                    storage = new NativeStorageCreator(this.getAppId());
                }
                return yield storage.removeDataFromStorage(object.keys);
            });
        }
        /**
         * Clears the data cached locally.
         *
         * @async
         * @function clearStorage
         * @category Data Caching
         *
         * @example
         * zmpApis.clearStorage({
         *  prefix: "prefix" // optional
         * }).then((res) => {
         *  console.log("Success");
         * }).catch((error) => {
         *  console.log("Fail");
         * });
         *
         * @param {Object} object
         */
        static clearStorage(option = {}) {
            return __awaiter(this, void 0, void 0, function* () {
                let storage = new LocalStorageCreator(this.getAppId());
                if (isSupportNativeStorage()) {
                    storage = new NativeStorageCreator(this.getAppId());
                }
                yield storage.clearStorage();
            });
        }
    }

    class OpenApi {
        /**
         * Gets user information
         *
         * @async
         * @function getUserInfo
         * @category Open APIs
         *
         * @example
         * zmpApis.getUserInfo().then((res) => {
         *  console.log("Success");
         * }).catch((error) => {
         *  console.log("Fail");
         * });
         *
         */
        static getUserInfo(object) {
            return __awaiter(this, void 0, void 0, function* () {
                const accessToken = yield this.getAccessToken();
                let fields = 'id,name,user_id_by_oa,picture';
                if (object === null || object === void 0 ? void 0 : object.avatarType) {
                    fields = `${fields}.type(${object === null || object === void 0 ? void 0 : object.avatarType})`;
                }
                const userInfo = yield fetch(`${APIS.GET_USER_INFO}?fields=${fields}`, {
                    headers: {
                        access_token: accessToken || ''
                    }
                }).then((response) => __awaiter(this, void 0, void 0, function* () {
                    const resData = yield response.json();
                    const userInfo = {
                        id: resData.id,
                        name: resData.name,
                        avatar: resData.picture && resData.picture.data && resData.picture.data.url,
                        idByOA: resData.user_id_by_oa
                    };
                    console.warn("'birthday' and 'gender' are deprecated");
                    return userInfo;
                }));
                return {
                    userInfo: userInfo
                };
            });
        }
        /**
         * Gets user phone number.
         *
         * @async
         * @function getPhoneNumer
         * @category OpenAPI
         *
         */
        static getPhoneNumber(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this.getJSBridge().callNative(ACTION.MP_GET_NUMBER, {}, {
                    isMultiCallback: true,
                    successCallback: (data) => {
                        const res = {
                            number: data
                        };
                        return Promise.resolve(res);
                    },
                    delay: this.isIOS ? 400 : 0
                });
            });
        }
    }

    class Window {
        /**
         * Force close App.
         *
         * @async
         * @function closeApp
         * @category Window
         *
         */
        static closeApp(object) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.getJSBridge().callNative(ACTION.WINDOW_CLOSE, {});
            });
        }
        /**
         * Open Mini App.
         *
         * @async
         * @function openMiniApp
         * @category Window
         *
         */
        static openMiniApp(object) {
            return __awaiter(this, void 0, void 0, function* () {
                const appId = object === null || object === void 0 ? void 0 : object.appId;
                const params = (object === null || object === void 0 ? void 0 : object.params) || {};
                const queryParamString = Object.entries(params)
                    .map(function ([key, value]) {
                    return [key, value].join('=');
                })
                    .join('&');
                let appInfo;
                try {
                    appInfo = yield getAppInfo(appId, 0);
                }
                catch (error) { }
                const mpInfo = {
                    appId: appId
                };
                if (appInfo) {
                    mpInfo.appName = appInfo.name;
                    mpInfo.appAvtUrl = appInfo.logoUrl;
                }
                yield this.getJSBridge().callNative(ACTION.OPEN_MP, {
                    mpUrl: `${MINI_APP_INTERNAL_LINK}/${appId}/${queryParamString.length > 0 ? '?' + queryParamString : ''}`,
                    mpInfo: mpInfo
                });
            });
        }
        /**
         * Open Webview.
         *
         * @async
         * @function openWebview
         * @category Window
         *
         */
        static openWebview(url) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.getJSBridge().callNative(ACTION.OPEN_INAPP, {
                    url: url
                });
            });
        }
        /**
         * Close loading view.
         *
         * @async
         * @function closeLoading
         * @category Window
         *
         */
        static closeLoading(when) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.getJSBridge().callNative(ACTION.MP_CLOSE_LOADINGVIEW, {
                    at: new Date().getTime(),
                    when: when,
                    url: location.href
                });
            });
        }
    }

    class Location {
        /**
         * Gets current geographic location.
         *
         * @async
         * @function getLocation
         * @category Location
         *
         * @example
         * zmpApis.getLocation().then((res) => {
         *  console.log("Success");
         * }).catch((error) => {
         *  console.log("Fail");
         * });
         *
         */
        static getLocation(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this.getJSBridge().callNative(ACTION.GET_LOCATION, {
                    silent_request: false,
                    permission_description: 'Cho phép Zalo truy cập vào vị trí của thiết bị này?'
                }, {
                    isMultiCallback: true,
                    haveTimeout: false,
                    successCallback: (data) => {
                        const res = {
                            /** latitude */
                            latitude: data.latitude,
                            /** longitude */
                            longitude: data.longitude,
                            /** timestamp */
                            timestamp: data.timestamp,
                            /** provider */
                            provider: data.provider
                        };
                        return Promise.resolve(res);
                    },
                    delay: this.isIOS ? 400 : 0
                });
            });
        }
        /**
         * Send location
         *
         * @async
         * @function sendLocation
         * @category Location
         *
         */
        static sendLocation(object) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.getJSBridge().callNative(ACTION.QUERY_LOCATION_HIDE, {
                    title: object.title,
                    touserid: object.toUserId,
                    zapp: this.getZAppId()
                });
            });
        }
    }

    class Media {
        /**
         * Yêu cầu quyền camera
         *
         * @async
         * @function requestCamera
         * @category Device
         *
         */
        static requestCameraPermission(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this.getJSBridge().callNative(ACTION.REQUEST_PERMISSION_CAMERA, {}, {
                    successCallback: (data) => {
                        return Promise.resolve({
                            userAllow: (data === null || data === void 0 ? void 0 : data['error_code']) >= 0,
                            message: data === null || data === void 0 ? void 0 : data['error_message']
                        });
                    }
                });
            });
        }
        /**
         * Saves images to the system album.
         *
         * @async
         * @function saveImageToPhotosAlbum
         * @category Device
         *
         */
        static saveImageToPhotosAlbum(object) {
            return __awaiter(this, void 0, void 0, function* () {
                let data = {};
                if (!_.isEmpty(object.imageBase64Data)) {
                    data = {
                        imageBase64Data: object.imageBase64Data
                    };
                }
                else if (!_.isEmpty(object.imageUrl)) {
                    data = {
                        imageUrl: object.imageUrl
                    };
                }
                return yield this.getJSBridge().callNative(ACTION.SAVE_IMAGE_GALLERY, Object.assign({}, data));
            });
        }
    }

    class Zalo {
        /**
         * View QR.
         * @async
         * @function viewOAQr
         * @category Zalo
         *
         */
        static viewOAQr(object) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.getJSBridge().callNative(ACTION.VIEW_MYQR, {
                    dpn: object.displayName,
                    uid: object.id,
                    zapp: this.getZAppId()
                }, {
                    haveTimeout: false
                });
            });
        }
        /**
         * Cho phép ứng dụng mở profile của User hoặc Official Account.
         *
         * @async
         * @function openProfile
         * @category Zalo
         *
         */
        static openProfile(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this.getJSBridge().callNative(ACTION.OPEN_PROFILE, {
                    uId: object.id,
                    type: ProfileType[object.type],
                    zapp: this.getZAppId(),
                    sourceId: object.sourceId,
                    sourceIndex: object.sourceIndex
                });
            });
        }
        /**
         * Cho phép ứng dụng mở cửa số chat với User hoặc Official Account.
         *
         * @async
         * @function openChat
         * @category Zalo
         */
        static openChat(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this.getJSBridge().callNative(ACTION.OPEN_CHAT, {
                    uId: object.id,
                    type: ChatType[object.type],
                    msg: object.message || '',
                    zapp: this.getZAppId(),
                    sourceId: object.sourceId,
                    sourceIndex: object.sourceIndex
                });
            });
        }
        /**
         * Cho phép ứng dụng mở giao diện chia sẻ để người dùng chia sẻ thông tin lên nhật ký Zalo.
         *
         * @async
         * @function openPostFeed
         * @category Zalo
         */
        static openPostFeed(object) {
            return __awaiter(this, void 0, void 0, function* () {
                let reqData = {};
                switch (object.type) {
                    case 'image':
                        reqData = {
                            photoUrl: object.data.imageUrl
                        };
                        break;
                    case 'link':
                        reqData = {
                            link: object.data.link,
                            title: object.data.title,
                            thumb: object.data.thumb,
                            description: object.data.description
                        };
                        break;
                    case 'profile':
                        reqData = {
                            avt: object.data.avatar,
                            uid: object.data.id,
                            dpn: object.data.displayName
                        };
                        break;
                }
                return yield this.getJSBridge()
                    .callNative(ACTION.OPEN_POSTFEED, Object.assign(Object.assign({ type: PostFeedType[object.type] }, reqData), { zapp: this.getZAppId() }))
                    .then((res) => {
                    return {
                        status: res.status,
                        shareType: res.share_type,
                        numberOfUser: res.uid_to_size
                    };
                });
            });
        }
        /**
         * Theo dõi Official Account
         *
         * @async
         * @function followOA
         * @category Zalo
         *
         */
        static followOA(object) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.getJSBridge().callNative(ACTION.FOLLOW_OA, {
                    uid: object.id,
                    showDialogConfirm: true,
                    zapp: this.getZAppId()
                }, {
                    haveTimeout: false
                });
            });
        }
        /**
         * Cho phép ứng dụng hiển thị giao diện yêu cầu bỏ theo dõi Official Account để người dùng xác nhận.
         *
         * @async
         * @function unfollowOA
         * @category Zalo
         *
         */
        static unfollowOA(object) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.getJSBridge().callNative(ACTION.UNFOLLOW_OA, {
                    uid: object.id,
                    zapp: this.getZAppId()
                }, {
                    haveTimeout: false
                });
            });
        }
        /**
         * Cho phép ứng dụng mở giao diện chia sẻ để người dùng chia sẻ thông tin với bạn bè Zalo.
         *
         * @async
         * @function openShareSheet
         * @category Zalo
         *
         */
        static openShareSheet(object) {
            return __awaiter(this, void 0, void 0, function* () {
                let reqData = {};
                let type = object.type;
                switch (object.type) {
                    case 'image':
                        let photoUrls = [];
                        const zaloVersion = getZaloVersion();
                        const platform = getPlatform();
                        if (zaloVersion >= ZALO_SUPPORT_SHARE_MULTI_IMAGE_VERSION[platform]) {
                            type = 'multi_image';
                        }
                        if (Array.isArray(object.data.imageUrls) &&
                            object.data.imageUrls.length > 0) {
                            photoUrls = object.data.imageUrls;
                        }
                        else {
                            photoUrls.push(object.data.imageUrl);
                        }
                        reqData = {
                            photoUrls: photoUrls,
                            photoUrl: object.data.imageUrl,
                            caption: object.data.caption
                        };
                        break;
                    case 'gif':
                        reqData = {
                            photoUrl: object.data.imageUrl,
                            gifUrl: object.data.gifUrl,
                            width: object.data.width,
                            height: object.data.height
                        };
                        break;
                    case 'video':
                        reqData = {
                            videoThumb: object.data.videoThumb,
                            videoUrl: object.data.videoUrl,
                            width: object.data.width,
                            height: object.data.height
                        };
                        break;
                    case 'link':
                        reqData = {
                            link: object.data.link,
                            chatOnly: object.data.chatOnly ? 1 : 0
                        };
                        break;
                    case 'oa':
                        reqData = {
                            uid: object.data.id
                        };
                        break;
                    case 'zmp':
                        const accessToken = yield this.getAccessToken();
                        const zmpShareableInfo = yield getZMPShareInfo(this.getAppId(), accessToken || '', object.data.title || '', object.data.description || '', object.data.thumbnail || '', object.data.path);
                        reqData = {
                            data: {
                                ZInstantAPIInfo: {
                                    url: `${zmpShareableInfo.zinstantApi}`,
                                    zinstantdata_id: `templateId=${zmpShareableInfo.ztemplateId}&appId=${this.getAppId()}&shareId=${zmpShareableInfo.shareId}`
                                },
                                previewMsgText: {
                                    msg: {
                                        en: 'Zalo Mini Program',
                                        vi: 'Chương trình nhỏ'
                                    }
                                },
                                enableReactions: 1
                            }
                        };
                }
                return yield this.getJSBridge()
                    .callNative(ACTION.OPEN_SHARESHEET, Object.assign(Object.assign({ type: ShareSheetType[type] }, reqData), { zapp: this.getZAppId() }), {
                    haveTimeout: false
                })
                    .then((res) => {
                    return {
                        status: res.status,
                        shareType: res.share_type,
                        numberOfUser: res.uid_to_size
                    };
                });
            });
        }
        /**
         * Cho phép ứng dụng tạo shortcut trên màn hình chờ. Lưu ý: chỉ hỗ trợ android.
         *
         * @async
         * @function createShortcut
         * @category Zalo
         *
         */
        static createShortcut(url, title, icon) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this.getJSBridge().callNative(ACTION.CREATE_SHORTCUT, {
                    url: url,
                    title: title,
                    iconUrl: icon
                });
            });
        }
        /**
         * Cho phép ứng dụng mở giao diện chọn user và get về list noise id
         *
         * @async
         * @function openProfilePicker
         * @category Zalo
         *
         */
        static openProfilePicker(maxProfile) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this.getJSBridge().callNative(ACTION.MP_OPEN_PROFILE_PICKER, {
                    maxProfile: maxProfile
                }, {
                    isMultiCallback: true,
                    successCallback: (data) => {
                        if (Array.isArray(data)) {
                            return Promise.resolve(data.map((item) => item.id));
                        }
                    }
                });
            });
        }
        /**
         * Lấy danh sách các action hỗ trợ trong phiên bản zalo ios hiện tại
         *
         * @async
         * @function getActionsSupported
         * @category Zalo
         *
         */
        static getActionsSupported(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this.getJSBridge().callNative(ACTION.GET_SUPPORTED_ACTIONS, {}, {
                    isMultiCallback: false,
                    successCallback: (data) => {
                        const platform = getPlatform();
                        if (Array.isArray(data.actions) &&
                            data.actions.length > 0) {
                            const skipJumpActions = Object.keys(ACTION).filter((item) => ACTION[item].skip_jump);
                            const res = {
                                actions: [...data.actions, ...skipJumpActions]
                            };
                            return Promise.resolve(res);
                        }
                        else if (platform === PlatformType.iOS) {
                            const res = {
                                actions: ZALO_IOS_ACTIONS_SUPPORTED_BEFORE_VER_402
                            };
                            return Promise.resolve(res);
                        }
                    }
                });
            });
        }
        /**
         * Cho phép ứng dụng mở giao diện chọn media và get về list media url
         *
         * @async
         * @function openMediaPicker
         * @category Zalo
         *
         */
        static openMediaPicker(type, serverUpload, maxItemSize, editView, silentRequest, maxSelectItem) {
            return __awaiter(this, void 0, void 0, function* () {
                const uploadSetting = {
                    type: 0,
                    url: serverUpload,
                    maxSize: maxItemSize || MEDIA_PICKER_LIMIT
                };
                const defaultEditView = {
                    enable: 1,
                    aspect_ratio: '1:1'
                };
                return yield this.getJSBridge().callNative(ACTION.PICK_MEDIA, {
                    media_type: MediaPickerType[type],
                    edit_view: Object.assign(Object.assign({}, defaultEditView), editView),
                    silent_request: silentRequest,
                    upload: uploadSetting,
                    max_select_items: maxSelectItem
                }, {
                    isMultiCallback: true,
                    successCallback: (data) => {
                        const res = {
                            data: data === null || data === void 0 ? void 0 : data.result_content
                        };
                        return Promise.resolve(res);
                    }
                });
            });
        }
        /**
         * Mở url out app zalo
         *
         * @async
         * @function openOutApp
         * @category Zalo
         *
         */
        static openOutApp(url) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this.getJSBridge().callNative(ACTION.OPEN_OUTAPP, {
                    url: url
                });
            });
        }
    }

    class Routing {
        /**
         * Lấy query params từ url
         *
         * @function getRouteParams
         * @category Routing
         * @param {string} url cần lấy query params
         * @return {SearchParams | null} Object chứa params hoặc null nếu không tìm thấy
         */
        static getRouteParams() {
            let result = {};
            const url = window.location.href;
            try {
                let searchString = new URL(url).searchParams.toString();
                if (searchString) {
                    result = QueryString.getParamsAsObject(searchString);
                }
            }
            catch (err) {
                throw new Error('Url không hợp lệ');
            }
            return result;
        }
        /**
         * Redirect to previous mini app
         * @async
         * @function sendDataToPreviousMiniApp
         * @category Routing
         *
         */
        static sendDataToPreviousMiniApp(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield this.getJSBridge().callNative(ACTION.WEBVIEW_SET_RESULT, {
                    result: stringifyData(object.data)
                });
            });
        }
        /**
         * Listens on the callback data event.
         *
         * @function onCallbackData
         * @category Routing
         *
         * @param {Function} callback - The callback function for the callback data event.
         */
        static onCallbackData(callback) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.events.on(Events.OnDataCallback, (data) => {
                    const res = {
                        data
                    };
                    callback(res);
                });
            });
        }
    }

    var _ZaloMiniProgramSDKService_zAppId, _ZaloMiniProgramSDKService_appId, _ZaloMiniProgramSDKService_appConfig, _ZaloMiniProgramSDKService_zOAuth, _ZaloMiniProgramSDKService_zOAuthVrf, _ZaloMiniProgramSDKService_accessToken, _ZaloMiniProgramSDKService_refreshToken, _ZaloMiniProgramSDKService_cache, _ZaloMiniProgramSDKService_bridge, _ZaloMiniProgramSDKService_prevGetTokenTimestamp, _ZaloMiniProgramSDKService_tokenExpiresIn, _ZaloMiniProgramSDKService_deviceId, _ZaloMiniProgramSDKService_context, _ZaloMiniProgramSDKService_actionBarConfig, _ZaloMiniProgramSDKService_loginRunning, _ZaloMiniProgramSDKService_autoLogin, _ZaloMiniProgramSDKService_getActionsSupported;
    class ZaloMiniProgramSDKService {
        constructor() {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
            _ZaloMiniProgramSDKService_zAppId.set(this, ZAPP_ID);
            _ZaloMiniProgramSDKService_appId.set(this, APP_ID);
            _ZaloMiniProgramSDKService_appConfig.set(this, APP_CONFIG);
            _ZaloMiniProgramSDKService_zOAuth.set(this, void 0);
            _ZaloMiniProgramSDKService_zOAuthVrf.set(this, void 0);
            _ZaloMiniProgramSDKService_accessToken.set(this, void 0);
            _ZaloMiniProgramSDKService_refreshToken.set(this, null);
            _ZaloMiniProgramSDKService_cache.set(this, {
                timer: {
                    getToken: 0
                }
            });
            _ZaloMiniProgramSDKService_bridge.set(this, void 0);
            _ZaloMiniProgramSDKService_prevGetTokenTimestamp.set(this, void 0);
            _ZaloMiniProgramSDKService_tokenExpiresIn.set(this, void 0);
            _ZaloMiniProgramSDKService_deviceId.set(this, void 0);
            _ZaloMiniProgramSDKService_context.set(this, void 0);
            this.events = ZMPEEmitter.getInstance();
            this.isIOS = checkPlatform().isIOS;
            _ZaloMiniProgramSDKService_actionBarConfig.set(this, void 0);
            _ZaloMiniProgramSDKService_loginRunning.set(this, void 0);
            _ZaloMiniProgramSDKService_autoLogin.set(this, void 0);
            this.getActionBarConfig = () => {
                return __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_actionBarConfig, "f");
            };
            this.setActionBarConfig = (setState) => {
                __classPrivateFieldSet(this, _ZaloMiniProgramSDKService_actionBarConfig, setState(__classPrivateFieldGet(this, _ZaloMiniProgramSDKService_actionBarConfig, "f")), "f");
            };
            this.getAuthCode = () => __awaiter(this, void 0, void 0, function* () {
                var _t, _u;
                const authCode = (_t = (yield __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_bridge, "f").getCookie(COOKIE_NAME.ZOAUTH))) === null || _t === void 0 ? void 0 : _t.value;
                const authCodeVerify = (_u = (yield __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_bridge, "f").getCookie(COOKIE_NAME.ZOAUTH_VRF))) === null || _u === void 0 ? void 0 : _u.value;
                return {
                    authCode,
                    authCodeVerify
                };
            });
            this.setAccessToken = (accessToken) => {
                __classPrivateFieldSet(this, _ZaloMiniProgramSDKService_autoLogin, false, "f");
                __classPrivateFieldSet(this, _ZaloMiniProgramSDKService_accessToken, accessToken, "f");
                __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_bridge, "f").accessTk = accessToken;
                window.ZJSBridge.setZAccSession &&
                    window.ZJSBridge.setZAccSession(accessToken);
            };
            this.getVersion = Basics.getVersion;
            this.getSystemInfo = Basics.getSystemInfo;
            this.setNavigationBarTitle = NavigationBar.setNavigationBarTitle;
            this.setNavigationBarColor = NavigationBar.setNavigationBarColor;
            this.setNavigationBarLeftButton = NavigationBar.setNavigationBarLeftButton;
            this.setBackgroundColor = Background.setBackgroundColor;
            this.setDeviceOrientation = Device.setDeviceOrientation;
            this.setStorage = DataCaching.setStorage;
            this.getStorage = DataCaching.getStorage;
            this.getStorageInfo = DataCaching.getStorageInfo;
            this.removeStorage = DataCaching.removeStorage;
            this.clearStorage = DataCaching.clearStorage;
            this.getUserInfo = OpenApi.getUserInfo;
            this.getNetworkType = Device.getNetworkType;
            this.onNetworkStatusChange = Device.onNetworkStatusChange;
            this.startBeaconDiscovery = Device.startBeaconDiscovery;
            this.stopBeaconDiscovery = Device.stopBeaconDiscovery;
            this.getBeacons = Device.getBeacons;
            this.closeApp = Window.closeApp;
            this.getLocation = Location.getLocation;
            this.stopBluetoothDevicesDiscovery = Device.stopBluetoothDevicesDiscovery;
            this.startBluetoothDevicesDiscovery = Device.stopBluetoothDevicesDiscovery;
            this.openBluetoothAdapter = Device.openBluetoothAdapter;
            this.onBluetoothDeviceFound = Device.onBluetoothDeviceFound;
            this.onBluetoothAdapterStateChange = Device.onBluetoothAdapterStateChange;
            this.getConnectedBluetoothDevices = Device.getConnectedBluetoothDevices;
            this.getBluetoothDevices = Device.getBluetoothDevices;
            this.getBluetoothAdapterState = Device.getBluetoothAdapterState;
            this.closeBluetoothAdapter = Device.closeBluetoothAdapter;
            this.scanQRCode = Device.scanQRCode;
            this.openProfile = Zalo.openProfile;
            this.openChat = Zalo.openChat;
            this.openPostFeed = Zalo.openPostFeed;
            this.followOA = Zalo.followOA;
            this.unFollowOA = Zalo.unfollowOA;
            this.openShareSheet = Zalo.openShareSheet;
            this.requestCameraPermission = Media.requestCameraPermission;
            this.createShortcut = Zalo.createShortcut;
            this.openBioAuthentication = Device.openBioAuthentication;
            this.checkStateBioAuthentication = Device.checkStateBioAuthentication;
            this.sendLocation = Location.sendLocation;
            this.showToast = Device.showToast;
            this.hideKeyboard = Device.hideKeyboard;
            this.openPhone = Device.openPhone;
            this.openSMS = Device.openSMS;
            this.viewOAQr = Zalo.viewOAQr;
            this.keepScreen = Device.keepScreen;
            this.saveImageToPhotosAlbum = Media.saveImageToPhotosAlbum;
            this.openMiniApp = Window.openMiniApp;
            this.vibrate = Device.vibrate;
            this.openWebview = Window.openWebview;
            this.getRouteParams = Routing.getRouteParams;
            this.getAppInfo = Basics.getAppInfo;
            this.sendDataToPreviousMiniApp = Routing.sendDataToPreviousMiniApp;
            this.onCallbackData = Routing.onCallbackData;
            this.getPhoneNumber = OpenApi.getPhoneNumber;
            this.openProfilePicker = Zalo.openProfilePicker;
            _ZaloMiniProgramSDKService_getActionsSupported.set(this, Zalo.getActionsSupported);
            this.connectWifi = Device.connectWifi;
            this.openMediaPicker = Zalo.openMediaPicker;
            this.openOutApp = Zalo.openOutApp;
            this.closeLoading = Window.closeLoading;
            this.openAppStore = Device.openAppStore;
            __classPrivateFieldSet(this, _ZaloMiniProgramSDKService_zOAuth, null, "f");
            __classPrivateFieldSet(this, _ZaloMiniProgramSDKService_zOAuthVrf, null, "f");
            __classPrivateFieldSet(this, _ZaloMiniProgramSDKService_accessToken, null, "f");
            this.isShowNavBar = true;
            __classPrivateFieldSet(this, _ZaloMiniProgramSDKService_prevGetTokenTimestamp, new Date().getTime(), "f");
            __classPrivateFieldSet(this, _ZaloMiniProgramSDKService_tokenExpiresIn, 0, "f");
            __classPrivateFieldSet(this, _ZaloMiniProgramSDKService_deviceId, '', "f");
            __classPrivateFieldSet(this, _ZaloMiniProgramSDKService_context, null, "f");
            __classPrivateFieldSet(this, _ZaloMiniProgramSDKService_bridge, ZaloJSBridge.getInstance(), "f");
            __classPrivateFieldSet(this, _ZaloMiniProgramSDKService_loginRunning, 0, "f");
            __classPrivateFieldSet(this, _ZaloMiniProgramSDKService_autoLogin, false, "f");
            const showHomeButton = ((_b = (_a = __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_appConfig, "f")) === null || _a === void 0 ? void 0 : _a.app) === null || _b === void 0 ? void 0 : _b.leftButton) === 'home' ||
                ((_d = (_c = __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_appConfig, "f")) === null || _c === void 0 ? void 0 : _c.app) === null || _d === void 0 ? void 0 : _d.leftButton) === 'both'
                ? ACTION_LEFT_BUTTON_TYPE.SHOW_HOME
                : ACTION_LEFT_BUTTON_TYPE.HIDE_HOME;
            const currentUrl = new URL(location.href);
            const actionBarType = _.isString((_f = (_e = __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_appConfig, "f")) === null || _e === void 0 ? void 0 : _e.app) === null || _f === void 0 ? void 0 : _f.headerColor) &&
                ((_j = (_h = (_g = __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_appConfig, "f")) === null || _g === void 0 ? void 0 : _g.app) === null || _h === void 0 ? void 0 : _h.headerColor) === null || _j === void 0 ? void 0 : _j.length) > 0
                ? SHOW_ACTION_BAR
                : HIDE_ACTION_BAR;
            const leftButtonType = ((_l = (_k = __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_appConfig, "f")) === null || _k === void 0 ? void 0 : _k.app) === null || _l === void 0 ? void 0 : _l.leftButton) === 'none' ||
                ((_o = (_m = __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_appConfig, "f")) === null || _m === void 0 ? void 0 : _m.app) === null || _o === void 0 ? void 0 : _o.leftButton) === 'home'
                ? ACTION_LEFT_BUTTON_TYPE.HIDE_BACK
                : ACTION_LEFT_BUTTON_TYPE.SHOW_BACK;
            __classPrivateFieldSet(this, _ZaloMiniProgramSDKService_actionBarConfig, {
                actionbarType: actionBarType,
                buttonType: leftButtonType,
                dataConfig: {
                    backgroundColor: ((_q = (_p = __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_appConfig, "f")) === null || _p === void 0 ? void 0 : _p.app) === null || _q === void 0 ? void 0 : _q.headerColor) || '',
                    textColor: ((_s = (_r = __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_appConfig, "f")) === null || _r === void 0 ? void 0 : _r.app) === null || _s === void 0 ? void 0 : _s.textColor) || '',
                    viewInLeftType: leftButtonType,
                    confirmToExit: 1
                },
                homeConfig: {
                    enable: showHomeButton,
                    url: `${MINI_APP_INTERNAL_LINK}/${this.getAppId()}/${currentUrl.search}`
                }
            }, "f");
        }
        static getInstance() {
            if (!ZaloMiniProgramSDKService.instance) {
                ZaloMiniProgramSDKService.instance = new ZaloMiniProgramSDKService();
            }
            return ZaloMiniProgramSDKService.instance;
        }
        getLoginStatus() {
            return _.isString(__classPrivateFieldGet(this, _ZaloMiniProgramSDKService_accessToken, "f")) && __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_accessToken, "f").length > 0;
        }
        getAppId() {
            return __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_appId, "f");
        }
        getZAppId() {
            return __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_zAppId, "f");
        }
        getDeviceId() {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                return (_a = (yield __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_bridge, "f").getCookie(COOKIE_NAME.DEVICE_ID))) === null || _a === void 0 ? void 0 : _a.value;
            });
        }
        getDeviceIdSync() {
            var _a;
            return (_a = __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_bridge, "f").getCookieSync(COOKIE_NAME.DEVICE_ID)) === null || _a === void 0 ? void 0 : _a.value;
        }
        getContext() {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                const contextID = (_a = (yield __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_bridge, "f").getCookie(COOKIE_NAME.CONTEXT_ID))) === null || _a === void 0 ? void 0 : _a.value;
                const contextType = (_b = (yield __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_bridge, "f").getCookie(COOKIE_NAME.CONTEXT_TYPE))) === null || _b === void 0 ? void 0 : _b.value;
                return {
                    type: contextType,
                    id: contextID
                };
            });
        }
        getContextSync() {
            var _a, _b;
            const contextID = (_a = __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_bridge, "f").getCookieSync(COOKIE_NAME.CONTEXT_ID)) === null || _a === void 0 ? void 0 : _a.value;
            const contextType = (_b = __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_bridge, "f").getCookieSync(COOKIE_NAME.CONTEXT_TYPE)) === null || _b === void 0 ? void 0 : _b.value;
            return {
                type: contextType,
                id: contextID
            };
        }
        getJSBridge() {
            return __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_bridge, "f");
        }
        login(object) {
            return __awaiter(this, void 0, void 0, function* () {
                __classPrivateFieldSet(this, _ZaloMiniProgramSDKService_autoLogin, true, "f");
                let deltaTime = new Date().getTime() - __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_prevGetTokenTimestamp, "f");
                const _this = this;
                function waiting() {
                    return __awaiter(this, void 0, void 0, function* () {
                        return yield new Promise((resolve) => {
                            const interval = setInterval(() => {
                                if (__classPrivateFieldGet(_this, _ZaloMiniProgramSDKService_loginRunning, "f") <= 1 || __classPrivateFieldGet(_this, _ZaloMiniProgramSDKService_accessToken, "f")) {
                                    resolve('done');
                                    clearInterval(interval);
                                }
                            }, 200);
                        });
                    });
                }
                __classPrivateFieldSet(this, _ZaloMiniProgramSDKService_loginRunning, +__classPrivateFieldGet(this, _ZaloMiniProgramSDKService_loginRunning, "f") + 1, "f");
                if (__classPrivateFieldGet(this, _ZaloMiniProgramSDKService_loginRunning, "f") > 1) {
                    yield waiting();
                }
                deltaTime = new Date().getTime() - __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_prevGetTokenTimestamp, "f");
                if (__classPrivateFieldGet(this, _ZaloMiniProgramSDKService_accessToken, "f") && deltaTime < __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_tokenExpiresIn, "f")) {
                    __classPrivateFieldSet(this, _ZaloMiniProgramSDKService_loginRunning, +__classPrivateFieldGet(this, _ZaloMiniProgramSDKService_loginRunning, "f") - 1, "f");
                    return __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_accessToken, "f");
                }
                const zOAuth = yield (yield this.getAuthCode()).authCode;
                const zOAuthVrf = yield (yield this.getAuthCode()).authCodeVerify;
                if (zOAuth) {
                    __classPrivateFieldSet(this, _ZaloMiniProgramSDKService_zOAuth, zOAuth, "f");
                    if (zOAuthVrf) {
                        __classPrivateFieldSet(this, _ZaloMiniProgramSDKService_zOAuthVrf, zOAuthVrf, "f");
                        yield this.loginZaloV4();
                    }
                    else {
                        yield this.loginZaloV3();
                    }
                    __classPrivateFieldSet(this, _ZaloMiniProgramSDKService_loginRunning, +__classPrivateFieldGet(this, _ZaloMiniProgramSDKService_loginRunning, "f") - 1, "f");
                    if (!__classPrivateFieldGet(this, _ZaloMiniProgramSDKService_accessToken, "f")) {
                        throw apiResponse.error.loginFailed('Invalid authorization code');
                    }
                    return __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_accessToken, "f");
                }
                __classPrivateFieldSet(this, _ZaloMiniProgramSDKService_loginRunning, +__classPrivateFieldGet(this, _ZaloMiniProgramSDKService_loginRunning, "f") - 1, "f");
                throw apiResponse.error.loginFailed('Zalo app has not been activated');
            });
        }
        loginZaloV3() {
            return __awaiter(this, void 0, void 0, function* () {
                return yield fetch(`${APIS.GET_ACCESS_TOKEN_V3}?app_id=${__classPrivateFieldGet(this, _ZaloMiniProgramSDKService_zAppId, "f")}&redirect_uri=${MINI_APP_INTERNAL_LINK}/${__classPrivateFieldGet(this, _ZaloMiniProgramSDKService_appId, "f")}/&code=${__classPrivateFieldGet(this, _ZaloMiniProgramSDKService_zOAuth, "f")}&isSDK=true`).then((response) => __awaiter(this, void 0, void 0, function* () {
                    let resData = yield response.json();
                    if (resData.access_token) {
                        __classPrivateFieldSet(this, _ZaloMiniProgramSDKService_accessToken, resData.access_token, "f");
                        const expiresIn = parseInt(resData.expires_in) * 1000;
                        __classPrivateFieldSet(this, _ZaloMiniProgramSDKService_tokenExpiresIn, expiresIn, "f");
                        __classPrivateFieldSet(this, _ZaloMiniProgramSDKService_prevGetTokenTimestamp, new Date().getTime(), "f");
                        __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_bridge, "f").accessTk = __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_accessToken, "f") || '';
                        window.ZJSBridge.setZAccSession &&
                            window.ZJSBridge.setZAccSession(__classPrivateFieldGet(this, _ZaloMiniProgramSDKService_accessToken, "f") || '');
                        return __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_accessToken, "f");
                    }
                    return null;
                }));
            });
        }
        loginZaloV4() {
            return __awaiter(this, void 0, void 0, function* () {
                const inputData = new URLSearchParams();
                inputData.append('app_id', __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_appId, "f"));
                inputData.append('code', __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_zOAuth, "f") || '');
                inputData.append('code_verifier', __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_zOAuthVrf, "f") || '');
                if (_.isNull(__classPrivateFieldGet(this, _ZaloMiniProgramSDKService_refreshToken, "f"))) {
                    inputData.append('grant_type', 'authorization_code');
                }
                else {
                    inputData.append('grant_type', 'refresh_token');
                    inputData.append('refresh_token', __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_refreshToken, "f") || '');
                }
                const config = {
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    }
                };
                return yield fetch(APIS.GET_ACCESS_TOKEN, Object.assign({ method: 'POST', body: inputData }, config)).then((response) => __awaiter(this, void 0, void 0, function* () {
                    const resData = yield response.json();
                    if (resData.refresh_token) {
                        __classPrivateFieldSet(this, _ZaloMiniProgramSDKService_refreshToken, resData.refresh_token, "f");
                    }
                    if (resData.access_token) {
                        __classPrivateFieldSet(this, _ZaloMiniProgramSDKService_accessToken, resData.access_token, "f");
                        const expiresIn = parseInt(resData.expires_in) * 1000;
                        __classPrivateFieldSet(this, _ZaloMiniProgramSDKService_tokenExpiresIn, expiresIn, "f");
                        __classPrivateFieldSet(this, _ZaloMiniProgramSDKService_prevGetTokenTimestamp, new Date().getTime(), "f");
                        __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_bridge, "f").accessTk = __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_accessToken, "f") || '';
                        window.ZJSBridge.setZAccSession &&
                            window.ZJSBridge.setZAccSession(__classPrivateFieldGet(this, _ZaloMiniProgramSDKService_accessToken, "f") || '');
                        return __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_accessToken, "f");
                    }
                    return null;
                }));
            });
        }
        getAccessToken(object) {
            return __awaiter(this, void 0, void 0, function* () {
                const deltaTime = new Date().getTime() - __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_prevGetTokenTimestamp, "f");
                if (__classPrivateFieldGet(this, _ZaloMiniProgramSDKService_autoLogin, "f")) {
                    if (__classPrivateFieldGet(this, _ZaloMiniProgramSDKService_accessToken, "f") && deltaTime < __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_tokenExpiresIn, "f"))
                        return __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_accessToken, "f");
                    __classPrivateFieldSet(this, _ZaloMiniProgramSDKService_accessToken, '', "f");
                    return yield this.login();
                }
                if (!__classPrivateFieldGet(this, _ZaloMiniProgramSDKService_accessToken, "f")) {
                    throw apiResponse.error.loginRequired();
                }
                return __classPrivateFieldGet(this, _ZaloMiniProgramSDKService_accessToken, "f");
            });
        }
    }
    _ZaloMiniProgramSDKService_zAppId = new WeakMap(), _ZaloMiniProgramSDKService_appId = new WeakMap(), _ZaloMiniProgramSDKService_appConfig = new WeakMap(), _ZaloMiniProgramSDKService_zOAuth = new WeakMap(), _ZaloMiniProgramSDKService_zOAuthVrf = new WeakMap(), _ZaloMiniProgramSDKService_accessToken = new WeakMap(), _ZaloMiniProgramSDKService_refreshToken = new WeakMap(), _ZaloMiniProgramSDKService_cache = new WeakMap(), _ZaloMiniProgramSDKService_bridge = new WeakMap(), _ZaloMiniProgramSDKService_prevGetTokenTimestamp = new WeakMap(), _ZaloMiniProgramSDKService_tokenExpiresIn = new WeakMap(), _ZaloMiniProgramSDKService_deviceId = new WeakMap(), _ZaloMiniProgramSDKService_context = new WeakMap(), _ZaloMiniProgramSDKService_actionBarConfig = new WeakMap(), _ZaloMiniProgramSDKService_loginRunning = new WeakMap(), _ZaloMiniProgramSDKService_autoLogin = new WeakMap(), _ZaloMiniProgramSDKService_getActionsSupported = new WeakMap();

    var _MockSDKService_appId, _MockSDKService_appConfig, _MockSDKService_zOAuth, _MockSDKService_accessToken, _MockSDKService_cache, _MockSDKService_loggedId;
    class MockSDKService {
        constructor() {
            _MockSDKService_appId.set(this, ZAPP_ID);
            _MockSDKService_appConfig.set(this, APP_CONFIG);
            _MockSDKService_zOAuth.set(this, 'DEFAULT ZOAUTH');
            _MockSDKService_accessToken.set(this, 'DEFAULT ACCESS TOKEN');
            _MockSDKService_cache.set(this, {
                timer: {
                    getToken: 0
                }
            });
            _MockSDKService_loggedId.set(this, false);
            this.getLoginStatus = () => {
                return __classPrivateFieldGet(this, _MockSDKService_loggedId, "f");
            };
            this.getAppId = () => {
                return __classPrivateFieldGet(this, _MockSDKService_appId, "f");
            };
            this.getDeviceId = () => __awaiter(this, void 0, void 0, function* () {
                return Promise.resolve('');
            });
            this.getDeviceIdSync = () => {
                return '';
            };
            this.login = () => {
                __classPrivateFieldSet(this, _MockSDKService_loggedId, true, "f");
                return Promise.resolve(__classPrivateFieldGet(this, _MockSDKService_zOAuth, "f"));
            };
            this.getAccessToken = () => {
                return Promise.resolve(__classPrivateFieldGet(this, _MockSDKService_accessToken, "f"));
            };
            this.getVersion = Basics.getVersion;
            this.getSystemInfo = Basics.getSystemInfo;
            this.setNavigationBarTitle = () => {
                return Promise.resolve();
            };
            this.setNavigationBarColor = () => {
                return Promise.resolve();
            };
            this.setBackgroundColor = () => {
                return Promise.resolve();
            };
            this.setNavigationBarLeftButton = () => {
                return Promise.resolve();
            };
            this.setDeviceOrientation = () => {
                return Promise.resolve();
            };
            this.setStorage = (object) => __awaiter(this, void 0, void 0, function* () {
                const storage = new LocalStorageCreator(this.getAppId());
                yield storage.putDataToStorage(object.data);
                return { errorKeys: [] };
            });
            this.getStorage = (object) => __awaiter(this, void 0, void 0, function* () {
                const storage = new LocalStorageCreator(this.getAppId());
                const data = yield storage.getDataFromStorage(object.keys);
                return data;
            });
            this.getStorageInfo = (object) => __awaiter(this, void 0, void 0, function* () {
                const storage = new LocalStorageCreator(this.getAppId());
                return yield storage.getStorageInfo();
            });
            this.removeStorage = (object) => __awaiter(this, void 0, void 0, function* () {
                const storage = new LocalStorageCreator(this.getAppId());
                return yield storage.removeDataFromStorage(object.keys);
            });
            this.clearStorage = (object) => __awaiter(this, void 0, void 0, function* () {
                const storage = new LocalStorageCreator(this.getAppId());
                return yield storage.clearStorage();
            });
            this.getUserInfo = () => {
                console.warn('birthday and gender are deprecated');
                return Promise.resolve({
                    userInfo: {
                        id: '3368637342326461234',
                        name: 'User Name',
                        avatar: 'https://h5.zdn.vn/static/images/avatar.png'
                    }
                });
            };
            this.getNetworkType = () => {
                const connection = navigator.connection ||
                    navigator.mozConnection ||
                    navigator.webkitConnection;
                const type = connection.effectiveType;
                let networkType;
                switch (type) {
                    case 'none':
                        networkType = NetworkType.none;
                        break;
                    case '4g':
                        networkType = NetworkType.wifi;
                        break;
                    case '3g':
                    case '2g':
                        networkType = NetworkType.cellular;
                        break;
                    default:
                        networkType = NetworkType.unknown;
                        break;
                }
                const res = {
                    networkType
                };
                return Promise.resolve(res);
            };
            this.onNetworkStatusChange = (callback) => {
                const connection = navigator.connection ||
                    navigator.mozConnection ||
                    navigator.webkitConnection;
                const type = connection.effectiveType;
                function updateConnectionStatus() {
                    let networkType;
                    switch (type) {
                        case 'none':
                            networkType = NetworkType.none;
                            break;
                        case '4g':
                            networkType = NetworkType.wifi;
                            break;
                        case '3g':
                        case '2g':
                            networkType = NetworkType.cellular;
                            break;
                        default:
                            networkType = NetworkType.unknown;
                            break;
                    }
                    const res = {
                        isConnected: true,
                        networkType: networkType
                    };
                    callback(res);
                }
                connection.addEventListener('change', updateConnectionStatus);
                return Promise.resolve();
            };
            this.startBeaconDiscovery = (object) => {
                return Promise.resolve(true);
            };
            this.stopBeaconDiscovery = (object) => {
                return Promise.resolve(true);
            };
            this.getBeacons = (object) => {
                return Promise.resolve({
                    beacons: []
                });
            };
            this.closeApp = () => {
                return Promise.resolve();
            };
            this.getLocation = () => {
                return Promise.resolve({
                    longitude: '105.788026',
                    latitude: '21.0258773',
                    timestamp: new Date().getTime().toString(),
                    provider: 'fused'
                });
            };
            this.onBackButtonClick = () => {
                return Promise.resolve();
            };
            this.stopBluetoothDevicesDiscovery = () => {
                return Promise.resolve();
            };
            this.startBluetoothDevicesDiscovery = () => {
                return Promise.resolve();
            };
            this.openBluetoothAdapter = () => {
                return Promise.resolve();
            };
            this.onBluetoothDeviceFound = () => {
                return Promise.resolve();
            };
            this.onBluetoothAdapterStateChange = () => {
                return Promise.resolve();
            };
            this.getConnectedBluetoothDevices = () => {
                return Promise.resolve();
            };
            this.getBluetoothDevices = () => {
                return Promise.resolve();
            };
            this.getBluetoothAdapterState = () => {
                return Promise.resolve();
            };
            this.closeBluetoothAdapter = () => {
                return Promise.resolve();
            };
            this.scanQRCode = () => {
                return Promise.resolve({
                    content: '132'
                });
            };
            this.openProfile = () => {
                return Promise.resolve();
            };
            this.openChat = () => {
                return Promise.resolve();
            };
            this.openPostFeed = () => {
                return Promise.resolve({
                    status: 1,
                    shareType: 0,
                    numberOfUser: 0
                });
            };
            this.followOA = () => {
                return Promise.resolve();
            };
            this.unFollowOA = () => {
                return Promise.resolve();
            };
            this.openShareSheet = () => {
                return Promise.resolve({
                    status: 2,
                    shareType: 0,
                    numberOfUser: 0
                });
            };
            this.requestCameraPermission = () => {
                return Promise.resolve({
                    userAllow: true,
                    message: 'Success'
                });
            };
            this.createShortcut = () => {
                return Promise.resolve();
            };
            this.openBioAuthentication = () => {
                return Promise.resolve({
                    code: 0,
                    message: 'OK',
                    data: {
                        domain: '',
                        code: 0,
                        message: '',
                        payToken: ''
                    }
                });
            };
            this.checkStateBioAuthentication = () => {
                return Promise.resolve({
                    bioState: ''
                });
            };
            this.sendLocation = () => {
                return Promise.resolve();
            };
            this.showToast = () => {
                return Promise.resolve();
            };
            this.hideKeyboard = () => {
                return Promise.resolve();
            };
            this.openPhone = () => {
                return Promise.resolve();
            };
            this.openSMS = () => {
                return Promise.resolve();
            };
            this.viewOAQr = () => {
                return Promise.resolve();
            };
            this.keepScreen = () => {
                return Promise.resolve();
            };
            this.saveImageToPhotosAlbum = () => {
                return Promise.resolve();
            };
            this.openMiniApp = (object) => {
                return Promise.resolve();
            };
            this.vibrate = () => {
                return Promise.resolve();
            };
            this.openWebview = (url) => {
                location.replace(url);
                return Promise.resolve();
            };
            this.getRouteParams = Routing.getRouteParams;
            this.getAppInfo = () => {
                return Promise.resolve({
                    description: '',
                    name: '',
                    version: '',
                    appUrl: '',
                    qrCodeUrl: ''
                });
            };
            this.sendDataToPreviousMiniApp = (object) => {
                return Promise.resolve();
            };
            this.onCallbackData = (callback) => {
                const res = {
                    data: ''
                };
                callback(res);
                return Promise.resolve();
            };
            this.getPhoneNumber = () => {
                console.warn('This api only works on zalo app');
                return Promise.resolve({
                    number: ''
                });
            };
            this.openProfilePicker = () => {
                console.warn('This api only works on zalo app');
                return Promise.resolve([]);
            };
            this.connectWifi = () => {
                console.warn('This api only works on zalo app');
                return Promise.resolve();
            };
            this.openOutApp = (url) => {
                location.href = url;
                return Promise.resolve();
            };
            this.closeLoading = (when) => {
                return Promise.resolve();
            };
            this.openAppStore = (data) => {
                return Promise.resolve();
            };
            this.getAuthCode = () => {
                return Promise.resolve({
                    authCode: '',
                    authCodeVerify: ''
                });
            };
        }
        getContext() {
            return __awaiter(this, void 0, void 0, function* () {
                return Promise.resolve(null);
            });
        }
        getContextSync() {
            return null;
        }
        on(event, fn, context) {
            throw new Error('Method not implemented.');
        }
        once(event, fn, context) {
            throw new Error('Method not implemented.');
        }
        off(event, fn, context, once) {
            throw new Error('Method not implemented.');
        }
        removeAllListeners(event) {
            throw new Error('Method not implemented.');
        }
        openMediaPicker(type, serverUpload, maxItemSize, editView, silentRequest, maxSelectItem) {
            console.warn('This api only works on zalo app');
            return Promise.resolve({
                data: ''
            });
        }
        setAccessToken(accessToken) { }
    }
    _MockSDKService_appId = new WeakMap(), _MockSDKService_appConfig = new WeakMap(), _MockSDKService_zOAuth = new WeakMap(), _MockSDKService_accessToken = new WeakMap(), _MockSDKService_cache = new WeakMap(), _MockSDKService_loggedId = new WeakMap();

    const requiredMetadataKey = Symbol('required');
    const checkTypeMetadataKey = Symbol('checkType');
    const required = (fields, option) => (target, propertyKey, parameterIndex) => {
        let existingRequiredParameters = Reflect.getOwnMetadata(requiredMetadataKey, target, propertyKey) || [];
        existingRequiredParameters.push({
            parameterIndex: parameterIndex,
            fields: fields,
            option
        });
        Reflect.defineMetadata(requiredMetadataKey, existingRequiredParameters, target, propertyKey);
    };
    const checkType = (type, properties, defaultValue) => (target, propertyKey, parameterIndex) => {
        let existingTypeCheckParameters = Reflect.getOwnMetadata(checkTypeMetadataKey, target, propertyKey) || [];
        existingTypeCheckParameters.push({
            parameterIndex: parameterIndex,
            type: type,
            properties: properties,
            defaultValue: defaultValue
        });
        Reflect.defineMetadata(checkTypeMetadataKey, existingTypeCheckParameters, target, propertyKey);
    };
    function getFnParamNames(fn) {
        var fstr = fn.toString();
        return fstr
            .match(/\(.*?\)/)[0]
            .replace(/[()]/gi, '')
            .replace(/\s/gi, '')
            .split(',');
    }
    /**
     * Copies all metadata from one object to another.
     * Useful for overwriting function definition in
     * decorators while keeping all previously
     * attached metadata
     *
     * @param from object to copy metadata from
     * @param to object to copy metadata to
     */
    function copyMetadata(from, to) {
        const metadataKeys = Reflect.getMetadataKeys(from);
        metadataKeys.map((key) => {
            const value = Reflect.getMetadata(key, from);
            Reflect.defineMetadata(key, value, to);
        });
    }
    /**
     * Apply the given decorator to all class methods
     *
     * @param decorator Method decorator to apply to all methods of a class
     * @param {string[]} options.exclude array of method names that won't be decorated
     * @param {boolean} options.deep if true, also decorates methods of the extended classes (recusrively)
     */
    const DecorateAll = (decorator, options = {}) => {
        return (target) => {
            var _a;
            let descriptors = Object.getOwnPropertyDescriptors(target.prototype);
            if (options.deep) {
                let base = Object.getPrototypeOf(target);
                while (base.prototype) {
                    const baseDescriptors = Object.getOwnPropertyDescriptors(base.prototype);
                    descriptors = Object.assign(Object.assign({}, baseDescriptors), descriptors);
                    base = Object.getPrototypeOf(base);
                }
            }
            for (const [propName, descriptor] of Object.entries(descriptors)) {
                const isMethod = typeof descriptor.value == 'function' && propName != 'constructor';
                if ((_a = options.exclude) === null || _a === void 0 ? void 0 : _a.includes(propName))
                    continue;
                if (options.excludePrefix && propName.startsWith(options.excludePrefix))
                    continue;
                if (!isMethod)
                    continue;
                const originalMethod = descriptor.value;
                decorator(target, propName, descriptor);
                if (originalMethod != descriptor.value) {
                    copyMetadata(originalMethod, descriptor.value);
                }
                Object.defineProperty(target.prototype, propName, descriptor);
            }
        };
    };
    const centralizedFunctionHandler = (target, propertyName, descriptor) => {
        const fn = descriptor.value;
        const argsName = getFnParamNames(fn);
        descriptor.value = function (...args) {
            try {
                // begin validation
                const requiredParameters = Reflect.getOwnMetadata(requiredMetadataKey, target.prototype, propertyName);
                const checkTypeParameters = Reflect.getOwnMetadata(checkTypeMetadataKey, target.prototype, propertyName);
                if (checkTypeParameters) {
                    checkTypeParameters.forEach((parameter) => {
                        const { parameterIndex, type, properties, defaultValue } = parameter;
                        let argument = args[parameterIndex];
                        let argumentName = argsName[parameterIndex];
                        const parameterType = typeof argument;
                        if (!_.isUndefined(argument)) {
                            if (!isType(argument, type)) {
                                throw apiResponse.error.wrongTypeParam(argumentName, type, Array.isArray(argument)
                                    ? 'array'
                                    : argument === null
                                        ? 'null'
                                        : parameterType);
                            }
                            if (type === 'object') {
                                Object.entries(properties).forEach(([propKey, propType]) => {
                                    const key = propKey.split('?')[0];
                                    const propValue = _.get(argument, key);
                                    if (!_.isUndefined(propValue) && !_.isNull(propValue)) {
                                        if (_.isFunction(propType)) {
                                            const res = propType(propValue);
                                            if (res && res.error) {
                                                throw apiResponse.error.wrongTypeParam(`${argumentName}.${key}`, res.errorMessage, typeof propValue);
                                            }
                                        }
                                    }
                                    else if (!propKey.includes('?')) {
                                        throw apiResponse.error.missingParam(propKey);
                                    }
                                    else if (!_.get(argument, key.split('.')[0]) &&
                                        defaultValue &&
                                        !_.isUndefined(_.get(defaultValue, key))) {
                                        _.set(args[parameterIndex], key, _.get(defaultValue, key));
                                    }
                                });
                            }
                        }
                    });
                }
                if (requiredParameters) {
                    requiredParameters.forEach((parameter) => {
                        const { parameterIndex, option, fields } = parameter;
                        const argument = args[parameterIndex];
                        const condition = option === null || option === void 0 ? void 0 : option.if;
                        const defaultValue = option === null || option === void 0 ? void 0 : option.defaultValue;
                        let isMeetCondition = true;
                        if (condition) {
                            isMeetCondition = Object.keys(condition).every((key) => _.get(argument, key) === condition[key]);
                        }
                        if (isMeetCondition) {
                            fields.forEach((item) => {
                                const isInValidField = (field) => {
                                    let isInValid = false;
                                    if (_.isEmpty(_.get(argument, field))) {
                                        if (!_.isUndefined(_.get(defaultValue, field))) {
                                            _.set(args[parameterIndex], field, _.get(defaultValue, field));
                                        }
                                        isInValid = true;
                                    }
                                    return isInValid;
                                };
                                if (Array.isArray(item) &&
                                    item.length > 0 &&
                                    item.every(isInValidField)) {
                                    throw apiResponse.error.missingParam(item.join(' or '));
                                }
                                else if (_.isString(item) && isInValidField(item)) {
                                    throw apiResponse.error.missingParam(item);
                                }
                            });
                        }
                    });
                }
                // end validation
                const res = fn.call(this, ...args);
                if (_.isPromise(res)) {
                    const { success, fail } = Array.isArray(args) && args.length > 0 && args[0];
                    return new Promise((resolve, reject) => {
                        res
                            .then((data) => {
                            if (!_.isNull(success) && _.isFunction(success)) {
                                success.call(null, data, this);
                            }
                            else {
                                resolve(res);
                            }
                        })
                            .catch((error) => {
                            const errorParsed = errorHandler(error, propertyName);
                            if (!_.isNull(fail) && _.isFunction(fail)) {
                                fail.call(null, errorParsed, this);
                            }
                            else {
                                reject(errorParsed);
                            }
                        });
                    });
                }
                return res;
            }
            catch (error) {
                throw errorHandler(error, propertyName);
            }
        };
        return descriptor;
    };

    var _SDKCreator_sdkService;
    let SDKCreator = class SDKCreator {
        constructor() {
            this.events = ZMPEEmitter.getInstance();
            _SDKCreator_sdkService.set(this, void 0);
            __classPrivateFieldSet(this, _SDKCreator_sdkService, this.getServiceInstance(), "f");
            this.events.addListener = (event, fn, context) => {
                const stringifyEventName = event;
                return this.events.addListener(Events[stringifyEventName], fn, context);
            };
        }
        /**
         * Login to call more action.
         *
         * @async
         * @function Login
         * @category Authentication
         *
         * @example
         * zmpApis.login().then((res) => {
         *  console.log("Success");
         * }).catch((error) => {
         *  console.log("Fail");
         * });
         *
         */
        login(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").login(object);
            });
        }
        getLoginStatus() {
            return __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").getLoginStatus();
        }
        /**
         * Get Access Token.
         *
         * @async
         * @function getAccessToken
         * @category Authentication
         *
         * @example
         * zmpApis.getAccessToken().then((res) => {
         *  console.log("Success");
         * }).catch((error) => {
         *  console.log("Fail");
         * });
         *
         */
        getAccessToken(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").getAccessToken(object);
            });
        }
        getVersion() {
            return __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").getVersion();
        }
        getSystemInfo() {
            return __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").getSystemInfo();
        }
        setNavigationBarTitle(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").setNavigationBarTitle(object);
            });
        }
        setNavigationBarColor(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").setNavigationBarColor(object);
            });
        }
        setBackgroundColor(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").setBackgroundColor(object);
            });
        }
        setNavigationBarLeftButton(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").setNavigationBarLeftButton(object.type);
            });
        }
        setDeviceOrientation(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").setDeviceOrientation(object);
            });
        }
        setStorage(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").setStorage(object);
            });
        }
        getStorage(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").getStorage(object);
            });
        }
        getStorageInfo(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").getStorageInfo(object);
            });
        }
        removeStorage(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").removeStorage(object);
            });
        }
        clearStorage(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").clearStorage(object);
            });
        }
        getUserInfo(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").getUserInfo(object);
            });
        }
        getNetworkType(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").getNetworkType(object);
            });
        }
        onNetworkStatusChange(callback) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").onNetworkStatusChange(callback);
            });
        }
        startBeaconDiscovery(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").startBeaconDiscovery(object);
            });
        }
        stopBeaconDiscovery(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").stopBeaconDiscovery(object);
            });
        }
        getBeacons(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").getBeacons(object);
            });
        }
        closeApp(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").closeApp(object);
            });
        }
        getLocation(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").getLocation(object);
            });
        }
        stopBluetoothDevicesDiscovery() {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").stopBluetoothDevicesDiscovery();
            });
        }
        startBluetoothDevicesDiscovery(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").startBluetoothDevicesDiscovery(object);
            });
        }
        openBluetoothAdapter() {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").openBluetoothAdapter();
            });
        }
        onBluetoothDeviceFound() {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").onBluetoothDeviceFound();
            });
        }
        onBluetoothAdapterStateChange() {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").onBluetoothAdapterStateChange();
            });
        }
        getConnectedBluetoothDevices(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").getConnectedBluetoothDevices(object);
            });
        }
        getBluetoothDevices() {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").getBluetoothDevices();
            });
        }
        getBluetoothAdapterState() {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").getBluetoothAdapterState();
            });
        }
        closeBluetoothAdapter() {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").closeBluetoothAdapter();
            });
        }
        scanQRCode(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").scanQRCode(object);
            });
        }
        openProfile(object) {
            return __awaiter(this, void 0, void 0, function* () {
                yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").openProfile(object);
            });
        }
        openChat(object) {
            return __awaiter(this, void 0, void 0, function* () {
                yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").openChat(object);
            });
        }
        openPostFeed(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").openPostFeed(object);
            });
        }
        followOA(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").followOA(object);
            });
        }
        unfollowOA(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").unFollowOA(object);
            });
        }
        openShareSheet(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").openShareSheet(object);
            });
        }
        requestCameraPermission(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").requestCameraPermission(object);
            });
        }
        createShortcut(object) {
            return __awaiter(this, void 0, void 0, function* () {
                const appInfo = yield getAppInfo(APP_ID, 0);
                const isIOS = checkPlatform().isIOS;
                const iconURL = appInfo.logoUrl || getMetaValue('og:image:url') || '';
                const title = appInfo.name || document.title;
                const searchParams = object.params
                    ? new URLSearchParams(object.params)
                    : new URLSearchParams();
                searchParams.append('utm_source', 'zalo-shortcut');
                searchParams.append('utm_medium', 'default');
                searchParams.append('utm_campaign', 'default');
                if (isIOS) {
                    searchParams.append('appId', APP_ID);
                    searchParams.append('appName', title);
                    searchParams.append('appIcon', iconURL);
                    const iosShortcutURL = `https://mini.zalo.me/shortcut.html?${searchParams.toString()}`;
                    yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").openOutApp(encodeURI(iosShortcutURL));
                }
                else {
                    yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").createShortcut(`${MINI_APP_LINK}/${APP_ID}/?${searchParams.toString()}`, title, iconURL);
                }
                return apiResponse.success();
            });
        }
        openBioAuthentication(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").openBioAuthentication(object);
            });
        }
        checkStateBioAuthentication(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").checkStateBioAuthentication(object);
            });
        }
        sendLocation(object) {
            return __awaiter(this, void 0, void 0, function* () {
                yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").sendLocation(object);
            });
        }
        showToast(object) {
            return __awaiter(this, void 0, void 0, function* () {
                yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").showToast(object);
            });
        }
        hideKeyboard(object) {
            return __awaiter(this, void 0, void 0, function* () {
                yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").hideKeyboard(object);
            });
        }
        openPhone(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").openPhone(object);
            });
        }
        openSMS(object) {
            return __awaiter(this, void 0, void 0, function* () {
                yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").openSMS(object);
            });
        }
        viewOAQr(object) {
            return __awaiter(this, void 0, void 0, function* () {
                yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").viewOAQr(object);
            });
        }
        keepScreen(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").keepScreen(object);
            });
        }
        saveImageToGallery(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").saveImageToPhotosAlbum(object);
            });
        }
        saveImageToPhotosAlbum(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").saveImageToPhotosAlbum(object);
            });
        }
        openMiniApp(object) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!_.isEmpty(object.params)) {
                    const params = object.params || {};
                    Object.keys(params).forEach((k) => {
                        if (typeof params[k] === 'object') {
                            params[k] = JSON.stringify(params[k]);
                        }
                        params[k] = '' + encodeURIComponent(params[k]);
                    });
                    object.params = params;
                }
                yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").openMiniApp(object);
            });
        }
        vibrate(object) {
            return __awaiter(this, void 0, void 0, function* () {
                yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").vibrate(object);
            });
        }
        openWebview(object) {
            return __awaiter(this, void 0, void 0, function* () {
                const url = new URL(object.url);
                const isVNPayLink = url.href.includes("vnpay");
                const typeInapp = url.searchParams.get('typeInapp');
                if (!isVNPayLink && _.isEmpty(typeInapp)) {
                    url.searchParams.set('typeInapp', '1');
                }
                yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").openWebview(url.href);
            });
        }
        getRouteParams() {
            return __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").getRouteParams();
        }
        getAppInfo(object) {
            return __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").getAppInfo();
        }
        sendDataToPreviousMiniApp(object) {
            return __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").sendDataToPreviousMiniApp(object);
        }
        onCallbackData(callback) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").onCallbackData(callback);
            });
        }
        getPhoneNumber(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").getPhoneNumber();
            });
        }
        openProfilePicker(object) {
            return __awaiter(this, void 0, void 0, function* () {
                const uIds = yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").openProfilePicker(object.maxProfile);
                let users;
                if (uIds.length > 0) {
                    try {
                        const accessToken = yield this.getAccessToken();
                        // const response = await axios.post(
                        //   CONT.APIS.GET_LIST_USER_INFO,
                        //   {
                        //     fields: 'id,name,picture',
                        //     user_ids: uIds
                        //   },
                        //   {
                        //     headers: {
                        //       'Content-Type': 'application/json',
                        //       access_token: accessToken
                        //     }
                        //   }
                        // );
                        const response = yield fetch(APIS.GET_LIST_USER_INFO, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                access_token: accessToken || ''
                            },
                            body: JSON.stringify({
                                fields: 'id,name,picture',
                                user_ids: uIds
                            })
                        });
                        const resData = yield response.json();
                        if (resData.error === 0 && resData.data) {
                            users = uIds.map((item) => {
                                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
                                return {
                                    id: ((_b = (_a = resData.data[item]) === null || _a === void 0 ? void 0 : _a.user_info) === null || _b === void 0 ? void 0 : _b.user_id_by_app) || '',
                                    profile: {
                                        name: (_d = (_c = resData.data[item]) === null || _c === void 0 ? void 0 : _c.user_info) === null || _d === void 0 ? void 0 : _d.name,
                                        avatar: (_h = (_g = (_f = (_e = resData.data[item]) === null || _e === void 0 ? void 0 : _e.user_info) === null || _f === void 0 ? void 0 : _f.picture) === null || _g === void 0 ? void 0 : _g.data) === null || _h === void 0 ? void 0 : _h.url
                                    },
                                    code: ((_j = resData.data[item]) === null || _j === void 0 ? void 0 : _j.error) !== 0 ? -1 : 0,
                                    message: `Get profile: ${_.isUndefined((_k = resData.data[item]) === null || _k === void 0 ? void 0 : _k.message)
                                    ? 'Unknown error'
                                    : (_l = resData.data[item]) === null || _l === void 0 ? void 0 : _l.message}`
                                };
                            });
                        }
                        else {
                            throw new Error(resData.message);
                        }
                    }
                    catch (error) {
                        users = uIds.map((item) => {
                            return {
                                id: item,
                                profile: {
                                    name: '',
                                    avatar: ''
                                },
                                code: -1,
                                message: `Can't get profile: ${error.message}`
                            };
                        });
                    }
                }
                return {
                    users: users || []
                };
            });
        }
        connectWifi(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").connectWifi(object);
            });
        }
        openMediaPicker(object) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function* () {
                const editView = {};
                if (_.isUndefined((_a = object.editView) === null || _a === void 0 ? void 0 : _a.enable) || ((_b = object.editView) === null || _b === void 0 ? void 0 : _b.enable)) {
                    editView.enable = 1;
                }
                else {
                    editView.enable = 0;
                }
                editView.aspect_ratio = (_c = object.editView) === null || _c === void 0 ? void 0 : _c.aspectRatio;
                const silentRequest = object.silentRequest === true ? 1 : 0;
                const maxSelectItem = object.maxSelectItem;
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").openMediaPicker(object.type, object.serverUploadUrl, object.maxItemSize, editView, silentRequest, maxSelectItem);
            });
        }
        getShareableLink(object) {
            return __awaiter(this, void 0, void 0, function* () {
                const accessToken = yield this.getAccessToken();
                const zmpShareableInfo = yield getZMPShareInfo(window.APP_ID, accessToken || '', object.title, object.description, object.thumbnail, object.path);
                return zmpShareableInfo.shareableLink;
            });
        }
        closeLoading(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").closeLoading('user action');
            });
        }
        requestUpdateZalo(object) {
            return __awaiter(this, void 0, void 0, function* () {
                const appStoreURL = checkPlatform().isIOS
                    ? 'https://apps.apple.com/vn/app/zalo/id579523206'
                    : 'https://play.google.com/store/apps/details?id=com.zing.zalo';
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").openOutApp(appStoreURL);
            });
        }
        onConfirmToExit(callback) {
            this.events.on(Events.AppClose, callback, '{"handle_h5": 1}');
            __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").setNavigationBarLeftButton(undefined, 2);
        }
        offConfirmToExit() {
            this.events.off(Events.AppClose);
            __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").setNavigationBarLeftButton(undefined, 0);
        }
        getDeviceId() {
            return __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").getDeviceIdSync();
        }
        getDeviceIdAsync(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").getDeviceId();
            });
        }
        getContext() {
            return __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").getContextSync();
        }
        getContextAsync(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").getContext();
            });
        }
        getAuthCode(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").getAuthCode();
            });
        }
        setAccessToken(accessToken) {
            return __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").setAccessToken(accessToken);
        }
        openOutApp(object) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield __classPrivateFieldGet(this, _SDKCreator_sdkService, "f").openOutApp(encodeURI(object.url));
            });
        }
    };
    _SDKCreator_sdkService = new WeakMap();
    __decorate([
        __param(0, checkType('object', {
            title: checkData('string')
        }))
    ], SDKCreator.prototype, "setNavigationBarTitle", null);
    __decorate([
        __param(0, checkType('object', {
            color: checkData('string'),
            'textColor?': checkData('string', { values: ['white', 'black'] }),
            'statusBarColor?': checkData('string')
        }))
    ], SDKCreator.prototype, "setNavigationBarColor", null);
    __decorate([
        __param(0, checkType('object', {
            backgroundColor: checkData('string'),
            'textColor?': checkData('string', { values: ['white', 'black'] })
        }))
    ], SDKCreator.prototype, "setBackgroundColor", null);
    __decorate([
        __param(0, checkType('object', {
            type: checkData('string', { values: ['none', 'back', 'home', 'both'] })
        }))
    ], SDKCreator.prototype, "setNavigationBarLeftButton", null);
    __decorate([
        __param(0, checkType('object', {
            rotate: checkData('string', { values: ['auto', 'portrait', 'landscape'] })
        }))
    ], SDKCreator.prototype, "setDeviceOrientation", null);
    __decorate([
        __param(0, checkType('object', {
            data: checkData('object')
        }))
    ], SDKCreator.prototype, "setStorage", null);
    __decorate([
        __param(0, checkType('object', {
            keys: checkData('array<string>')
        }))
    ], SDKCreator.prototype, "getStorage", null);
    __decorate([
        __param(0, checkType('object', {
            keys: checkData('array<string>')
        }))
    ], SDKCreator.prototype, "removeStorage", null);
    __decorate([
        __param(0, checkType('object', {
            'avatarType?': checkData('string', {
                values: ['small', 'normal', 'large']
            })
        }))
    ], SDKCreator.prototype, "getUserInfo", null);
    __decorate([
        __param(0, checkType('object', {
            type: checkData('string', { values: ['user', 'oa', 'aliasOA'] }),
            id: checkData('string')
        }))
    ], SDKCreator.prototype, "openProfile", null);
    __decorate([
        __param(0, checkType('object', {
            type: checkData('string', { values: ['user', 'oa'] }),
            id: checkData('string'),
            'message?': checkData('string')
        }))
    ], SDKCreator.prototype, "openChat", null);
    __decorate([
        __param(0, required(['data.imageUrl'], { if: { type: 'image' } })),
        __param(0, required(['data.link'], { if: { type: 'link' } })),
        __param(0, required(['data.id'], { if: { type: 'profile' } })),
        __param(0, checkType('object', {
            type: checkData('string', { values: ['image', 'link', 'profile'] }),
            data: checkData('object'),
            'data.imageUrl?': checkData('url'),
            'data.link?': checkData('url'),
            'data.title?': checkData('string'),
            'data.thumb?': checkData('url'),
            'data.description?': checkData('string'),
            'data.avatar?': checkData('url'),
            'data.id?': checkData('string'),
            'data.displayName?': checkData('string')
        }))
    ], SDKCreator.prototype, "openPostFeed", null);
    __decorate([
        __param(0, checkType('object', {
            id: checkData('string'),
            'showDialogConfirm?': checkData('boolean')
        }))
    ], SDKCreator.prototype, "followOA", null);
    __decorate([
        __param(0, checkType('object', {
            id: checkData('string')
        }))
    ], SDKCreator.prototype, "unfollowOA", null);
    __decorate([
        __param(0, required([['data.imageUrl', 'data.imageUrls']], { if: { type: 'image' } })),
        __param(0, required(['data.link'], { if: { type: 'link' } })),
        __param(0, required(['data.id'], { if: { type: 'oa' } })),
        __param(0, required(['data.gifUrl'], { if: { type: 'gif' } })),
        __param(0, required(['data.videoThumb', 'data.videoUrl'], { if: { type: 'video' } })),
        __param(0, required(['data.thumbnail', 'data.title', 'data.description'], {
            if: { type: 'zmp' },
            defaultValue: {
                data: {
                    description: ''
                }
            }
        })),
        __param(0, checkType('object', {
            type: checkData('string', {
                values: ['image', 'gif', 'video', 'link', 'oa', 'zmp']
            }),
            data: checkData('object'),
            'data.imageUrl?': checkData('url'),
            'data.imageUrls?': checkData('array<url>', { maxLength: 10 }),
            'data.caption?': checkData('string'),
            'data.gifUrl?': checkData('url'),
            'data.width?': checkData('number'),
            'data.height?': checkData('number'),
            'data.videoThumb?': checkData('url'),
            'data.videoUrl?': checkData('url'),
            'data.link?': checkData('url'),
            'data.chatOnly?': checkData('boolean'),
            'data.id?': checkData('string'),
            'data.thumbnail?': checkData('url'),
            'data.path?': checkData('string'),
            'data.title?': checkData('string', { maxLength: 100 }),
            'data.description?': checkData(['string'], {
                maxLength: 400
            })
        }))
    ], SDKCreator.prototype, "openShareSheet", null);
    __decorate([
        __param(0, checkType('object', {
            secretData: checkData('string'),
            'ui?': checkData('object'),
            'ui.title?': checkData('string'),
            'ui.subTitle?': checkData('string'),
            'ui.negativeButtonText?': checkData('string'),
            'requireFingerprint?': checkData('boolean')
        }, {
            requireFingerprint: true,
            ui: {
                title: 'Xác thực',
                subTitle: 'Sử dụng sinh trắc học của bạn để xác thực',
                negativeButtonText: 'Đóng'
            }
        }))
    ], SDKCreator.prototype, "openBioAuthentication", null);
    __decorate([
        __param(0, checkType('object', {
            toUserId: checkData('string'),
            'title?': checkData('string')
        }))
    ], SDKCreator.prototype, "sendLocation", null);
    __decorate([
        __param(0, checkType('object', {
            message: checkData('string')
        }))
    ], SDKCreator.prototype, "showToast", null);
    __decorate([
        __param(0, checkType('object', {
            phoneNumber: checkData('string')
        }))
    ], SDKCreator.prototype, "openPhone", null);
    __decorate([
        __param(0, checkType('object', {
            content: checkData('string'),
            phoneNumber: checkData('string', { regex: /^\+?\d+$/ })
        }))
    ], SDKCreator.prototype, "openSMS", null);
    __decorate([
        __param(0, checkType('object', {
            id: checkData('string'),
            'displayName?': checkData('string')
        }, {
            displayName: ''
        }))
    ], SDKCreator.prototype, "viewOAQr", null);
    __decorate([
        __param(0, checkType('object', {
            'imageBase64Data?': checkData('string'),
            'imageUrl?': checkData('url')
        }))
    ], SDKCreator.prototype, "saveImageToGallery", null);
    __decorate([
        __param(0, checkType('object', {
            'imageBase64Data?': checkData('string'),
            'imageUrl?': checkData('url')
        }))
    ], SDKCreator.prototype, "saveImageToPhotosAlbum", null);
    __decorate([
        __param(0, checkType('object', {
            appId: checkData('string'),
            'params?': checkData('object')
        }))
    ], SDKCreator.prototype, "openMiniApp", null);
    __decorate([
        __param(0, checkType('object', {
            'type?': checkData('string', { values: ['oneShot'] }),
            'milliseconds?': checkData('number')
        }, {
            type: 'oneShot',
            milliseconds: 500
        }))
    ], SDKCreator.prototype, "vibrate", null);
    __decorate([
        __param(0, checkType('object', {
            url: checkData('url')
        }))
    ], SDKCreator.prototype, "openWebview", null);
    __decorate([
        __param(0, checkType('object', {
            'maxProfile?': checkData('number', { min: 1, max: 10 })
        }, {
            maxProfile: 1
        }))
    ], SDKCreator.prototype, "openProfilePicker", null);
    __decorate([
        __param(0, required(['SSID'])),
        __param(0, checkType('object', {
            SSID: checkData('string'),
            'password?': checkData('string'),
            'hiddenSSID?': checkData('boolean')
        }))
    ], SDKCreator.prototype, "connectWifi", null);
    __decorate([
        __param(0, checkType('object', {
            type: checkData('string', {
                values: ['photo', 'video', 'file', 'zcamera', 'zcamera_photo', 'zcamera_video', 'zcamera_scan']
            }),
            serverUploadUrl: checkData('url'),
            'maxItemSize?': checkData('number', { min: 0 }),
            'editView?': checkData('object'),
            'editView.enable?': checkData('boolean'),
            'editView.aspectRatio?': checkData('string', { regex: /^\d+:\d+$/ }),
            'silentRequest?': checkData('boolean'),
            'maxSelectItem?': checkData('number', { min: 1 })
        }))
    ], SDKCreator.prototype, "openMediaPicker", null);
    __decorate([
        __param(0, checkType('object', {
            title: checkData('string', { maxLength: 100 }),
            'thumbnail?': checkData('url'),
            'path?': checkData('string'),
            description: checkData(['string'], { maxLength: 400 })
        }, {
            description: ''
        }))
    ], SDKCreator.prototype, "getShareableLink", null);
    __decorate([
        __param(0, required(['url'])),
        __param(0, checkType('object', {
            url: checkData('url'),
        }))
    ], SDKCreator.prototype, "openOutApp", null);
    SDKCreator = __decorate([
        DecorateAll(centralizedFunctionHandler)
    ], SDKCreator);
    class ZaloMiniAppSDKCreator extends SDKCreator {
        getServiceInstance() {
            return ZaloMiniProgramSDKService.getInstance();
        }
    }
    class MockSDKCreator extends SDKCreator {
        getServiceInstance() {
            return new MockSDKService();
        }
    }

    var _PaymentService_appId;
    class PaymentService {
        constructor() {
            _PaymentService_appId.set(this, APP_ID);
        }
        static getInstance() {
            if (!PaymentService.instance) {
                PaymentService.instance = new PaymentService();
            }
            return PaymentService.instance;
        }
        /**
        * Tạo đơn hàng
        *
        * @async
        * @function createOrder
        * @category PaymentService
        * @returns  {Promise<CallbackDataType.CreateOrderCallBack>}
        */
        createOrder(sdk, object) {
            return __awaiter(this, void 0, void 0, function* () {
                const miniAppId = __classPrivateFieldGet(this, _PaymentService_appId, "f");
                const inputData = new URLSearchParams();
                inputData.append('amount', object.amount.toString());
                inputData.append('item', encodeURIComponent(JSON.stringify(object.item)));
                inputData.append('appId', miniAppId);
                if (object.desc) {
                    inputData.append('desc', encodeURIComponent(object.desc));
                }
                if (object.extradata) {
                    inputData.append('extradata', encodeURIComponent(JSON.stringify(object.extradata)));
                }
                if (object.method) {
                    inputData.append('method', object.method);
                }
                const postConfig = {
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'authorization': `Bearer `
                    }
                };
                try {
                    const accessToken = yield sdk.getAccessToken({
                        fail: (error) => {
                            throw apiResponse.error.loginRequired;
                        }
                    });
                    postConfig.headers.authorization = `Bearer ${accessToken}`;
                    const res = yield fetch(PAYMENT_APIS.CREATE_ORDER, Object.assign(Object.assign({ method: 'POST' }, postConfig), { body: inputData }));
                    const resData = yield res.json();
                    if (!resData.data || resData.err !== 0) {
                        throw apiResponse.error.badRequest(resData.msg);
                    }
                    const orderId = resData.data.id;
                    const jwt = resData.data.jwt;
                    const version = window.APP_VERSION;
                    const env = window.APP_ENV;
                    const params = {
                        miniAppId,
                        orderId,
                    };
                    if (jwt) {
                        params.token = jwt;
                    }
                    if (version) {
                        params.version = version;
                    }
                    if (env) {
                        params.env = env;
                    }
                    if (object.method) {
                        params.method = object.method;
                    }
                    const buildURLQuery = QueryString.encode(params);
                    const h5Url = new URL(`?${buildURLQuery}`, PAYMENT_H5_URL).toString();
                    yield sdk.openWebview({
                        url: h5Url,
                        fail: (err) => {
                            throw err;
                        }
                    });
                    return { orderId };
                }
                catch (err) {
                    throw err;
                }
            });
        }
        /**
        * Lấy thông tin transaction
        *
        * @async
        * @function checkTransaction
        * @category PaymentService
        * @returns  {Promise<CallbackDataType.CheckTransactionSuccessCallBack>}
        */
        checkTransaction(sdk, object) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    let { data: inputData } = object;
                    let id;
                    if (!inputData) {
                        inputData = sdk.getRouteParams();
                    }
                    if (typeof inputData === 'object') {
                        id = inputData.appTransID || inputData.orderId || inputData.apptransid;
                    }
                    if (typeof inputData === 'string') {
                        const orderId = QueryString.getParameterByName("orderId", inputData);
                        const appTransID = QueryString.getParameterByName("appTransID", inputData) || QueryString.getParameterByName("apptransid", inputData);
                        id = orderId || appTransID;
                    }
                    const getConfig = {
                        headers: {
                            'authorization': `Bearer `
                        }
                    };
                    const accessToken = yield sdk.getAccessToken({
                        fail: (error) => {
                            throw apiResponse.error.loginRequired;
                        }
                    });
                    getConfig.headers.authorization = `Bearer ${accessToken}`;
                    const url = new URL(PAYMENT_APIS.GET_TRANSACTION);
                    const params = {
                        transId: id || "",
                        appId: __classPrivateFieldGet(this, _PaymentService_appId, "f")
                    };
                    url.search = new URLSearchParams(params).toString();
                    const res = yield fetch(url.toString(), getConfig);
                    const resData = yield res.json();
                    if (!resData.data || resData.err !== 0) {
                        throw apiResponse.error.badRequest(resData.msg);
                    }
                    const data = resData.data || {};
                    const transaction = {
                        msg: data.resultMessage,
                        orderId: data.orderId,
                        resultCode: data.resultCode,
                        transTime: data.transTime,
                        createdAt: data.createAt,
                        transId: data.transId
                    };
                    return transaction;
                }
                catch (err) {
                    throw err;
                }
            });
        }
    }
    _PaymentService_appId = new WeakMap();

    var _MockPaymentService_appId;
    class MockPaymentService {
        constructor() {
            _MockPaymentService_appId.set(this, ZAPP_ID);
        }
        static getInstance() {
            if (!MockPaymentService.instance) {
                MockPaymentService.instance = new MockPaymentService();
            }
            return MockPaymentService.instance;
        }
        createOrder(sdk, object) {
            const result = { orderId: "" };
            return Promise.resolve(result);
        }
        ;
        checkTransaction(sdk, object) {
            const result = {
                msg: 'Success',
                orderId: '',
                resultCode: 1,
                transTime: new Date().getTime().toString(),
                createdAt: new Date().getTime().toString(),
                transId: ''
            };
            return Promise.resolve(result);
        }
    }
    _MockPaymentService_appId = new WeakMap();

    var _PaymentCreator_instance, _PaymentCreator_sdk;
    let PaymentCreator = class PaymentCreator {
        constructor(sdk) {
            _PaymentCreator_instance.set(this, void 0);
            _PaymentCreator_sdk.set(this, void 0);
            __classPrivateFieldSet(this, _PaymentCreator_instance, this.getInstance(), "f");
            __classPrivateFieldSet(this, _PaymentCreator_sdk, sdk, "f");
        }
        /**
         * Tạo đơn hàng
         *
         * @async
         * @function createOrder
         * @category Payment
         * @returns  {Promise<CallbackDataType.CreateOrderCallBack>}
         */
        createOrder(object) {
            return __classPrivateFieldGet(this, _PaymentCreator_instance, "f").createOrder(__classPrivateFieldGet(this, _PaymentCreator_sdk, "f"), object);
        }
        /**
         * Lấy thông tin transaction
         *
         * @async
         * @function checkTransaction
         * @category Payment
         * @returns  {Promise<CallbackDataType.CheckTransactionSuccessCallBack>}
         */
        checkTransaction(object) {
            return __classPrivateFieldGet(this, _PaymentCreator_instance, "f").checkTransaction(__classPrivateFieldGet(this, _PaymentCreator_sdk, "f"), object);
        }
    };
    _PaymentCreator_instance = new WeakMap(), _PaymentCreator_sdk = new WeakMap();
    __decorate([
        __param(0, checkType('object', {
            amount: checkData(['string', 'number']),
            desc: checkData('string'),
            'method?': checkData('string', {
                values: [
                    'MOMO',
                    'ZALOPAY',
                    'MOMO_SANDBOX',
                    'ZALOPAY_SANDBOX',
                    'CC',
                    'CC_SANDBOX',
                    'ATM',
                    'ATM_SANDBOX'
                ]
            })
        }))
    ], PaymentCreator.prototype, "createOrder", null);
    PaymentCreator = __decorate([
        DecorateAll(centralizedFunctionHandler)
    ], PaymentCreator);
    class ZaloMiniAppPaymentCreator extends PaymentCreator {
        getInstance() {
            return PaymentService.getInstance();
        }
    }
    class MockZaloMiniAppPaymentCreator extends PaymentCreator {
        getInstance() {
            return MockPaymentService.getInstance();
        }
    }

    // Zalo Mini App API
    const platform = checkPlatform();
    let app;
    window.onJSCall = (key) => {
        return function (data) {
            ZaloJSBridge.getInstance().onJSCall(key, data);
        };
    };
    window.onMultiJSCall = (key) => {
        return function (data) {
            ZaloJSBridge.getInstance().onMultiJSCall(key, data);
        };
    };
    window.zaloJSV2 = {
        zalo_h5_event_handler: function (eventId, eventName, eventData) {
            ZaloJSBridge.getInstance().nativeEventHandler(eventId, eventName, eventData);
        }
    };
    if (platform.isZalo) {
        app = new ZaloMiniAppSDKCreator();
        new ZaloMiniAppPaymentCreator(app);
    }
    else {
        app = new MockSDKCreator();
        new MockZaloMiniAppPaymentCreator(app);
    }
    window.ZaloMiniAppSDK = app;

    // @ts-ignore
    window.ZaloMiniAppSDK = app;

}());
