import { SDKServiceInterface } from '../types/interface';
import { ZMPEEmitter } from '../event-emitter';
import * as InputDataType from '../types/inputData';
import * as CallbackDataType from '../types/callbackData';
import { contextInfo } from '../types/entity';
export declare abstract class SDKCreator {
    #private;
    events: ZMPEEmitter;
    constructor();
    protected abstract getServiceInstance(): SDKServiceInterface;
    /**
     * Login to call more action.
     *
     * @async
     * @function Login
     * @category Authentication
     *
     * @example
     * zmpApis.login().then((res) => {
     *  console.log("Success");
     * }).catch((error) => {
     *  console.log("Fail");
     * });
     *
     */
    login(object?: InputDataType.CallbackType): Promise<string>;
    getLoginStatus(): boolean;
    /**
     * Get Access Token.
     *
     * @async
     * @function getAccessToken
     * @category Authentication
     *
     * @example
     * zmpApis.getAccessToken().then((res) => {
     *  console.log("Success");
     * }).catch((error) => {
     *  console.log("Fail");
     * });
     *
     */
    getAccessToken(object?: InputDataType.CallbackType): Promise<string | null>;
    getVersion(): string;
    getSystemInfo(): import("../types/entity").systemInfo;
    setNavigationBarTitle(object: InputDataType.NavBarTitleType): Promise<any>;
    setNavigationBarColor(object: InputDataType.NavBarColorType): Promise<any>;
    setBackgroundColor(object: InputDataType.BackgroundColorType): Promise<any>;
    setNavigationBarLeftButton(object: InputDataType.NavBarLeftMenuType): Promise<any>;
    setDeviceOrientation(object: InputDataType.DeviceOrientationType): Promise<void>;
    setStorage(object: InputDataType.SetStorageDataType): Promise<{
        errorKeys: string[];
    }>;
    getStorage(object: InputDataType.GetStorageDataType): Promise<{
        [key: string]: any;
    }>;
    getStorageInfo(object: InputDataType.CallbackType): Promise<InputDataType.StorageInfoDataType>;
    removeStorage(object: InputDataType.RemoveStorageDataType): Promise<{
        errorKeys: string[];
    }>;
    clearStorage(object: InputDataType.ClearStorageDataType): Promise<void>;
    getUserInfo(object?: InputDataType.GetUserInfoDataType<CallbackDataType.GetUserInfoSuccessCallback>): Promise<CallbackDataType.GetUserInfoSuccessCallback>;
    getNetworkType(object: InputDataType.CallbackType): Promise<CallbackDataType.NetworkTypeSuccessCallback>;
    onNetworkStatusChange(callback: (res: InputDataType.OnNetworkStatusChangeCallback) => void): Promise<void>;
    startBeaconDiscovery(object: InputDataType.StartBeaconDiscoveryDataType): Promise<boolean>;
    stopBeaconDiscovery(object: InputDataType.CallbackType): Promise<boolean>;
    getBeacons(object: InputDataType.CallbackType): Promise<CallbackDataType.IBeaconSuccessCallback>;
    closeApp(object: InputDataType.CallbackType): Promise<any>;
    getLocation(object: InputDataType.CallbackType<CallbackDataType.GetLocationSuccessCallback>): Promise<CallbackDataType.GetLocationSuccessCallback>;
    stopBluetoothDevicesDiscovery(): Promise<void>;
    startBluetoothDevicesDiscovery(object: InputDataType.StartBluetoothDevicesDiscovery): Promise<void>;
    openBluetoothAdapter(): Promise<void>;
    onBluetoothDeviceFound(): Promise<void>;
    onBluetoothAdapterStateChange(): Promise<void>;
    getConnectedBluetoothDevices(object: InputDataType.GetConnectedBluetoothDevices): Promise<void>;
    getBluetoothDevices(): Promise<void>;
    getBluetoothAdapterState(): Promise<void>;
    closeBluetoothAdapter(): Promise<void>;
    scanQRCode(object: InputDataType.CallbackType<CallbackDataType.OpenQRSuccessCallback>): Promise<CallbackDataType.OpenQRSuccessCallback>;
    openProfile(object: InputDataType.OpenProfileData): Promise<void>;
    openChat(object: InputDataType.OpenChatData): Promise<void>;
    openPostFeed(object: InputDataType.OpenPostFeedData<CallbackDataType.PostFeedSuccessCallback>): Promise<CallbackDataType.PostFeedSuccessCallback>;
    followOA(object: InputDataType.OAInput): Promise<void>;
    unfollowOA(object: InputDataType.OAInput): Promise<void>;
    openShareSheet(object: InputDataType.OpenShareSheet<CallbackDataType.ShareSheetSuccessCallback>): Promise<CallbackDataType.ShareSheetSuccessCallback>;
    requestCameraPermission(object: InputDataType.CallbackType<CallbackDataType.RequestCameraPermissionSuccessCallback>): Promise<CallbackDataType.RequestCameraPermissionSuccessCallback>;
    createShortcut(object: InputDataType.CreateShortcut): Promise<{
        code: number;
        message: string;
        data: any;
    }>;
    openBioAuthentication(object: InputDataType.OpenBioAuthentication<CallbackDataType.RequestBioAuthenticationSuccessCallback>): Promise<CallbackDataType.RequestBioAuthenticationSuccessCallback>;
    checkStateBioAuthentication(object: InputDataType.CallbackType<CallbackDataType.CheckStateBioAuthenticationSuccessCallback>): Promise<CallbackDataType.CheckStateBioAuthenticationSuccessCallback>;
    sendLocation(object: InputDataType.QueryLocationHide): Promise<void>;
    showToast(object: InputDataType.ShowToast): Promise<void>;
    hideKeyboard(object: InputDataType.CallbackType): Promise<void>;
    openPhone(object: InputDataType.OpenPhone): Promise<void>;
    openSMS(object: InputDataType.OpenSMS): Promise<void>;
    viewOAQr(object: InputDataType.ViewOAQr): Promise<void>;
    keepScreen(object: InputDataType.KeepScreen): Promise<void>;
    saveImageToGallery(object: InputDataType.SaveImageToPhotosAlbumType): Promise<void>;
    saveImageToPhotosAlbum(object: InputDataType.SaveImageToPhotosAlbumType): Promise<void>;
    openMiniApp(object: InputDataType.OpenMiniApp): Promise<void>;
    vibrate(object: InputDataType.VibrateInput): Promise<void>;
    openWebview(object: InputDataType.OpenWebview): Promise<void>;
    getRouteParams(): {
        [key: string]: string;
    };
    getAppInfo(object?: InputDataType.CallbackType<CallbackDataType.AppInfoSuccessCallBack>): Promise<CallbackDataType.AppInfoSuccessCallBack>;
    sendDataToPreviousMiniApp(object: InputDataType.RedirectCallbackData): Promise<void>;
    onCallbackData(callback: (res: InputDataType.OnCallbackData) => void): Promise<void>;
    getPhoneNumber(object?: InputDataType.CallbackType<CallbackDataType.GetPhoneNumberSuccessCallBack>): Promise<CallbackDataType.GetPhoneNumberSuccessCallBack>;
    openProfilePicker(object: InputDataType.OpenProfilePicker<CallbackDataType.OpenProfilePickerSuccessCallBack>): Promise<CallbackDataType.OpenProfilePickerSuccessCallBack>;
    connectWifi(object: InputDataType.ConnectWifi): Promise<void>;
    openMediaPicker(object: InputDataType.OpenMediaPicker<CallbackDataType.OpenMediaPickerSuccessCallBack>): Promise<CallbackDataType.OpenMediaPickerSuccessCallBack>;
    getShareableLink(object: InputDataType.GetShareableLink<string>): Promise<string>;
    closeLoading(object?: InputDataType.CallbackType): Promise<void>;
    requestUpdateZalo(object?: InputDataType.CallbackType): Promise<void>;
    onConfirmToExit(callback: () => void): void;
    offConfirmToExit(): void;
    getDeviceId(): string;
    getDeviceIdAsync(object?: InputDataType.CallbackType<string>): Promise<string>;
    getContext(): contextInfo | null;
    getContextAsync(object?: InputDataType.CallbackType<contextInfo | null>): Promise<contextInfo | null>;
    getAuthCode(object?: InputDataType.CallbackType<CallbackDataType.GetAuthCodeSuccessCallback>): Promise<CallbackDataType.GetAuthCodeSuccessCallback>;
    setAccessToken(accessToken: string): void;
    openOutApp(object: InputDataType.OpenOutApp): Promise<void>;
}
export declare class ZaloMiniAppSDKCreator extends SDKCreator {
    protected getServiceInstance(): SDKServiceInterface;
}
export declare class MockSDKCreator extends SDKCreator {
    protected getServiceInstance(): SDKServiceInterface;
}
