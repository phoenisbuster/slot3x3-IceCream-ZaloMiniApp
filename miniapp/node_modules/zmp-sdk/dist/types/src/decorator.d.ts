import 'reflect-metadata';
export declare const required: (fields: string[] | Array<string>[], option?: {
    if?: Object | undefined;
    defaultValue?: Object | undefined;
} | undefined) => (target: Object, propertyKey: string | symbol, parameterIndex: number) => void;
export declare const checkType: (type: string, properties?: {
    [key: string]: any;
} | undefined, defaultValue?: any) => (target: Object, propertyKey: string | symbol, parameterIndex: number) => void;
export interface DecorateAllOptions {
    deep?: boolean;
    exclude?: string[];
    excludePrefix?: string;
}
/**
 * Apply the given decorator to all class methods
 *
 * @param decorator Method decorator to apply to all methods of a class
 * @param {string[]} options.exclude array of method names that won't be decorated
 * @param {boolean} options.deep if true, also decorates methods of the extended classes (recusrively)
 */
export declare const DecorateAll: (decorator: MethodDecorator, options?: DecorateAllOptions) => (target: any) => void;
export declare const centralizedFunctionHandler: MethodDecorator;
