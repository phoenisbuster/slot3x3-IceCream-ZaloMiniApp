import { ACTION } from './constants';
import EventEmitter from 'eventemitter3';
import { NativeCallBackData } from './types/callbackData';
export default class ZaloJSBridge extends EventEmitter {
    #private;
    private static instance;
    private readonly debug;
    private readonly events;
    static getInstance(): ZaloJSBridge;
    private _accessTk;
    private _jsAccessTk;
    private _jsCallFuncCallbacks;
    private results;
    private _userAgent;
    private _device;
    private sendLogTimer;
    private isJumped;
    constructor();
    getCookie: (name: string) => Promise<{
        name: string;
        value: string;
    }>;
    getCookieSync: (name: string) => {
        name: string;
        value: string;
    };
    set accessTk(value: string);
    set jsAccessTk(value: string);
    jump(): Promise<any>;
    sendLogData(data: {
        action: string;
        error: number;
        message: string;
        data: any;
    }[]): void;
    onJSCall(key: string, data: any): void;
    onMultiJSCall(key: string, data: any): void;
    nativeEventHandler(eventId: string, eventName: string, eventData: string): void;
    handleEventData(eventName: string, data: any): any;
    defaultCallback(data: any): void;
    callNative(action: typeof ACTION[keyof typeof ACTION], data: object, option?: {
        isMultiCallback?: boolean;
        nRetry?: number;
        haveTimeout?: boolean;
        successCallback?: (data: NativeCallBackData) => void;
        delay?: number;
    }): Promise<any>;
}
