import * as InputDataType from './inputData';
import * as CallbackDataType from './callbackData';
import { systemInfo, contextInfo } from './entity';
import { MediaPickerType } from './enum';
import { SDKCreator } from '..';
export interface SDKServiceInterface {
    getAppId: () => string;
    getDeviceId: () => Promise<string>;
    getDeviceIdSync: () => string;
    getContext: () => Promise<contextInfo | null>;
    getContextSync: () => contextInfo | null;
    getAuthCode: () => Promise<CallbackDataType.GetAuthCodeSuccessCallback>;
    login: (object?: InputDataType.CallbackType) => Promise<string>;
    getLoginStatus: () => boolean;
    getAccessToken: (object?: InputDataType.CallbackType) => Promise<string | null>;
    setAccessToken: (accessToken: string) => void;
    getVersion: () => string;
    getSystemInfo: () => systemInfo;
    setNavigationBarTitle: (object: InputDataType.NavBarTitleType) => Promise<any>;
    setNavigationBarColor: (object: InputDataType.NavBarColorType) => Promise<any>;
    setBackgroundColor: (object: InputDataType.BackgroundColorType) => Promise<any>;
    setNavigationBarLeftButton: (type?: 'none' | 'back' | 'home' | 'both', confirmToExit?: 0 | 2) => Promise<any>;
    setDeviceOrientation: (object: InputDataType.DeviceOrientationType) => Promise<void>;
    setStorage: (object: InputDataType.SetStorageDataType) => Promise<{
        errorKeys: Array<string>;
    }>;
    getStorage: (object: InputDataType.GetStorageDataType) => Promise<{
        [key: string]: any;
    }>;
    getStorageInfo: (object?: InputDataType.CallbackType | undefined) => Promise<InputDataType.StorageInfoDataType>;
    removeStorage: (object: InputDataType.RemoveStorageDataType) => Promise<{
        errorKeys: Array<string>;
    }>;
    clearStorage: (option?: InputDataType.ClearStorageDataType) => Promise<void>;
    getUserInfo: (object?: InputDataType.GetUserInfoDataType<CallbackDataType.GetUserInfoSuccessCallback>) => Promise<CallbackDataType.GetUserInfoSuccessCallback>;
    getNetworkType: (object?: InputDataType.CallbackType | undefined) => Promise<CallbackDataType.NetworkTypeSuccessCallback>;
    onNetworkStatusChange: (callback: (res: InputDataType.OnNetworkStatusChangeCallback) => void) => Promise<void>;
    startBeaconDiscovery: (object: InputDataType.StartBeaconDiscoveryDataType) => Promise<boolean>;
    stopBeaconDiscovery: (object?: InputDataType.CallbackType | undefined) => Promise<boolean>;
    getBeacons: (object?: InputDataType.CallbackType | undefined) => Promise<CallbackDataType.IBeaconSuccessCallback>;
    closeApp: (object?: InputDataType.CallbackType | undefined) => Promise<any>;
    getLocation: (object?: InputDataType.CallbackType<CallbackDataType.GetLocationSuccessCallback> | undefined) => Promise<CallbackDataType.GetLocationSuccessCallback>;
    scanQRCode: (object?: InputDataType.CallbackType<CallbackDataType.OpenQRSuccessCallback>) => Promise<CallbackDataType.OpenQRSuccessCallback>;
    openProfile: (object: InputDataType.OpenProfileData) => Promise<void>;
    openChat: (object: InputDataType.OpenChatData) => Promise<void>;
    openPostFeed: (object: InputDataType.OpenPostFeedData<CallbackDataType.PostFeedSuccessCallback>) => Promise<CallbackDataType.PostFeedSuccessCallback>;
    followOA: (object: InputDataType.OAInput) => Promise<void>;
    unFollowOA: (object: InputDataType.OAInput) => Promise<void>;
    openShareSheet: (object: InputDataType.OpenShareSheet<CallbackDataType.ShareSheetSuccessCallback>) => Promise<CallbackDataType.ShareSheetSuccessCallback>;
    requestCameraPermission: (object: InputDataType.CallbackType<CallbackDataType.RequestCameraPermissionSuccessCallback>) => Promise<CallbackDataType.RequestCameraPermissionSuccessCallback>;
    createShortcut: (url: string, title: string, icon: string) => Promise<void>;
    openBioAuthentication: (object: InputDataType.OpenBioAuthentication<CallbackDataType.RequestBioAuthenticationSuccessCallback>) => Promise<CallbackDataType.RequestBioAuthenticationSuccessCallback>;
    checkStateBioAuthentication: (object: InputDataType.CallbackType<CallbackDataType.CheckStateBioAuthenticationSuccessCallback>) => Promise<CallbackDataType.CheckStateBioAuthenticationSuccessCallback>;
    sendLocation: (object: InputDataType.QueryLocationHide) => Promise<void>;
    showToast: (object: InputDataType.ShowToast) => Promise<void>;
    hideKeyboard: (object: InputDataType.CallbackType) => Promise<void>;
    openPhone: (object: InputDataType.OpenPhone) => Promise<void>;
    openSMS: (object: InputDataType.OpenSMS) => Promise<void>;
    viewOAQr: (object: InputDataType.ViewOAQr) => Promise<void>;
    keepScreen: (object: InputDataType.KeepScreen) => Promise<void>;
    saveImageToPhotosAlbum: (object: InputDataType.SaveImageToPhotosAlbumType) => Promise<void>;
    stopBluetoothDevicesDiscovery: () => Promise<void>;
    startBluetoothDevicesDiscovery: (object: InputDataType.StartBluetoothDevicesDiscovery) => Promise<void>;
    openBluetoothAdapter: () => Promise<void>;
    onBluetoothDeviceFound: () => Promise<void>;
    onBluetoothAdapterStateChange: () => Promise<void>;
    getConnectedBluetoothDevices: (object: InputDataType.GetConnectedBluetoothDevices) => Promise<void>;
    getBluetoothDevices: () => Promise<void>;
    getBluetoothAdapterState: () => Promise<void>;
    closeBluetoothAdapter: () => Promise<void>;
    openMiniApp: (object: InputDataType.OpenMiniApp) => Promise<void>;
    vibrate: (object: InputDataType.VibrateInput) => Promise<void>;
    openWebview: (url: string) => Promise<void>;
    getRouteParams: () => {
        [key: string]: string;
    };
    getAppInfo: (object?: InputDataType.CallbackType<CallbackDataType.AppInfoSuccessCallBack>) => Promise<CallbackDataType.AppInfoSuccessCallBack>;
    sendDataToPreviousMiniApp: (object: InputDataType.RedirectCallbackData) => Promise<void>;
    onCallbackData: (callback: (res: InputDataType.OnCallbackData) => void) => Promise<void>;
    getPhoneNumber: (object?: InputDataType.CallbackType<CallbackDataType.GetPhoneNumberSuccessCallBack>) => Promise<CallbackDataType.GetPhoneNumberSuccessCallBack>;
    openProfilePicker: (maxProfile: number) => Promise<string[]>;
    connectWifi: (object: InputDataType.ConnectWifi) => Promise<void>;
    openMediaPicker: (type: keyof typeof MediaPickerType, serverUpload: string, maxItemSize?: number, editView?: {
        enable?: 0 | 1;
        aspect_ratio?: string;
    }, silentRequest?: 0 | 1, maxSelectItem?: number) => Promise<CallbackDataType.OpenMediaPickerSuccessCallBack>;
    openOutApp: (url: string) => Promise<void>;
    closeLoading: (when: string) => Promise<void>;
    openAppStore: (data: InputDataType.AppStoreInfo) => Promise<void>;
}
export interface PaymentServiceInterface {
    createOrder: (sdk: SDKCreator, object: InputDataType.CreateOrder) => Promise<CallbackDataType.CreateOrderCallBack>;
    checkTransaction: (sdk: SDKCreator, object: InputDataType.CheckTransaction) => Promise<CallbackDataType.CheckTransactionSuccessCallBack>;
}
