import e from'./../external/@swc/helpers/src/_async_to_generator.mjs.js';import t,{object as n,string as r}from'./../external/zod/lib/index.mjs.js';import o from"../appEnv/index.js";import s from"../common/notFound.js";import{functionHandler as a}from"../utils/decorator.js";import{__generator as c}from'./../external/tslib/tslib.es6.js';var i=[n({resource:r(),options:t.any().optional()})];function u(e){return p.apply(this,arguments)}function p(){return p=e((function(t){return c(this,(function(n){return[2,a("fetch",i,[t],(r=e((function(t){var n,r,a,i;return c(this,(function(u){switch(u.label){case 0:return n=t.resource,r=t.options,o.isMp?window.Worker?(a=new Worker(URL.createObjectURL(new Blob(["\n          self.onmessage = function (event) {\n            const { url, options } = event.data;\n          \n            // Call the wrapped fetch function to perform the actual fetch\n            fetch(url, options)\n              .then((response) => response.json())\n              .then((data) => {\n                // Send the result back to the main thread\n                self.postMessage({ data });\n              })\n              .catch((error) => {\n                // Send the error back to the main thread\n                self.postMessage({ error: error.message });\n              });\n          };\n          \n          "],{type:"text/javascript"}))),i=function(t){return n=e((function(e){var n;return c(this,(function(r){switch(r.label){case 0:return r.trys.push([0,2,,3]),[4,t(e)];case 1:return[2,r.sent()];case 2:throw n=r.sent(),console.error("Error while fetching:",n),n;case 3:return[2]}}))})),function(e){return n.apply(this,arguments)};var n}(a.postMessage.bind(a)),[4,i({url:n,options:r})]):[3,2]:[3,4];case 1:case 3:case 5:return[2,u.sent()];case 2:return[4,window.fetch(n,r)];case 4:return o.isMpWeb?[4,window.fetch(n,r)]:[3,6];case 6:return[2,Promise.reject(s("fetch",{}))]}}))})),function(e){return r.apply(this,arguments)}))];var r}))})),p.apply(this,arguments)}export{u as fetch};
