import React, { ChangeEvent } from "react";

export type RadioValueType = string | number;

/**
 * @category Data Entry
 * @subcategory Radio
 * @enum {string}
 */
export enum RadioSize {
    /** Kích thước medium - mặc định */
    medium = "medium",
    /** Kích thước small */
    small = "small",
}

/**
 * @category Data Entry
 * @subcategory Radio
 * @displayName Radio
 *
 */
export interface RadioProps {
    /** Trạng thái của radio, sử dụng dạng controlled component */
    checked?: boolean;
    /** Trạng thái khởi tạo của radio */
    defaultChecked?: boolean;
    className?: string;
    style?: React.CSSProperties;
    /** Trạng thái radio bị vô hiệu hoá */
    disabled?: boolean;
    id?: string;
    /** Tên của input radio */
    name?: string;
    /** Thêm label cho radio */
    label?: string;
    /**
     * Giá trị của radio
     *
     * @type {string | number}
     */
    value?: RadioValueType;
    /**
     * Kích thước của radio
     *
     * @type RadioSize
     * @defaultValue medium
     */
    size?: keyof typeof RadioSize;
    children?: React.ReactNode;
    /**
     *  Thêm event handler khi trạng thái radio thay đôi
     * @function onChange
     * @param {ChangeEvent<HTMLInputElement>} input event
     */
    onChange?: (event: ChangeEvent<HTMLInputElement>) => void;
}

/**
 * @category Data Entry
 * @subcategory Radio
 * @displayName Radio.Group
 */
export interface RadioGroupProps {
    /**
     * Giá trị mặc định của radio
     *
     * @type {string | number}
     */
    defaultValue?: RadioValueType;
    value?: RadioValueType;
    /** Vô hiệu hoá các radio trong nhóm */
    disabled?: boolean;
    /** Tên của input radio */
    name?: string;
    /**
     * Kích thước của radio
     *
     * @type RadioSize
     * @defaultValue medium
     */
    size?: keyof typeof RadioSize;
    className?: string;
    style?: React.CSSProperties;
    /**
     * Danh sách các radio cần render thay thế cho cách sử dụng các children là Radio component
     *
     * @type Array
     * @defaultValue []
     */
    options?: RadioProps[];
    /**
     * Thêm event handler khi giá trị radio group thay đôi
     * @function onChange
     *
     * @param {string|number} value Giá trị hiện tại của group radio
     */
    onChange?: (value: RadioValueType) => void;
    children?: React.ReactNode;
}

export interface RadioGroupContext {
    name?: string;
    value?: RadioValueType;
    disabled?: boolean;
    size?: keyof typeof RadioSize;
    onChange?: (checkedValue: ChangeEvent<HTMLInputElement>) => void;
}

export interface CompoundedComponent
    extends React.ForwardRefExoticComponent<
        RadioProps & React.RefAttributes<HTMLInputElement>
    > {
    Group: React.FunctionComponent<RadioGroupProps>;
}

declare const Radio: CompoundedComponent;

export default Radio;


