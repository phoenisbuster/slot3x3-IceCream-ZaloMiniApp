
	/* eslint-disable sonarjs/no-duplicate-string */
export enum SkeletonEffect {
    fade = "fade",
    pulse = "pulse",
    wave = "wave",
    none = "none",
}

/**
 * @category Layout
 * @subcategory Box
 * @enum {string} VerticalAlign
 */
export enum VerticalAlignEnum {
    /** The element is aligned with the baseline of the parent. This is default */
    "baseline" = "baseline",
    /** The element is aligned with the subscript baseline of the parent */
    "sub" = "sub",
    /** The element is aligned with the superscript baseline of the parent */
    "super" = "super",
    /** The element is aligned with the top of the tallest element on the line */
    "top" = "top",
    /**  The element is aligned with the top of the parent element's font */
    "text-top" = "text-top",
    /** The element is placed in the middle of the parent element */
    "middle" = "middle",
    /** The element is aligned with the lowest element on the line */
    "bottom" = "bottom",
    /** The element is aligned with the bottom of the parent element's font */
    "text-bottom" = "text-bottom",
    /** Sets this property to its default value */
    "initial" = "initial",
    /** Inherits this property from its parent element */
    "inherit" = "inherit",
}

export enum FlexDirectionEnum {
    "row" = "row",
    "row-reverse" = "row-reverse",
    "column" = "column",
    "column-reverse" = "column-reverse",
}

export enum JustifyContentEnum {
    "flex-start" = "flex-start",
    "flex-end" = "flex-end",
    "center" = "center",
    "space-between" = "space-between",
    "space-around" = "space-around",
    "space-evenly" = "space-evenly",
    "initial" = "initial",
}

export enum AlignItemsEnum {
    "flex-start" = "flex-start",
    "flex-end" = "flex-end",
    "stretch" = "stretch",
    "baseline" = "baseline",
    "center" = "center",
    "initial" = "initial",
}

export enum AlignContentEnum {
    "stretch" = "stretch",
    "center" = "center",
    "flex-start" = "flex-start",
    "flex-end" = "flex-end",
    "space-between" = "space-between",
    "space-around" = "space-around",
    "space-evenly" = "space-evenly",
    "initial" = "initial",
}

/**
 * @category Layout
 * @subcategory Box
 * @enum {string} TextAlignEnum
 */
export enum TextAlignEnum {
    /** text align left  */
    "left" = "left",
    /** text align right  */
    "right" = "right",
    /** text align center  */
    "center" = "center",
    /** justify  */
    "justify" = "justify",
    /** initital  */
    "initial" = "initital",
    /** inherit  */
    "inherit" = "inherit",
}

/**
 * @category Layout
 * @subcategory Box
 * @displayName Box
 *
 */
export interface BoxProps extends React.HTMLProps<HTMLDivElement> {
    id?: string;
    className?: string;
    style?: React.CSSProperties;
    /** Các element sẽ có `margin: 0` và `padding: 0` */
    noSpace?: boolean;
    /**
     * Nhận giá trị `true` nếu muốn các element inline block
     *
     * @defaultvalue false
     */
    inline?: boolean;
    /** Giá trị margin của box, nhận giá trị là level từ 0 đến 10, với giá trị margin tương ứng là level x 4px */
    m?: number;
    /** Giá trị padding của box, nhận giá trị là level từ 0 đến 10, với giá trị padding tương ứng là level x 4px */
    p?: number;
    /** Giá trị margin top */
    mt?: number;
    /** Giá trị margin left */
    ml?: number;
    /** Giá trị margin bottom */
    mb?: number;
    /** Giá trị margin right */
    mr?: number;
    /** Giá trị padding top */
    pt?: number;
    /** Giá trị padding left */
    pl?: number;
    /** Giá trị padding bottom */
    pb?: number;
    /** Giá trị padding right */
    pr?: number;
    /** Giá trị margin left và margin right */
    mx?: number;
    /** Giá trị margin top và margin bottom */
    my?: number;
    /** Giá trị padding left và padding right */
    px?: number;
    /** Giá trị padding top và padding bottom */
    py?: number;
    /** Chiều rộng của box */
    width?: number;
    /** Chiều dài của box */
    height?: number;
    /**
     * Giá trị vertical-align
     *
     * @type VerticalAlignEnum
     */
    verticalAlign?: keyof typeof VerticalAlignEnum;
    /**
     * Giá trị text-align
     *
     * @type string
     */
    textAlign?: keyof typeof TextAlignEnum;
    /** Chuyển box sang flex layout */
    flex?: boolean;
    /**
     * Giá trị flex-direction
     *
     * @type string
     */
    flexDirection?: keyof typeof FlexDirectionEnum;
    /**
     * Giá trị flex-wrap
     *
     * @type string
     */
    flexWrap?: boolean;
    /**
     * Giá trị justify-content
     *
     * @type string
     */
    justifyContent?: keyof typeof JustifyContentEnum;
    /**
     * Giá trị align-items
     *
     * @type string
     */
    alignItems?: keyof typeof AlignItemsEnum;
    /**
     * Giá trị align-content
     *
     * @type string
     */
    alignContent?: keyof typeof AlignContentEnum;
    ref?: React.MutableRefObject<HTMLDivElement>;
    /** ReactNode */
    children?: React.ReactNode;
}

	declare const Box: React.FunctionComponent<BoxProps>;

	export default Box;
  