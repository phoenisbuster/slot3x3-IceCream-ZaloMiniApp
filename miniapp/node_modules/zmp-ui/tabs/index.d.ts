import React, {
    CSSProperties,
    ForwardRefExoticComponent,
    RefAttributes,
} from "react";

export interface TabProps {
    children?: React.ReactNode;
    className?: string;
    style?: CSSProperties;
    disabled?: boolean;
    label?: React.ReactNode;
}

export interface InternalTabProps extends TabProps {
    id?: string;
    destroyInactiveTabPane?: boolean;
    tabKey?: string;
    active?: boolean;
}

export interface Tab extends InternalTabProps {
    key: string;
    node: React.ReactElement;
}

type RenderTabBarProps = {
    id?: string;
    activeKey?: string;
    onTabClick?: (
        key: string,
        e: React.MouseEvent | React.KeyboardEvent
    ) => void;
    panes?: React.ReactNode;
};

export interface TabBarItemProps {
    id: string;
    tab: Tab;
    active: boolean;
    onClick?: (e: React.MouseEvent | React.KeyboardEvent) => void;
    renderWrapper?: (node: React.ReactElement) => React.ReactElement;
    removeAriaLabel?: string;
    removeIcon?: React.ReactNode;
    onFocus: React.FocusEventHandler;
    style?: React.CSSProperties;
}

export interface TabBarProps {
    id: string;
    activeKey: string;
    panes: React.ReactNode;
    className?: string;
    style?: React.CSSProperties;
    scrollable?: boolean;
    onTabClick: (
        activeKey: string,
        e: React.MouseEvent | React.KeyboardEvent
    ) => void;
    children?: (node: React.ReactElement) => React.ReactElement;
}

export type RenderTabBar = (props: RenderTabBarProps) => React.ReactElement;

/**
 * Bao gồm các props của Input trừ `ref`, `size`, `type`
 * @category Data Display
 * @subcategory Tabs
 * @displayName Tabs
 *
 */
export interface TabsProps {
    children?: React.ReactNode;
    className?: string;
    style?: CSSProperties;
    id?: string;
    /**
     * Mảng các tab cần hiển thị
     *
     * @type Array
     */
    items?: Tab[];
    /** Chỉ định tab ở trạng thái active */
    activeKey?: string;
    /** Chỉ định tab ở trạng thái active khi component được khởi tạo */
    defaultActiveKey?: string;
    /** Chế độ scroll của tab */
    scrollable?: boolean;
    /**
     *  Thêm event handler khi tab thay đôi
     * @function onChange
     * @param {any} event event
     */
    onChange?: (activeKey: string) => void;
    /**
     *  Thêm event handler khi tab được click
     * @function onChange
     * @param {string} activeKey key của tab đang active
     * @param {any} event event
     */
    onTabClick?: (
        activeKey: string,
        e: React.KeyboardEvent | React.MouseEvent
    ) => void;
    /**
     * Custom tab bar
     *
     * @function renderTabBar
     * @param {object} props
     * @return ReactElement
     *
     */
    renderTabBar?: RenderTabBar;
    /** Hiển thị bottom bar */
    bottomBar?: boolean;
    /** Destroy các tab có trạng thái inactive  */
    destroyInactiveTabPane?: boolean;
}

export interface TabListProps {
    activeKey?: string;
    id?: string;
    destroyInactiveTabPane?: boolean;
}

export interface CompoundedComponent
    extends ForwardRefExoticComponent<
        TabsProps & RefAttributes<HTMLDivElement>
    > {
    Tab: ForwardRefExoticComponent<TabProps & RefAttributes<HTMLDivElement>>;
}

declare const Tabs: CompoundedComponent;

export default Tabs;


