import React, { CSSProperties, ReactNode } from "react";
import { InputStatus } from "../../utils/statusUtils";

export type SelectValue = string | number;

export interface SelectOptionProps {
    children?: ReactNode;
    /**
     * Phần text hiển thị của Option
     */
    title?: string;
    /**
     * Giá trị của Option
     */
    value?: SelectValue;
    /**
     * Vô hiệu hoá Option, lúc này user sẽ không thể chọn Option này
     */
    disabled?: boolean;
    className?: string;
}

export interface OptGroupProps {
    /**
     * Label hiển thị tên group
     */
    label?: string;
    children?: ReactNode;
}

export interface BaseOptionType {
    disabled?: boolean;
    [name: string]: any;
}

export interface DefaultOptionType extends BaseOptionType {
    label: React.ReactNode;
    value?: string | number;
    children?: Omit<DefaultOptionType, "children">[];
}

export interface SelectTriggerProps {
    children?: ReactNode;
    popupElement?: ReactNode;
    defaultOpen?: boolean;
    visible?: boolean;
    onVisibilityChange?: (visibilityState: boolean) => void;
    mask?: boolean;
    maskCloseable?: boolean;
}

export type SelectValueType = string | number;

export interface FlattenOptionData<OptionType> {
    label?: React.ReactNode;
    data: OptionType;
    key: React.Key;
    value?: SelectValueType;
    groupOption?: boolean;
    group?: boolean;
}

/**
 * @category Form
 * @subCategory Select
 * @displayName Select
 */
export interface SelectProps {
    id?: string;
    className?: string;
    style?: CSSProperties;
    /**
     * Option/ Các Option đã chọn, controlled component
     */
    value?: SelectValue | SelectValue[];
    /**
     * Option/ Các Option chọn lúc khỏi tạo, uncontrolled component
     */
    defaultValue?: SelectValue | SelectValue[];
    /**
     * Bật chế độ chọn nhiều option
     * @defaultvalue false
     */
    multiple?: boolean;
    children?: ReactNode;
    /**
     * Mặc định mở select bottom sheet hay không
     * @defaultvalue falsse
     */
    defaultOpen?: boolean;
    /**
     * Vô hiệu hoá Select input
     */
    disabled?: boolean;
    /**
     * Thêm event handler khi thay đổi option lựa chọn
     */
    onChange?: (selected?: SelectValueType | SelectValueType[]) => void;
    /**
     * Thêm event handler khi select bottom sheet thay đổi trạng thái mở/đóng
     */
    onVisibilityChange?: (visibilityState: boolean) => void;
    /**
     * Thêm Label hiển thị phía trên Input và tiêu đề cho Select Input và Select bottom sheet
     */
    label?: string;
    /**
     *  Helper text hiển thị phía dưới của field input.
     */
    helperText?: string;
    /**
     *  Text hiển thị khi status của field input là `error`
     */
    errorText?: string;
    /**
     * Trạng thái của field input. Nhận các giá trị: `success` | `error`
     */
    status?: InputStatus;
    /**
     * Thêm name cho input field
     */
    name?: string;
    /**
     * Thêm placeholder cho input trong trường hợp không có option nào đã được chọn
     */
    placeholder?: string;
    /**
     * Thêm placeholder cho input trong trường hợp không có option nào đã được chọn
     */
    mask?: boolean;
    maskCloseable?: boolean;
    closeOnSelect?: boolean;
}

export interface SelectPanelProps {
    className?: string;
    children?: ReactNode;
    title?: string;
    multiple?: boolean;
    optionsList: FlattenOptionData<DefaultOptionType>[];
}
export interface SelectContext {
    name?: string;
    value: SelectValueType[] | SelectValueType;
    disabled?: boolean;
    updateValue?: (value: SelectValueType | SelectValueType[]) => void;
    closeSelectSheet?: () => void;
}

export interface CompoundedComponent
    extends React.ForwardRefExoticComponent<
        SelectProps & React.RefAttributes<HTMLInputElement>
    > {
    Option: React.FunctionComponent<SelectOptionProps>;
    OtpGroup: React.FunctionComponent<OptGroupProps>;
}

declare const Select: CompoundedComponent;

export default Select;


