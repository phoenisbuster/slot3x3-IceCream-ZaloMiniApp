import React, { ForwardRefExoticComponent, RefAttributes } from "react";

export type SnapPointType = ({
    sheetModalHeight,
}: {
    sheetModalHeight: number;
}) => number[];

/**
 * @category Feedback
 * @subcategory Sheet
 * @displayName SheetRef
 */
export type SheetRef = {
    /**
     * function snap đến một điểm chỉ định trong các snap points đã khai báo
     */
    snapTo?: (snapPoint: number) => void;
    /**
     * sheet modal element
     */
    sheet?: HTMLDivElement;
};

/**
 * @category Feedback
 * @subcategory Sheet
 * @displayName Sheet
 *
 */
export interface SheetProps {
    className?: string;
    style?: React.CSSProperties;
    /** Hiển thị mask khi show sheet */
    mask?: boolean;
    /** Function gọi sai khi close sheet */
    afterClose?: () => any;
    /** Function gọi khi close sheet */
    onClose?: (e: React.SyntheticEvent) => any;
    /** Đóng sheet khi click bào mask */
    maskClosable?: boolean;
    /** Hiển thị sheet */
    visible?: boolean;
    /** Title của sheet */
    title?: string;
    /** Style modal */
    modalStyle?: React.CSSProperties;
    /** Style mask */
    maskStyle?: React.CSSProperties;
    /** Modal class name */
    modalClassName?: string;
    /** Mask class name */
    maskClassName?: string;
    /** Sheet width */
    width?: string | number;
    /** Sheet height */
    height?: string | number;
    /** Nội dung sheet */
    children?: React.ReactNode;
    /** Giá trị z-index của modal */
    zIndex?: number;
    /** Sheet handler */
    handler?: boolean;
    /** Chiều cao của sheet ôm theo content
     * @defaultValue false
     */
    autoHeight?: boolean;
    /** content ref
     */
    contentRef?: React.MutableRefObject<HTMLDivElement>;
    /** Vuốt xuống để đóng
     * @defaultValue true
     */
    swipeToClose?: boolean;
    /**
     * Khai báo các snap points, là vị trí của sheet modal (bottom), open là 0, close là 1 (100%)
     */
    snapPoints?: SnapPointType | number[];
    /**
     * Index chọn làm snap point mặc định khi mở sheet
     */
    defaultSnapPoint?: number;
    /**
     * callback function  khi snaps đến một snap point mới
     */
    onSnap?: (snapPoint: number) => void;
    /**
     * Sheet ref
     *
     * @type SheetRef
     *
     */
    ref?: SheetRef;
    unmountOnClose?: boolean;
}

export interface SheetContentProps extends SheetProps {
    title?: string;
    children?: React.ReactNode;
    ariaId?: string;
    onVisibleChanged?: (visible: boolean) => void;
    onMouseDown?: React.MouseEventHandler;
    onMouseUp?: React.MouseEventHandler;
    modalRef?: React.MutableRefObject<HTMLDivElement>;
}

/**
 * @category Feedback
 * @subcategory Sheet
 *
 * @typedef {object} ActionButton
 *
 */
export interface ActionButton {
    text: string;
    style?: React.CSSProperties;
    className?: string;
    /** Nếu giá trị là `true` action sẽ có kiểu highlight */
    highLight?: boolean;
    /** Nếu giá trị là `true` action sẽ có kiểu danger */
    danger?: boolean;
    /** Function sẽ được gọi khi click action */
    onClick?: (e: React.MouseEvent) => void;
    /** Action sau khi click sẽ close modal */
    close?: boolean;
    /** Disable action */
    disabled?: boolean;
    key?: string;
}

/**
 * Bao gồm các props của Sheet trừ `handler`
 * @category Feedback
 * @subcategory Sheet
 * @displayName Sheet.Action
 *
 */
export interface ActionSheetProps
    extends Omit<
        SheetProps,
        "handler" | "ref" | "snapPoints" | "defaultSnap" | "onSnap"
    > {
    /** Có divider giữa các action */
    divider?: boolean;
    /**
     * Danh sách các action
     *
     * @type  Array.ActionButton
     */
    actions?: ActionButton[] | Array<ActionButton[]>;
    /** Có divider giữa các group action */
    groupDivider?: boolean;
}

export interface CompoundedComponent
    extends ForwardRefExoticComponent<
        SheetProps & RefAttributes<HTMLDivElement>
    > {
    Actions: ForwardRefExoticComponent<
        ActionSheetProps & RefAttributes<HTMLDivElement>
    >;
}

declare const Sheet: CompoundedComponent;

export default Sheet;


