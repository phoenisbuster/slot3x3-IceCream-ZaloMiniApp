
	import React from "react";

export type MaskProps = {
    visible?: boolean;
    maskProps?: React.HTMLAttributes<HTMLDivElement>;
    children?: React.ReactNode;
    style?: React.CSSProperties;
    className?: string;
};

/**
 * @category Feedback
 * @subcategory Modal
 *
 * @typedef {object} ModalActions
 *
 */
export interface ModalActions {
    /** Text hiển thị của action */
    text: string;
    style?: React.CSSProperties;
    className?: string;
    /** Nếu giá trị là `true` action sẽ có kiểu highlight */
    highLight?: boolean;
    /** Nếu giá trị là `true` action sẽ có kiểu danger */
    danger?: boolean;
    /** Function sẽ được gọi khi click action */
    onClick?: (e: React.MouseEvent) => void;
    /** Action sau khi click sẽ close modal */
    close?: boolean;
    /** Disable action */
    disabled?: boolean;
    key?: string;
}

/**
 * @category Feedback
 * @subcategory Modal
 * @displayName Modal
 */
export interface ModalProps {
    className?: string;
    style?: React.CSSProperties;
    /** Hiển thị mask */
    mask?: boolean;
    /** Function được gọi sau khi modal đóng */
    afterClose?: () => any;
    /** Function được gọi khhi modal đóng */
    onClose?: (e: React.SyntheticEvent) => any;
    /** Có thể đóng modal khi click vào mask */
    maskClosable?: boolean;
    /** Hiển thị modal */
    visible?: boolean;
    /** Title của modal */
    title?: string;
    /** `src` của cover image */
    coverSrc?: string;
    /** Style modal */
    modalStyle?: React.CSSProperties;
    /** Style mask */
    maskStyle?: React.CSSProperties;
    /** Modal class name */
    modalClassName?: string;
    /** Mask class name */
    maskClassName?: string;
    /** Modal width */
    width?: string | number;
    /** Modal height */
    height?: string | number;
    /** Modal description */
    description?: string;
    /**
     * Modal actions list
     *
     * @type ModalActions
     */
    actions?: ModalActions[];
    verticalActions?: string;
    children?: React.ReactNode;
    /** Hiển thị divider giữa các action */
    actionsDivider?: boolean;
    /** Giá trị zindex của modal */
    zIndex?: number;
    ref?: React.MutableRefObject<HTMLDivElement>;
    unmountOnClose?: boolean;
}

export interface ModalContentProps extends ModalProps {
    ariaId?: string;
    onVisibleChanged?: (visible: boolean) => void;
    onMouseDown?: React.MouseEventHandler;
    onMouseUp?: React.MouseEventHandler;
    modalRef?: React.MutableRefObject<HTMLDivElement>;
}

	declare const Modal: React.FunctionComponent<ModalProps>;

	export default Modal;
  