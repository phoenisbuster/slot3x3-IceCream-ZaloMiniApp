import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["story", "blocked", "children", "src", "online", "className", "size", "style", "backgroundColor"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import React from "react";
import classNames from "clsx";
import { GradientVariants, StoryStatus } from "./props-type";
import { getPrefixCls } from "../../utils/class";
import BlockedIcon from "./block-icon";

var calculateAvatarColor = function calculateAvatarColor(name) {
  if (typeof name !== "string") {
    // eslint-disable-next-line sonarjs/no-duplicate-string
    return GradientVariants["GREEN-GREENLIGHT"];
  }

  var sum = 0;
  var length = name.length;

  for (var i = 0; i < length; i += 1) {
    sum += name.charCodeAt(i);
  }

  var colorIndex = sum % Object.keys(GradientVariants).length;

  switch (colorIndex) {
    case 1:
      return GradientVariants["GREEN-GREENLIGHT"];

    case 2:
      return GradientVariants["PURPLE-BLUE"];

    case 3:
      return GradientVariants["SKYBLUE-GREEN"];

    default:
      return GradientVariants["BLUE-BLUELIGHT"];
  }
};

var Avatar = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _classNames;

  var story = props.story,
      blocked = props.blocked,
      children = props.children,
      src = props.src,
      online = props.online,
      className = props.className,
      size = props.size,
      style = props.style,
      backgroundColor = props.backgroundColor,
      rest = _objectWithoutPropertiesLoose(props, _excluded);

  var prefixCls = getPrefixCls("avatar");
  var bgColor = backgroundColor;

  if (!bgColor && typeof children === "string") {
    bgColor = calculateAvatarColor(children);
  }

  var classes = classNames(prefixCls, (_classNames = {}, _classNames[prefixCls + "-story"] = story === StoryStatus.default, _classNames[prefixCls + "-story-seen"] = story === StoryStatus.seen, _classNames[prefixCls + "-text-xsmall"] = size && size <= 24, _classNames[prefixCls + "-text-small"] = size && size > 24 && size <= 32, _classNames[prefixCls + "-text-medium"] = size && size > 32 && size <= 48, _classNames[prefixCls + "-text-large"] = size && size > 48, _classNames[prefixCls + "-color-01"] = bgColor === GradientVariants["BLUE-BLUELIGHT"], _classNames[prefixCls + "-color-02"] = bgColor === GradientVariants["PURPLE-BLUE"], _classNames[prefixCls + "-color-03"] = bgColor === GradientVariants["SKYBLUE-GREEN"], _classNames[prefixCls + "-color-04"] = bgColor === GradientVariants["GREEN-GREENLIGHT"], _classNames["" + className] = className, _classNames));
  var avatarStyle = {};

  if (style) {
    avatarStyle = _objectSpread({}, style);
  }

  if (size) {
    avatarStyle = _objectSpread(_objectSpread({}, avatarStyle), {}, {
      "--zaui-avatar-size": size + "px"
    });
  }

  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    className: classes,
    style: avatarStyle
  }, rest), src ? /*#__PURE__*/React.createElement("img", {
    className: prefixCls + "-image",
    src: src,
    alt: ""
  }) : /*#__PURE__*/React.createElement("div", {
    className: prefixCls + "-inner"
  }, children), online && /*#__PURE__*/React.createElement("span", {
    className: prefixCls + "-online"
  }), blocked && /*#__PURE__*/React.createElement("span", {
    className: prefixCls + "-blocked"
  }, /*#__PURE__*/React.createElement(BlockedIcon, null)));
});
Avatar.displayName = "zaui-avatar";
export default Avatar;