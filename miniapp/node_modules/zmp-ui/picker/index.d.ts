
	import { ReactNode } from "react";

export type InputStatus = "" | "error" | "success";
export type OptionValueType = string | number;

export type PickerColumnOption = {
    key?: string;
    value: OptionValueType;
    displayName: string;
    selected?: boolean;
};

export type PickerActionType = {
    text?: string;
    onClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
    close?: boolean;
};
export type OnSelect = (value: PickerColumnOption) => void;

export type PickerTriggerProps = {
    children: React.ReactElement;
    popupElement: React.ReactElement;
    onVisibilityChange?: (visibilityState: boolean) => void;
    defaultOpen?: boolean;
    visible?: boolean;
    mask?: boolean;
    maskClosable?: boolean;
};

export interface PickerColumnProps {
    prefixCls?: string;
    className?: string;
    options: PickerColumnOption[];
    name: string;
    value?: PickerColumnOption;
    defaultValue?: PickerColumnOption;
    onChange?: (value: PickerColumnOption, name: string) => void;
}

export type PickerDataType = Omit<
    PickerColumnProps,
    "prefixCls" | "className" | "value" | "defaultValue"
>;
export interface PickerPanelProps {
    prefixCls?: string;
    className?: string;
    data: Array<PickerDataType>;
    defaultValue?: { [name: string]: PickerColumnOption };
    value?: { [name: string]: PickerColumnOption };
    onChange?: (option: PickerColumnOption, name: string) => void;
    onVisibilityChange?: (visibilityState: boolean) => void;
    closePanel?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
    action?: PickerActionType;
    title?: string;
}

export interface PickerProps {
    label?: string;
    helperText?: string;
    errorText?: string;
    status?: InputStatus;
    placeholder?: string;
    title?: string;
    data: Array<PickerDataType>;
    disabled?: boolean;
    defaultValue?: { [name: string]: OptionValueType };
    value?: { [name: string]: OptionValueType };
    defaultOpen?: boolean;
    onChange?: (value: { [name: string]: PickerColumnOption }) => void;
    onVisibilityChange?: (visibilityState: boolean) => void;
    mask?: boolean;
    inputClass?: string;
    maskClosable?: boolean;
    formatPickedValueDisplay?: (value: {
        [name: string]: PickerColumnOption;
    }) => string;
    action?: PickerActionType;
    prefix?: ReactNode;
    suffix?: ReactNode;
    id?: string;
    name?: string;
}

export interface PickerColumnState {
    isMoving: boolean;
    startTouchY: number;
    startScrollerTranslate: number;
    scrollerTranslate: number;
    minTranslate: number;
    maxTranslate: number;
}

	declare const Picker: React.FunctionComponent<PickerProps>;

	export default Picker;
  