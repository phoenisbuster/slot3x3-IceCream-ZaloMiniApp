/* eslint-disable no-use-before-define */
import { CSSProperties, ReactNode } from "react";

/**
 * @category Feedback
 * @subcategory Snackbar
 * @enum {string}
 */
export enum SnackbarPosition {
    /**
     * Mở Snackbar phía trên
     */
    "top" = "top",
    /**
     * Mở Snackbar phía dưới
     */
    "bottom" = "bottom",
}

/**
 * @category Feedback
 * @subcategory Snackbar
 * @enum {string}
 */
export enum SnackbarType {
    /**
     * Snackbar mặc định
     */
    "default" = "default",
    /**
     * Snackbar dùng hiển thị khi thực hiện một tác vụ thành công
     */
    "success" = "success",
    /**
     * Snackbar dùng để hiển thị thông tin
     */
    "info" = "info",
    /**
     * Snackbar dùng để hiển thị phản hồi một tác vụ thực hiện bị lỗi
     */
    "error" = "error",
    /**
     * Snackbar dùng để đưa ra cảnh báo
     */
    "warning" = "warning",
    /**
     * Snackbar dùng để hiển thị trạng thái loading
     */
    "loading" = "loading",
    /**
     * Snackbar hiển thị tiến trình download
     */
    "download" = "download",
    /**
     * Snackbar hiển thị với countdowwn
     */
    "countdown" = "countdown",
    /**
     * Snackbar hiển thị khi network kết nối
     */
    "wifi-connected" = "wifi-connected",
    /**
     * Snackbar hiẻn thị khi network ngắt kết nối
     */
    "wifi-disconnected" = "wifi-disconnected",
}

/**
 * @category Feedback
 * @subcategory Snackbar
 * @displayName SnackbarProvider
 */
export interface SnackbarProps {
    style?: CSSProperties;
    className?: string;
    children?: ReactNode;
    /**
     * Tuỳ chỉnh z-index cho snackbar
     */
    zIndex?: number;
}

/**
 * @category Feedback
 * @subcategory Snackbar
 * @displayName SnackbarContext
 *
 * SnackbarProvider cung cấp các hooks
 */
export interface SnackbarContext {
    /**
     * Function để trigger tạo mới và mở một Snackbar. Có thể mở Snackbar với các [SnackbarOptions](#snackbaroptions)
     */
    openSnackbar: (options: SnackbarOptions) => void;
    /**
     * Function để đóng một Snackbar, có thể sử dụng để đóng nhanh khi chưa hết thời gian hiển thị
     */
    closeSnackbar: () => void;
    /**
     * Set phần trăm tiến trình download (0 - 100) khi type="download"
     */
    setDownloadProgress?: (completed: number) => void;
}

/**
 * @category Feedback
 * @subcategory Snackbar
 * @typedef {object} SnackbarAction
 */
export interface SnackbarAction {
    /**
     * Action close
     */
    close?: boolean;
    /**
     * Phần text hiển thị cho action
     */
    text?: string;
    /**
     * Thêm event handler cho click event khi user nhấn vào action
     */
    onClick?: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void;
}

/**
 * @category Feedback
 * @subcategory Snackbar
 * @typedef {object} SnackbarOptions
 */
export interface SnackbarOptions {
    /**
     * Vị trí snackbar
     * @type SnackbarPosition
     */
    position?: keyof typeof SnackbarPosition;
    /**
     * Thời gian tồn tại của snackbar tính theo ms
     */
    duration?: number;
    /**
     * Phần text hiển thị trên snackbar
     */
    text?: string;
    /**
     * Loại snackbar
     *  @type  SnackbarType
     */
    type?: keyof typeof SnackbarType;
    /**
     * Thêm action cho snackbar
     * @type SnackbarAction
     */
    action?: SnackbarAction;
    /**
     * Thêm lead icon cho snackbar
     */
    prefixIcon?: ReactNode;
    /**
     * Hiển thị icon cho snackbar trường hợp type default
     */
    icon?: boolean;
    /**
     * Hiển thị action tại hàng mới, thường sử dụng khi action có độ dài text dài
     */
    verticalAction?: boolean;
    /**
     * Tuỳ chỉnh z-index cho snackbar
     */
    zIndex?: number;
    /**
     * Thêm event handler khi snackbar đóng
     */
    onClose?: () => void;
}

export type UseSnackbarType = {
    openSnackbar: (options: SnackbarOptions) => void;

    closeSnackbar: () => void;

    setDownloadProgress: (completed: number) => void;
};

export type BaseSnackbarOptions = Pick<
    SnackbarOptions,
    | "action"
    | "text"
    | "prefixIcon"
    | "icon"
    | "verticalAction"
    | "position"
    | "type"
    | "duration"
    | "zIndex"
> & {
    style?: CSSProperties;
    className?: string;
};

export interface BaseSnackbarProps extends BaseSnackbarOptions {
    downloadProgress?: number;
}

declare const SnackbarProvider: React.FunctionComponent<SnackbarProps>;

export default SnackbarProvider;


