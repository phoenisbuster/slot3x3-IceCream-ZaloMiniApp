"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _clsx = _interopRequireDefault(require("clsx"));

var _reactTransitionGroup = require("react-transition-group");

var _class = require("../../utils/class");

var _button = _interopRequireDefault(require("../button"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var Content = /*#__PURE__*/_react.default.forwardRef(function (props, ref) {
  var _classNames;

  var title = props.title,
      ariaId = props.ariaId,
      children = props.children,
      coverSrc = props.coverSrc,
      description = props.description,
      actions = props.actions,
      verticalActions = props.verticalActions,
      _props$visible = props.visible,
      visible = _props$visible === void 0 ? false : _props$visible,
      onVisibleChanged = props.onVisibleChanged,
      onClose = props.onClose,
      _props$actionsDivider = props.actionsDivider,
      actionsDivider = _props$actionsDivider === void 0 ? true : _props$actionsDivider,
      onMouseDown = props.onMouseDown,
      onMouseUp = props.onMouseUp,
      modalClassName = props.modalClassName,
      modalStyle = props.modalStyle,
      height = props.height,
      width = props.width;
  var prefixCls = (0, _class.getPrefixCls)("modal-content");
  var cls = (0, _clsx.default)(prefixCls, modalClassName);
  var actionsCls = (0, _clsx.default)(prefixCls + "-actions", (_classNames = {}, _classNames[prefixCls + "-actions-vertical"] = verticalActions, _classNames[prefixCls + "-actions-no-divider"] = actionsDivider === false, _classNames));
  var modalContentStyle = {};

  if (modalStyle) {
    modalContentStyle = _objectSpread({}, modalStyle);
  }

  if (height) {
    modalContentStyle.height = height;
  }

  if (width) {
    modalContentStyle.width = width;
  }

  var coverNode = /*#__PURE__*/_react.default.createElement("div", {
    className: prefixCls + "-cover"
  }, /*#__PURE__*/_react.default.createElement("img", {
    src: coverSrc,
    alt: title
  }));

  var mainContent = /*#__PURE__*/_react.default.createElement("div", {
    className: prefixCls + "-main"
  }, /*#__PURE__*/_react.default.createElement("div", {
    className: prefixCls + "-title"
  }, title), /*#__PURE__*/_react.default.createElement("div", {
    className: prefixCls + "-description"
  }, description), children);

  var actionContent = actions ? /*#__PURE__*/_react.default.createElement("div", {
    className: actionsCls
  }, actions.map(function (action, index) {
    var _classNames2;

    var actionClassName = action.className,
        onClick = action.onClick,
        highLight = action.highLight,
        danger = action.danger,
        close = action.close,
        _action$style = action.style,
        style = _action$style === void 0 ? {} : _action$style;
    var btnCls = (0, _clsx.default)(actionClassName, prefixCls + "-action", (_classNames2 = {}, _classNames2[prefixCls + "-action-highlight"] = highLight, _classNames2));

    var onActionClick = function onActionClick(e) {
      if (close && onClose) {
        onClose(e);
        return;
      }

      if (onClick) {
        onClick(e);
      }
    };

    var actionType = "neutral";

    if (highLight) {
      actionType = "highlight";
    }

    if (danger) {
      actionType = "danger";
    }

    return /*#__PURE__*/_react.default.createElement(_button.default, {
      key: action.key || "zaui-modal-action-key-" + index,
      className: btnCls,
      onClick: onActionClick,
      style: style,
      variant: "tertiary",
      type: actionType
    }, action.text);
  })) : null;
  return /*#__PURE__*/_react.default.createElement(_reactTransitionGroup.CSSTransition, {
    in: visible,
    timeout: {
      exit: 300,
      enter: 300
    },
    classNames: prefixCls,
    key: "modal-content",
    onEnter: function onEnter() {
      onVisibleChanged == null ? void 0 : onVisibleChanged(true);
    },
    nodeRef: ref,
    onExited: function onExited() {
      return onVisibleChanged == null ? void 0 : onVisibleChanged(false);
    }
  }, /*#__PURE__*/_react.default.createElement("div", {
    ref: ref,
    key: "dialog-element",
    role: "dialog",
    "aria-labelledby": title ? ariaId : undefined,
    "aria-modal": "true",
    className: cls,
    onMouseDown: onMouseDown,
    onMouseUp: onMouseUp,
    style: modalContentStyle
  }, coverSrc && coverNode, mainContent, actionContent));
});

var _default = Content;
exports.default = _default;