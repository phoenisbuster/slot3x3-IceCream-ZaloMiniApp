"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.getSlides = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _childrens = require("../../../utils/childrens");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var getSlides = function getSlides(children, loop) {
  var slides = (0, _childrens.toArray)(children).map(function (node, index) {
    if ( /*#__PURE__*/_react.default.isValidElement(node)) {
      var key = node.key ? String(node.key) : index;
      return _objectSpread(_objectSpread({
        key: key
      }, node.props), {}, {
        node: node
      });
    }

    return null;
  }).filter(function (slide) {
    return slide;
  });

  if (loop) {
    var firstSlide = slides[0];
    var lastSlide = slides[slides.length - 1];

    if (firstSlide) {
      slides.push(_objectSpread(_objectSpread({}, firstSlide), {}, {
        key: firstSlide.key + "-clone"
      }));
    }

    if (lastSlide) {
      slides.unshift(_objectSpread(_objectSpread({}, lastSlide), {}, {
        key: (lastSlide == null ? void 0 : lastSlide.key) + "-clone"
      }));
    }
  }

  return slides;
};

exports.getSlides = getSlides;