"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactRouterDom = require("react-router-dom");

var _ZMPRouter = require("../../components/router/ZMPRouter");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var useNavigate = function useNavigate() {
  var navigate = (0, _reactRouterDom.useNavigate)();

  var context = _react.default.useContext(_ZMPRouter.AnimationRouterContext);

  if (!context) {
    throw new Error("To use `useNavigate`, component must be contained with ZMPRouter component");
  }

  return (0, _react.useCallback)(function (to, options) {
    var _ref = options || {},
        animate = _ref.animate,
        direction = _ref.direction;

    context.setAnimate({
      animate: animate != null ? animate : true,
      direction: direction || "forward"
    });

    if (typeof to === "number") {
      navigate(to);
    } else {
      navigate(to, options);
    }
  }, [context, navigate]);
};

var _default = useNavigate;
exports.default = _default;