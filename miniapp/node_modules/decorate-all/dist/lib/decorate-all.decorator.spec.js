"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
const decorate_all_decorator_1 = require("./decorate-all.decorator");
const AppendString = (mark) => {
    return (target, propertyKey, descriptor) => {
        const original = descriptor.value;
        descriptor.value = function (name) {
            return original.call(this, name + mark);
        };
    };
};
let Hello = class Hello {
    constructor(message) {
        this.message = message;
    }
    a(name) {
        return this.message + name;
    }
    b(name) {
        return this.message + name;
    }
    c(name) {
        return this.message + name;
    }
};
__decorate([
    Reflect.metadata('name', 'Hello.a'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], Hello.prototype, "a", null);
Hello = __decorate([
    Reflect.metadata('name', 'Hello'),
    __metadata("design:paramtypes", [String])
], Hello);
let DecoratedHello = class DecoratedHello {
    constructor(message) {
        this.message = message;
    }
    a(name) {
        return this.message + name;
    }
    b(name) {
        return this.message + name;
    }
    c(name) {
        return this.message + name;
    }
};
__decorate([
    Reflect.metadata('name', 'DecoratedHello.a'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", void 0)
], DecoratedHello.prototype, "a", null);
DecoratedHello = __decorate([
    decorate_all_decorator_1.DecorateAll(AppendString('!')),
    __metadata("design:paramtypes", [String])
], DecoratedHello);
let ExtendedHello = class ExtendedHello extends Hello {
    c(name) {
        return this.message + name;
    }
};
ExtendedHello = __decorate([
    decorate_all_decorator_1.DecorateAll(AppendString('!'))
], ExtendedHello);
let DeepExtendedHello = class DeepExtendedHello extends Hello {
    c(name) {
        return this.message + name;
    }
};
DeepExtendedHello = __decorate([
    decorate_all_decorator_1.DecorateAll(AppendString('!'), { deep: true })
], DeepExtendedHello);
let DeepExtendedExcludedHello = class DeepExtendedExcludedHello extends Hello {
};
DeepExtendedExcludedHello = __decorate([
    decorate_all_decorator_1.DecorateAll(AppendString('?'), { deep: true, exclude: ['b'] })
], DeepExtendedExcludedHello);
let ExcludedHello = class ExcludedHello {
    constructor(message) {
        this.message = message;
    }
    a(name) {
        return this.message + name;
    }
    b(name) {
        return this.message + name;
    }
    c(name) {
        return this.message + name;
    }
};
ExcludedHello = __decorate([
    decorate_all_decorator_1.DecorateAll(AppendString('?'), { exclude: ['b'] }),
    __metadata("design:paramtypes", [String])
], ExcludedHello);
let ExtendedDecoratedHello = class ExtendedDecoratedHello extends ExtendedHello {
};
ExtendedDecoratedHello = __decorate([
    decorate_all_decorator_1.DecorateAll(AppendString('?'), { deep: true, exclude: ['b'] })
], ExtendedDecoratedHello);
let ExcludePrefixHello = class ExcludePrefixHello {
    constructor(message) {
        this.message = message;
    }
    _a(name) {
        return this.message + name;
    }
    b(name) {
        return this.message + name;
    }
};
ExcludePrefixHello = __decorate([
    decorate_all_decorator_1.DecorateAll(AppendString('?'), { excludePrefix: '_' }),
    __metadata("design:paramtypes", [String])
], ExcludePrefixHello);
let ExtendedExcludePrefixHello = class ExtendedExcludePrefixHello extends ExcludePrefixHello {
    PRIVATE_c(name) {
        return this.message + name;
    }
};
ExtendedExcludePrefixHello = __decorate([
    decorate_all_decorator_1.DecorateAll(AppendString('!'), {
        excludePrefix: 'PRIVATE',
        deep: true,
        exclude: ['_a'],
    })
], ExtendedExcludePrefixHello);
describe('DecorateAll', () => {
    it('decorates all methods', () => {
        const hello = new DecoratedHello('test');
        expect(hello.a('a')).toEqual('testa!');
        expect(hello.b('b')).toEqual('testb!');
        expect(hello.b('c')).toEqual('testc!');
    });
    it('does not decorate inherited methods when deep is false', () => {
        const hello = new ExtendedHello('test');
        expect(hello.a('a')).toEqual('testa');
        expect(hello.b('b')).toEqual('testb');
        expect(hello.c('c')).toEqual('testc!');
    });
    it('decorates inherited methods when deep is true', () => {
        const hello = new DeepExtendedHello('test');
        expect(hello.a('a')).toEqual('testa!');
        expect(hello.b('b')).toEqual('testb!');
        expect(hello.c('c')).toEqual('testc!');
    });
    it('leaves the base class intact', () => {
        const hello = new Hello('test');
        expect(hello.a('a')).toEqual('testa');
        expect(hello.b('b')).toEqual('testb');
        expect(hello.c('c')).toEqual('testc');
    });
    it('does not decorate excluded methods', () => {
        const hello = new ExcludedHello('test');
        expect(hello.a('a')).toEqual('testa?');
        expect(hello.b('b')).toEqual('testb');
        expect(hello.c('c')).toEqual('testc?');
    });
    it('does not decorate methods with excluded prefix', () => {
        const hello = new ExcludePrefixHello('test');
        expect(hello._a('a')).toEqual('testa');
        expect(hello.b('b')).toEqual('testb?');
    });
    it('does not decorate methods from child class with excluded prefix', () => {
        const hello = new ExtendedExcludePrefixHello('test');
        expect(hello._a('a')).toEqual('testa');
        expect(hello.b('b')).toEqual('testb!?');
        expect(hello.PRIVATE_c('c')).toEqual('testc');
    });
    it('does not decorate excluded inherited methods', () => {
        const hello = new DeepExtendedExcludedHello('test');
        expect(hello.a('a')).toEqual('testa?');
        expect(hello.b('b')).toEqual('testb');
        expect(hello.c('c')).toEqual('testc?');
    });
    it('preserves decorators on inherited methods', () => {
        const hello = new ExtendedDecoratedHello('test');
        expect(hello.a('a')).toEqual('testa?');
        expect(hello.b('b')).toEqual('testb');
        expect(hello.c('c')).toEqual('testc?!');
    });
    it('preserves metadata from own method', () => {
        const hello = new DecoratedHello('');
        const metadata = Reflect.getMetadata('name', hello, 'a');
        expect(metadata).toEqual('DecoratedHello.a');
    });
    it('preserves metadata from inherited method', () => {
        const hello = new ExtendedHello('');
        const metadata = Reflect.getMetadata('name', hello, 'a');
        expect(metadata).toEqual('Hello.a');
    });
});
